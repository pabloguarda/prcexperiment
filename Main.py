# coding=utf-8

# ***************   UCL Experiment *************************************** #

#Install PYQT 4 from https://www.riverbankcomputing.com/static/Docs/PyQt4/installation.html
#Instrucions http://www.noktec.be/python/how-to-install-pyqt4-on-osx
#https://stackoverflow.com/questions/26021882/installing-pyqt4-on-mac-osx-mavericks
#unset PYTHONPATH
#brew install sip --with-python3
#brew install pyqt --with-python3


#1) USER INTERFACE (UI):
# ExperimentInterface.ui: Contains the initial user interface (UI) of the program. It is basically a Stacked Widget with 5 pages
# (Page 1: pageConsent, Page 2: demographicsPage , Page 3: simulationExpPage , Page 4: choiceExpPage Page 5:debriefPage). "ExperimentInterface.ui" must be in the same folder than this py.file
# * Most of the UI is created in the main class and the code is very well documented in case you want to make changes in the UI
# ** The GUI is totally separated from the code. It is only use to show the output of the program but not to read information from any variable.
# *** The folder "Screenshots" contains pictures of the program running

#2) PYTHON FILES:
# a) StackedWidget.py is a autogenerated python file
# b) ExperimentInterface.py is the output obtained by executing the following command in the terminal
## c) "pyuic4-3.4 ExperimentInterface.ui -o ExperimentInterface.py". This command must be executed in the terminal before running Main.py.
# c) "pyuic5 ExperimentInterface.ui -o ExperimentInterface.py". This command must be executed in the terminal before running Main.py.
# In windows computers the following command must be executed: pyuic4 ExperimentInterface.ui -o ExperimentInterface.py

# d) Main.py contains the code for the main execution of the program.
# e) Functions.py contains several functions used during the program. They might be created in the main class, but this might decrease readability
# f) Journey.py define the classes Mode, TravelTime, WaitingTime, Trip and TripStages
# g) .py define the class .

# 3) INPUT FILES (txt extension)
# a) consentExperiment.txt: Contains the instructions shown in the first page (consentPage of the Stacked Widget)

# *********************************************************************** #

# ***************  Import libraries *************************************** #

import site
import os
from os import listdir # This library has some functions to read the list of files names in a folder
import sys
QTPY_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)),
                         'vendor', 'Qt.py')
site.addsitedir(QTPY_PATH)
sys.path.append(QTPY_PATH)

import os
os.environ['QT_SIP_API_HINT'] = "2"
os.environ["QT_VERBOSE"] = "True"

# import Qt

from PyQt5 import QtGui, QtCore, uic, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication
from PyQt5.QtGui import * # QPalette, QColor, QFont
from PyQt5.QtCore import QTimer

from Animations import * #Mode class
from Scripts.Experiment import *
from Scripts.ITS import * #Import class 'ITS'
from Scripts.Location import * # class
from Scripts.Mode import * #Import class 'Bus', 'Vehicle', 'Car', 'Bike'
from Scripts.Network import * #Import class 'Route'
from Scripts.Participant import *  # Class participant
from Scripts.Person import * #Import class 'Person'
from myWidgets import *

# ***************  Creation and Formatting of Main Window *************************************** #
#os.environ["QT_PREFERRED_BINDING"] = "1"
#Default command to create the main window and launch the UI.
app = QApplication(sys.argv)
window = QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(window)

# # The following function set the size of the main window as a percentage of the screen's width and height (percentageScreen)
windowMaximized(window = window,fullScreen=True,showMainWindowTitle = False)  # If it is true, the percentage margin in the screen is 0 and the user cannot see anything more than the experiment


#Set the size of the window to their size and set the position (close to the origin)
windowWidth = window.width()
windowHeight = window.height()
# window.setGeometry(0, 0, windowWidth, windowHeight) #If the x,y parameters are set in 0, the window is not completely shown in the computer labs
window.setGeometry(0, 0, windowWidth, windowHeight) #If the x,y parameters are set in 0, the window is not completely shown in the computer labs
window.setFixedSize(windowWidth ,windowHeight) # The user cannot change the size of the window

#Other formatting options for the main window
removeUpperButtonsWindow(window) #This function remove the upper buttons of the main window
window.statusBar().setVisible(False) #Remove status bar of the main window

#Set title of the window
# window.setWindowTitle("")
window.fontSizeTitle = 26 #Size of the titles in the stacked widget pages' of the experiment

# ***************  Experiment Parameters *************************************** #

#id of the experiment
window.experimentId = 1 #This value should be changed if a experiment with new parameters will be run (for example, number of participants of the experiment)

#Experiment description
window.experimentDescription = ''

#Conditions for the experiments (waiting time)
window.waitingTimes = [1,2,3,4,5] #More conditions can be added and the program will automatically modify output. IN this example, the conditions are 1..5 minutes of waiting time
window.waitingTime = window.waitingTimes[randint(1, len(window.waitingTimes))-1] # Generate a random waiting time depending on the conditions

#Participant information
# window.currentParticipant = None #Object for the current participant in the experiment
# window.currentParticipant = Participant(age = 27, gender = "Male", educationLevel = "Graduate", country = "UK")

window.participantTrips = [] #List wit the information of each trip chosen by the participant
window.currentTrip = Trip()

# #Experimental conditions
# window.simulatedExperimentConditions = ["control","treatment"]
# window.simulatedExperimentCondition = window.simulatedExperimentConditions[1]

# ***************  Creation and Formatting of the Stacked Widget (5 pages) *************************************** #

#The 'next' buttons will always have the same position (lower left corner) and format.
# The third line in each coding block, create the nexxt buttons in each page.

def createNextButtonsActions():

    # Consent: Link the signal emmited by the button next, with its corresponding function
    ui.buttonNextConsent1Page.clicked.connect(buttonNextConsent1Clicked)
    ui.buttonNextConsent2Page.clicked.connect(buttonNextConsent2Clicked)

    # Next button for description of the scenarios
    ui.buttonNextScenarioDescriptionPage.clicked.connect(buttonNextScenarioDescriptionPageClicked)

    # Link the signal emmited by the button next, with its corresponding function
    ui.buttonNextSimulationExperimentGeneralDescription.clicked.connect(buttonNextSimulationExperimentGeneralDescriptionClicked)
    ui.buttonBackSimulationExperimentGeneralDescription.clicked.connect(buttonBackSimulationExperimentGeneralDescriptionClicked)
    ui.buttonNextSimulationExperimentDescriptionPage.clicked.connect(buttonNextExperimentDescriptionClicked)

    # Link the signal emmited by the button next, with its corresponding function
    ui.buttonNextSimulationExpChoicePage.clicked.connect(buttonNextSimulationExpChoicePageClicked)
    ui.startJourneyButton.clicked.connect(startJourneyClicked)
    ui.nextJourneyButton.clicked.connect(nextJourneyClicked)

    # This link the signal sent by the button next with its corresponding function (above)

    ui.buttonNextDecisionExpDescriptionPage.clicked.connect(nextButtonDecisionExpDescriptionPage)

    # This link the signal sent by the button next with its corresponding function (above)
    ui.buttonNextDecisionSeparateExpPage.clicked.connect(nextButtonDecisionSeparateExpPage)

    # This link the signal sent by the button next with its corresponding function (above)
    ui.buttonBackSimulationExpChoicePage.clicked.connect(buttonBackSimulationExpChoicePageClicked)

    # This link the signal sent by the button next with its corresponding function (above)
    ui.buttonNextProspectExpPage.clicked.connect(nextButtonProspectExpPage)

    # This link the signal sent by the button next with its corresponding function (above)
    ui.buttonNextDemographicsPage.clicked.connect(buttonNextDemographicsClicked)

    # This link the signal sent by the button next with its corresponding function (above)
    ui.buttonNextTravelBehaviourPage.clicked.connect(buttonNextTravelBehaviourPageClicked)

    # This link the signal sent by the button next with its corresponding function (above)
    ui.buttonNextExperimentDebriefPage.clicked.connect(buttonNextExperimentDebriefPageClicked)

    ui.buttonNextDebriefPage.clicked.connect(buttonNextDebriefPageClicked)

def createWidgetAndNextButtons():

    #Centering the whole stacked widget in the screen
    centerStackedWidget(stackedWidget = ui.stackedWidget, mainWindow = window)
    backgroundStackedWidget(window, "white") #Background colour of main window
    ui.stackedWidget.setFrameShape(QFrame.NoFrame) #Remove the coloured border in the stacked widget

    #1) Consent Pages
    # a)Centering the Consent1 page and adding next button
    centerWidget(mainWidget = ui.consent1Page, subWidget = ui.consent1Panel)
    backgroundStackedWidget(ui.consent1Panel, "white") #Background colour of main window
    ui.buttonNextConsent1Page = QPushButton() #Creation of 'Next' buttons
    ui.pushButtonConsent1Grid.addWidget(ui.buttonNextConsent1Page,0,0) #Add button to a grid

    # B)Centering the Consent2 page and adding next button
    centerWidget(mainWidget=ui.consent2Page, subWidget=ui.consent2Panel)
    backgroundStackedWidget(ui.consent2Panel, "white")  # Background colour of main window
    ui.buttonNextConsent2Page = QPushButton()  # Creation of 'Next' buttons
    ui.pushButtonConsent2Grid.addWidget(ui.buttonNextConsent2Page, 0, 0)  # Add button to a grid

    #3) Main Page
    centerWidget(mainWidget=ui.scenarioDescriptionPage, subWidget=ui.scenarioDescriptionPanel)
    backgroundStackedWidget(ui.scenarioDescriptionPanel, "white")  # Background colour of main window
    ui.buttonNextScenarioDescriptionPage = QPushButton() #Creation of 'Next' buttons
    ui.pushButtonsScenarioDescriptionGrid.addWidget(ui.buttonNextScenarioDescriptionPage, 0,
                                                         0)  # Add button to a grid

    #4) Experiment Decision-from-Simulation pages

    # Centering the Description Experiment and adding next button

    centerWidget(mainWidget=ui.simulationExpGeneralDescriptionPage, subWidget=ui.simulationExpGeneralDescriptionPanel)
    backgroundStackedWidget(ui.simulationExpGeneralDescriptionPanel, "white")  # Background colour of main window
    # ui.buttonNextSimulationExperimentDescriptionPage = QPushButton()  # Creation of 'Next' buttons
    # ui.pushButtonsSimulationExpDescriptionGrid.addWidget(ui.buttonNextSimulationExperimentDescriptionPage, 0,
    #                                                      0)  # Add button to a grid
    #a) Description Sections
    centerWidget(mainWidget = ui.simulationExpDescriptionPage, subWidget = ui.simulationExpDescriptionPanel)
    backgroundStackedWidget(ui.simulationExpDescriptionPanel, "white") #Background colour of main window
    ui.buttonNextSimulationExperimentDescriptionPage = QPushButton() #Creation of 'Next' buttons
    ui.pushButtonsSimulationExpDescriptionGrid.addWidget(ui.buttonNextSimulationExperimentDescriptionPage,0,0) #Add button to a grid

    #b) Learning and Consequence Sections
    centerWidget(mainWidget = ui.simulationExpPage, subWidget = ui.simulationExpPanel)
    backgroundStackedWidget(ui.simulationExpPanel, "white") #Background colour of main window

    #Start JourneyButton
    ui.startJourneyButton = QPushButton(ui.simulationExpPanel)
    ui.startJourneyGrid.addWidget(ui.startJourneyButton)

    #Next Journey Button
    ui.nextJourneyButton = QPushButton(ui.simulationExpPanel)
    ui.nextJourneyGrid.addWidget(ui.nextJourneyButton)
    ui.nextJourneyButton.setVisible(False) #At the beginning

    #c) Choice Section
    centerWidget(mainWidget = ui.simulationExpChoicePage, subWidget = ui.simulationExpChoicePanel)
    backgroundStackedWidget(ui.simulationExpChoicePanel, "white") #Background colour of main window

    #4) Centering the Experiment Decision-from-Description Pages and adding next button

    #a) Description
    centerWidget(mainWidget = ui.decisionExpDescriptionPage, subWidget = ui.decisionExpDescriptionPanel)
    backgroundStackedWidget(ui.decisionExpDescriptionPanel, "white") #Background colour of main window
    ui.buttonNextDecisionExpDescriptionPage = QPushButton() #Creation of 'Next' button
    ui.pushButtonsDecisionExpDescriptionGrid.addWidget(ui.buttonNextDecisionExpDescriptionPage)

    #b) Control Condition (table)

    centerWidget(mainWidget=ui.decisionSeparateExpPage, subWidget=ui.decisionSeparateExpPanel)
    backgroundStackedWidget(ui.decisionSeparateExpPanel, "white")  # Background colour of main window
    ui.buttonNextDecisionSeparateExpPage = QPushButton()  # Creation of 'Next' button
    ui.pushButtonsDecisionSeparateExpGrid.addWidget(ui.buttonNextDecisionSeparateExpPage, 0, 0)  # Add button to a grid

    #c) Treatment Condition (prospect)

    centerWidget(mainWidget=ui.prospectExpPage, subWidget=ui.prospectExpPanel)
    backgroundStackedWidget(ui.prospectExpPanel, "white")  # Background colour of main window
    ui.buttonNextProspectExpPage = QPushButton()  # Creation of 'Next' button
    ui.pushButtonsProspectExpGrid.addWidget(ui.buttonNextProspectExpPage, 0, 0)  # Add button to a grid

    #6) Centering the Demographics page and adding next button
    centerWidget(mainWidget = ui.demographicsPage, subWidget = ui.demographicsPanel)
    backgroundStackedWidget(ui.demographicsPanel, "white") #Background colour of main window
    ui.buttonNextDemographicsPage = QPushButton() #Creation of 'Next' buttons
    ui.pushButtonsDemographicsGrid.addWidget(ui.buttonNextDemographicsPage, 0, 0)

    #7) Centering the Individual Travel Behaviour page and adding next button
    centerWidget(mainWidget = ui.travelBehaviourPage, subWidget = ui.travelBehaviourPanel)
    backgroundStackedWidget(ui.travelBehaviourPanel, "white") #Background colour of main window
    ui.buttonNextTravelBehaviourPage = QPushButton() #Creation of 'Next' buttons
    ui.pushButtonsTravelBehaviourGrid.addWidget(ui.buttonNextTravelBehaviourPage,0,0)

    #8) Centering the Experiment Question page and adding next button
    centerWidget(mainWidget = ui.experimentDebriefPage, subWidget = ui.experimentDebriefPanel)
    backgroundStackedWidget(ui.experimentDebriefPanel, "white") #Background colour of main window
    ui.buttonNextExperimentDebriefPage = QPushButton(ui.experimentDebriefPanel) #Creation of 'Next' button
    ui.pushButtonsExperimentDebriefGrid.addWidget(ui.buttonNextExperimentDebriefPage,0,0)

    #9) Centering the Debrief Page and adding next button
    centerWidget(mainWidget = ui.debriefPage, subWidget = ui.debriefPanel)
    backgroundStackedWidget(ui.debriefPanel, "white") #Background colour of main window
    ui.buttonNextDebriefPage = QPushButton() #Creation of 'Next' button
    ui.pushButtonsDebriefGrid.addWidget(ui.buttonNextDebriefPage)
    # ui.buttonNextDebriefPage.setText("Finish Experiment")

def formatNextButtons(language):

    #This apply the function to format and locate the next button within the pages of the stackedWidget
    for button in [ui.buttonNextExperimenterScreenPage, ui.buttonNextSimulationExperimentDescriptionPage,ui.buttonNextConsent1Page,ui.buttonNextConsent2Page,
                   ui.buttonNextScenarioDescriptionPage, ui.buttonNextDemographicsPage,ui.buttonNextDebriefPage
        , ui.buttonNextDecisionExpDescriptionPage, ui.buttonNextDecisionSeparateExpPage,ui.buttonNextDecisionSeparateExpPage,
    ui.buttonNextTravelBehaviourPage, ui.buttonNextExperimentDebriefPage,ui.buttonNextDebriefPage]:
        nextButtonFormat(button,language = language, fontLetter = window.fontLetter, fontFactor = window.fontFactor, small = False)

    #This is for buttons added in a grid
    for buttonInGrid in [ui.buttonNextExperimenterScreenPage, ui.startJourneyButton,ui.nextJourneyButton,ui.buttonNextScenarioDescriptionPage
                         ,ui.buttonNextSimulationExperimentDescriptionPage
                         ,ui.buttonBackSimulationExperimentGeneralDescription,ui.buttonNextSimulationExperimentGeneralDescription
                         ,ui.buttonNextConsent1Page,ui.buttonNextConsent2Page, ui.buttonNextDecisionSeparateExpPage,ui.buttonNextProspectExpPage
                         ,ui.buttonNextDecisionExpDescriptionPage
                        , ui.buttonNextDemographicsPage,ui.buttonNextTravelBehaviourPage, ui.buttonNextExperimentDebriefPage
                        ,ui.buttonNextDebriefPage]:

        buttonInGrid.setFont(QFont(window.fontLetter, window.fontFactor * 19))
        buttonInGrid.setFixedHeight(ui.buttonNextConsent1Page.height())
        buttonInGrid.setFixedWidth(ui.buttonNextConsent1Page.width())
        buttonInGrid.setFocusPolicy(QtCore.Qt.NoFocus)

    createNextButtonsActions()

def setGridsFormat():

    # Grids with no spacing

    for grid in [ui.experimenterScreenTitleGrid, ui.experimenterScreenGrid, ui.consent1TitleGrid,ui.consent2TitleGrid, ui.simulationExpGeneralDescriptionTitleGrid
        ,ui.simulationExpGrid,ui.simulationExpDescriptionTitleGrid,ui.scenarioDescriptionTitleGrid
        ,ui.mapGrid,ui.simulationExpStatusGrid,ui.preferredJourneyGrid,ui.simulationExpChoiceProgressBarGrid
        ,ui.moreJourneysGrid,ui.pushButtonsDecisionSeparateExpGrid,ui.pushButtonsProspectExpGrid
                 , ui.preferredDescriptiveRouteGrid,ui.completedTripsGrid,ui.nextDescriptiveQuestionGrid
                 , ui.preferredProspectRouteGrid
                 , ui.altADecisionExpGrid,ui.altBDecisionExpGrid,ui.simulationExpStageGrid,ui.pushButtonsDebriefGrid
                 , ui.demographicsTitleGrid,ui.decisionExpDescriptionTitleGrid,ui.debriefTitleGrid,ui.debriefGrid
                 ,ui.prospectExpProgressBarGrid,ui.altADecisionExpTitleGrid,ui.altBDecisionExpTitleGrid
                 ,ui.altAProspectExpTitleGrid,ui.altAWaitingProspectExpGrid, ui.altATravelProspectExpGrid
                 , ui.altBProspectExpTitleGrid, ui.altBWaitingProspectExpGrid, ui.altBTravelProspectExpGrid
                 ,ui.consent1LogoGrid,ui.simulationExpChoiceStageGrid
                 , ui.decisionSeparateExpProgressBarGrid
                 , ui.travelBehaviourGrid, ui.travelBehaviourTitleGrid
                 , ui.experimentDebriefGrid, ui.experimentDebriefTitleGrid
                  , ui.debriefLogoGrid]:
        grid.setHorizontalSpacing(0)
        grid.setVerticalSpacing(0)
        # grid.setContentsMargins(1,1,1,1)# grid.setMargin(0)

    for lowMarginGrid in [ui.experimentDescriptionGrid,ui.consent1TextGrid,ui.experimentLongDescriptionGrid]:
        lowMarginGrid.setHorizontalSpacing(2.5)
        lowMarginGrid.setVerticalSpacing(2.5)
        lowMarginGrid.setContentsMargins(2.5, 2.5, 2.5, 2.5) # .setMargin(2.5)


    for midHorizontalSpacingGrid in [ui.experimentPicturesGrid
        ,ui.horizontalSliderConfirmationGrid
        ,ui.experiencedExperimentIdentificationSliderGrid,ui.journeyTimeImportanceSliderGrid
        ,ui.waitingTimeImportanceSliderGrid,ui.waitingTimeReliabilityImportanceSliderGrid
        ,ui.inVehicleTimeImportanceSliderGrid,ui.inVehicleTimeReliabilityImportanceSliderGrid
        ]:
        midHorizontalSpacingGrid.setHorizontalSpacing(20)
        midHorizontalSpacingGrid.setVerticalSpacing(0)

    for highMarginGrid in [ui.preferredDescriptiveJourneyClickableGrid, ui.preferredDescriptiveJourneyGrid]:
        # highMarginGrid.setHorizontalSpacing(250)
        # highMarginGrid.setMargin(15)

    #Grids for buttons
    # Buttons ligned in center
        for centerButtonGrid in [ui.pushButtonsSimulationExpGeneralDescriptionGrid
            ,ui.altADecisionExpGrid,ui.altBDecisionExpGrid]:
            centerButtonGrid.setAlignment(QtCore.Qt.AlignCenter)

    # Buttons aligned right
        for rightButtonGrid in [ui.pushButtonExperimenterScreenGrid, ui.pushButtonConsent1Grid, ui.pushButtonConsent2Grid,ui.pushButtonsScenarioDescriptionGrid
                                , ui.pushButtonsSimulationExpDescriptionGrid,ui.pushButtonsDecisionSeparateExpGrid
                                ,ui.pushButtonsProspectExpGrid,ui.pushButtonsDecisionExpDescriptionGrid
                                , ui.pushButtonsDemographicsGrid,ui.pushButtonsTravelBehaviourGrid
            ,ui.pushButtonsExperimentDebriefGrid, ui.pushButtonsDebriefGrid]:
            rightButtonGrid.setAlignment(QtCore.Qt.AlignRight)

def setFrameQLabels():
    for QLabel in [ui.preferredJourneyLbl,ui.moreJourneysLbl,ui.preferredDescriptiveRouteLbl, ui.preferredProspectRouteLbl
        ,ui.decisionPreferredJourneyPanel, ui.prospectPreferredJourneyPanel
        ,ui.nextDescriptiveQuestionLbl,ui.debriefLbl]:
        QLabel.setFrameShape(QFrame.Box)
        # UCLTheme(QLabel)

    #The panels are by default in lower
    for QLabel in [ui.experimenterScreenTextAndPicturesPanel, ui.pushButtonsSimulationExpChoicePanel
        ,ui.pushButtonsDecisionSeparateExpPanel,ui.nextButtonDecisionExpDescriptionPanel
        ,ui.Consent1BoxAndTextPanel, ui.consent2TextAndPicturesPanel
        ,ui.simulationExpDescriptionTextAndPicturesPanel, ui.simulationExpGeneralDescriptionTextAndPicturesPanel
        , ui.pushButtonsProspectExpPanel,ui.prospectProgressBarPanel, ui.prospectPreferredJourneyPanel
        , ui.pushButtonsSimulationExpChoicePanel,ui.nextButtonSimulationExpDescriptionPanel
        , ui.pushButtonsDemographicsPanel,ui.pushButtonsTravelBehaviourPanel,ui.pushButtonsExperimentDebriefPanel
        ,ui.pushButtonsDebriefPanel]:
        QLabel.lower()

def setLabelsUCLTheme():
    for QLabel in [ui.simulationExpStageLbl,ui.simulationExpRemainingDaysLbl,ui.completedTripsPanel,ui.prospectProgressBarPanel
        ,ui.decisionSeparateProgressBarPanel,ui.nDecisionExpLbl,ui.nProspectExpLbl, ui.simulationExpChoiceStageLbl
        ,ui.simulationExpChoiceStagePanel, ui.simulationExpDecisionProblemCounterLbl]:
        UCLTheme(QLabel)

def setBlackSpacingGrids():
    # Spacing grid between heading and body
    for blackSpacingGrid in [ui.experimenterScreenBlackSpacingGrid,ui.consent1BlackSpacingGrid,ui.consent2BlackSpacingGrid
        , ui.simulationExpDescriptionGridBlackSpacingGrid
        , ui.simulationExpGeneralDescriptionBlackSpacingGrid, ui.simulationExpPageBlackSpacingGrid
        , ui.simulationExpChoiceBlackSpacingGrid,ui.decisionExpDescriptionBlackSpacingGrid,ui.decisionExpBlackSpacingGrid
        , ui.debriefBlackSpacingGrid]:

        blackSpacingGrid.addWidget(QLabel(), 0, 0)
        ui.blackSpacingLbl = blackSpacingGrid.itemAtPosition(0, 0).widget()
        setBackgroundColorQLabel(QLabel=ui.blackSpacingLbl, colorString="black")

        blackSpacingGrid.setHorizontalSpacing(0)
        blackSpacingGrid.setVerticalSpacing(0)
        #blackSpacingGrid.setMargin(0)
        # blackSpacingGrid.setContentsMargins(0,0,0,0)

def createProgressBars():
    # Style Progress Bars
    window.styleProgressBar1 = "QProgressBar::chunk {""background-color: yellow;""}"
    window.styleProgressBar1 = window.styleProgressBar1 + "QProgressBar {""border: 1px solid grey;""border-radius: 2px;""text-align: center;""background: #eeeeee;""}"

    window.styleProgressBar2 = "QProgressBar::chunk {""background-color: yellow;""}"
    window.styleProgressBar2 = window.styleProgressBar2 + "QProgressBar {""border: 1px solid grey;""border-radius: 2px;""text-align: center;""background: #eeeeee;""}"

    window.styleProgressBar3 = "QProgressBar::chunk {""background-color: yellow;""}"
    window.styleProgressBar3 = window.styleProgressBar3 + "QProgressBar {""border: 1px solid grey;""border-radius: 2px;""text-align: center;""background: #eeeeee;""}"

    ui.progressBarCompletedTrips.setValue(0)
    ui.simulationExpChoiceProgressBar.setValue(0)
    ui.decisionSeparateExpProgressBar.setValue(0)
    ui.prospectExpProgressBar.setValue(0)

def updateInstruction(txtInstructions, experiment = None, folder = None):
    # paperBasedInstruction = "write down your decision below. You will draw a marble from your chosen urn straight afterwards." #Participants where instructed to write this, after they picked the marble
    # computerBasedInstruction = "in the following page, click one of the two alternatives and press 'Next.'" #This is the new instruction

    # Readtxt file with the generic instruction
    if folder is not None:
        fileInstruction = open("Descriptions/" +folder + "/" +txtInstructions, 'r', encoding='utf-8')
    else:
        fileInstruction = open("Descriptions/" + txtInstructions, 'r', encoding='utf-8')

    infoFileInstruction = fileInstruction.readlines()
    fileInstruction.close()


    #This are the fields updated in the generla instructions. At this point there are no experiments created yet.
    if experiment is not None:
        dictNewLabels = {'_nLearningTrials_': int(experiment.nLearningTrials)
                         # Equal to 30 pounds in the paper-based experiment
            , '_nLearningTrialsByRoute_': int(experiment.nLearningTrialsByRoute)
            , '_nConsequenceTrials_': int(experiment.nConsequenceTrials)
            , '_nExtraLearningTrials_': int(experiment.nExtraLearningTrials)
            , '_nExtraLearningTrialsPerRoute_': int(experiment.nExtraLearningTrials/2)
            , '_messageInstructionExperimentalCondition_': window.messageInstructionExperimentalCondition
            , '_buttonNextExperimentDescriptionPage_': str(ui.buttonNextSimulationExperimentDescriptionPage.text())
            , '_buttonNextSimulationExperimentDescriptionPage_': str(ui.buttonNextSimulationExperimentDescriptionPage.text())
            , '_buttonNextExperimentGeneralDescriptionPage_': str(ui.buttonNextSimulationExperimentGeneralDescription.text())
            , '_startJourneyButton_': str(ui.startJourneyButton.text())
            , '_nStages_': str(window.mainExperiment.nStages)
            , '_firstSliderLevel_': window.firstSliderLevel
            , '_lastSliderLevel_': window.lastSliderLevel
            , '_totalChoiceSets_': str(window.totalChoiceSets)
            , '_confirmationAlternatives_': str(getConfirmationAlternatives(all = False))
            , '_nConfirmationAlternatives_': str(getNConfirmationAlternatives())
            , '_nameNextStageExperiment_':str(window.nextStageName)
            , '_nameCurrentExperiment_':window.mainExperiment.getNameCurrentExperimentBlock(language = window.mainExperiment.languageCondition, short = False)
            , '_buttonBackSimulationExpChoicePage_':str(ui.buttonBackSimulationExpChoicePage.text())
            , '_buttonNextSimulationExpChoicePage_': str(ui.buttonNextSimulationExpChoicePage.text())
            , '_buttonNextDecisionSeparateExpPage_':str(ui.buttonNextDecisionSeparateExpPage.text())
            , '_buttonNextDecisionExpDescriptionPage_': str(ui.buttonNextDecisionExpDescriptionPage.text())
            , '_origin_': experiment.randomOrigin
            , '_destination_': experiment.randomDestination
            , '_nExperiment_': int(experiment.expType)
            , '_nChoiceSet_': int(experiment.id)
            , '_nCardinalChoiceSet_': getNumberToWord(number = int(experiment.id), language = window.mainExperiment.languageCondition, cardinal = True,capitalLetter = False)
            , '_nChoiceSetsTrainingBlock_': int(len(window.timeChoiceSetsBlock1))
            , '_nLearningTrials_': int(experiment.nLearningTrials)
            , '_nLearningTrialsPerRoute_': int(experiment.nLearningTrials/2)
            , '_nChoiceSets_': int(experiment.maxId)
            , '_nBlockDecisionProblem_': int(window.mainExperiment.nBlockDecisionProblem)
            , '_nCardinalBlockDecisionProblem_': getNumberToWord(number=int(window.mainExperiment.nBlockDecisionProblem),
                                                      language=window.mainExperiment.languageCondition, cardinal=True,
                                                      capitalLetter=False)
            , '_city_': window.city
            , '_buttonNextDebriefPage_':str(ui.buttonNextDebriefPage.text())



                         # ,
                         # '_prize_': self.prize #Equal to 30 pounds in the paper-based experiment
                         # ,'_colorPrize_':self.colorPrize #Blue in the paper-based experiment and with lowercase
                         # ,'_labelUrnA_':self.urnA.label
                         # ,'_labelUrnB_': self.urnB.label
                         # ,'_randomColor_':self.randomColor #Color of the marble selected to do the random allocation of balls (blue in the paper experiment)
                         # ,'_nRedNonRandomUrn_':self.nonRandomUrn().nRed
                         # ,'_nRedRandomUrn_':self.randomUrn().nRed
                         # ,'_nBlueNonRandomUrn_':self.nonRandomUrn().nBlue
                         # ,'_nBlueRandomUrn_':self.randomUrn().nBlue
                         # ,'_nMarbles_': self.nMarbles
                         # ,'_numberSequence_':self.numberSequence(self.nMarbles)
                         # ,'_labelRandomUrn_':self.randomUrn().label
                         # ,'_labelNonRandomUrn_':self.nonRandomUrn().label
                         # ,'_marblePickedInstruction_': computerBasedInstruction
                         }

    else:
        dictNewLabels = {
            '_nLearningTrials_': 1
            , '_buttonNextExperimentGeneralDescriptionPage_': str(ui.buttonNextSimulationExperimentGeneralDescription.text())
            , '_buttonNextSimulationExperimentDescriptionPage_': str(ui.buttonNextSimulationExperimentDescriptionPage.text())
            , '_buttonNextExperimentGeneralDescriptionPage_': str(ui.buttonNextSimulationExperimentGeneralDescription.text())
            , '_messageInstructionExperimentalCondition_': window.messageInstructionExperimentalCondition
            , '_totalChoiceSets_': str(window.totalChoiceSets)
            , '_firstSliderLevel_': window.firstSliderLevel
            , '_lastSliderLevel_': window.lastSliderLevel
            , '_nStages_': str(window.mainExperiment.nStages)
            ,'_city_': window.city

                         }

    instructions = ""
    lenInfoFileInstruction = len(infoFileInstruction)
    counterParagraph = 0
    for paragraph in infoFileInstruction:
        for label in dictNewLabels.keys():
            paragraph = paragraph.replace(str(label), str(dictNewLabels[label]))

        # if counterParagraph<len(infoFileInstruction)-1:
        #     instructions += paragraph+"\n"
        # else:
        instructions += paragraph

        counterParagraph += 1

    return instructions

def setBodyTextPage(grid,text, fontLetter,fontSize, fontFactor, fontIncreaseFactor = 1):

    if grid.itemAtPosition(0, 0) is None:

        title = QLabel()

        # title.setStyleSheet("color: white ; border: 1px solid  black ; background: black ;")
        # This need to be above the code for changing the background color
        # setLettersColorQLabel(QLabel=titleLbl, colorString = colorText)
        # setBackgroundColorQLabel(QLabel=title, colorString=colorBackground)

        grid.addWidget(title, 0, 0)
        titleLbl = grid.itemAtPosition(0, 0).widget()

        titleLbl.setText(text)
        titleLbl.setAlignment(QtCore.Qt.AlignTop|QtCore.Qt.AlignLeft)
        titleLbl.setFont(QFont(fontLetter, fontFactor * fontSize))

    else:
        grid.itemAtPosition(0, 0).widget().setText(text)


def setTitlePage(grid, text, fontLetter, fontFactor, capitalLetters, fontIncreaseFactor = 1, fontSize = window.fontSizeTitle, colorBackground = "black", colorText = "white", centered = False):

    #Remove any previous element from the grid

    # for i in range(grid.count()):
    #     element = grid.itemAt(i).widget() # ui.journeyClickableGrid is a grid with 4 grids.
    #     element.setVisible(False)

    if capitalLetters is True:
        text = text.upper()

    #Label for title of the page (Left side of the heading)

    # if text == "":
    #     title = QLabel()
    #     title.setStyleSheet("color: white ; border: 1px solid  black ; background: white ;")
    #     grid.addWidget(title, 0, 0)
    #
    # else:

    if grid.itemAtPosition(0, 0) is None:

        title = QLabel()

        title.setStyleSheet("color: white ; border: 1px solid  black ; background: black ;")
        # This need to be above the code for changing the background color
        # setLettersColorQLabel(QLabel=titleLbl, colorString = colorText)
        # setBackgroundColorQLabel(QLabel=title, colorString=colorBackground)

        grid.addWidget(title, 0, 0)
        titleLbl = grid.itemAtPosition(0, 0).widget()
        titleLbl.setWordWrap(True)

        titleLbl.setText(text)

        if centered == True:
            titleLbl.setAlignment(QtCore.Qt.AlignCenter)

        else:
            titleLbl.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignLeft)

        titleLbl.setFont(QFont(fontLetter, fontIncreaseFactor * fontFactor * fontSize,QFont.Bold))

    else:
        grid.itemAtPosition(0, 0).widget().setText(text)

#The heading does not include the thin grid behind the title
def setHeadingPage(grid, text, fontLetter, fontSize, fontFactor, capitalLetters, fontIncreaseFactor = 1, colorBackground = "black", colorText = "white", centered = False):
    setTitlePage(grid, text, fontLetter, fontFactor, capitalLetters, fontIncreaseFactor=1, colorBackground="black",
                 colorText="white", centered=False)

    titleLbl = grid.itemAtPosition(0, 0).widget()
    titleLbl.setAlignment(QtCore.Qt.AlignVCenter|QtCore.Qt.AlignLeft)
    titleLbl.setFont(QFont(fontLetter, fontIncreaseFactor * fontFactor * fontSize, QFont.Bold))



def setGraphicsExperiment():

    #GUI Creation for all pages
    createWidgetAndNextButtons()

    #Graphical Properties Windows.
    setBlackSpacingGrids()
    setFrameQLabels()
    setGridsFormat()
    setLabelsUCLTheme()

setGraphicsExperiment()

# ***************  (Page 0) Experimenter Screen Page *************************************** #

def minimumFieldsExperimenterScreenCompleted(participantName, participantId, computerId):
    allMinimumFieldsCompleted = None

    if participantName == "" or participantId == 0 or computerId == "":

        allMinimumFieldsCompleted = False

        if computerId == "":
            setBackgroundColorQLabel(QLabel=ui.experimenterScreenFormLayout1.itemAt(0, 0).widget(), colorString="red")

        else:
            setBackgroundColorQLabel(QLabel=ui.experimenterScreenFormLayout1.itemAt(0, 0).widget(), colorString="white")

        if participantId == 0:
            setBackgroundColorQLabel(QLabel=ui.experimenterScreenFormLayout1.itemAt(1, 0).widget(), colorString="red")

        else:
            setBackgroundColorQLabel(QLabel=ui.experimenterScreenFormLayout1.itemAt(1, 0).widget(), colorString="white")

        if participantName == "":
            setBackgroundColorQLabel(QLabel=ui.experimenterScreenFormLayout1.itemAt(2, 0).widget(), colorString="red")

        else:
            setBackgroundColorQLabel(QLabel=ui.experimenterScreenFormLayout1.itemAt(2, 0).widget(), colorString="white")

    else:
        allMinimumFieldsCompleted = True


    return allMinimumFieldsCompleted

def buttonNextExperimenterScreenClicked():

    computerId = ui.computerIdQLineEdit.text()
    participantId = ui.participantIdQSpinBox.value()
    participantName = ui.participantNameQLineEdit.text()
    participantLastName = ui.participantLastNameQLineEdit.text()
    languageCondition = ui.languageCBox.currentText().lower()
    experimentCountry = ui.countryCBox.currentText()
    fontFactor = ui.fontSizeQSpinBox.value()
    animationSpeedFactor = ui.animationSpeedQSpinBox.value()

    #Experimental Session
    experimentalSession = ui.experimentalSessionQLineEdit.text()

    #Experimental Conditions
    simulatedExperimentConditionCBox = ui.simulatedExperimentConditionCBox.currentText()
    simulatedExperimentCondition = ""

    if simulatedExperimentConditionCBox == "Control":
        simulatedExperimentCondition = "simulatedControlCondition"

    if simulatedExperimentConditionCBox == "Treatment":
        simulatedExperimentCondition = "simulatedTreatmentCondition1" #"simulatedTreatmentCondition2"(without timer)

    descriptiveExperimentConditionCBox = ui.descriptiveExperimentConditionCBox.currentText()
    descriptiveExperimentCondition = ""

    if descriptiveExperimentConditionCBox == "Control":
        descriptiveExperimentCondition = "descriptiveControl"

    if descriptiveExperimentConditionCBox == "Treatment":
        descriptiveExperimentCondition = "descriptiveTreatmentCondition1"

    descriptiveDays =ui.descriptiveDaysCBox.currentText()


    onlyDescriptiveTestingMode = None

    if ui.onlyDescriptiveExperimentCheckBox.checkState() == 2:
        onlyDescriptiveTestingMode = True
        window.firstPage = ui.decisionExpDescriptionPage

    else:
        onlyDescriptiveTestingMode = False
        window.firstPage = ui.consent1Page

    allConsentBoxesChecked = None

    if ui.allConsentCheckedExperimentCheckBox.checkState() == 2:
        allConsentBoxesChecked = True

    else:
        allConsentBoxesChecked = False

    fullScreen = None

    if ui.fullScreenCheckBox.checkState() == 2:
        fullScreen = True

    else:
        fullScreen = False

    trialsExperimentTrainingBlock= ui.trialsExperimentTrainingBlockCBox.currentText()
    trialsExperimentBlock1 = ui.trialsExperimentBlock1CBox.currentText()
    trialsExperimentBlock2 = ui.trialsExperimentBlock2CBox.currentText()

    experimentBreakMinutes = ui.experimentBreakSpinBox.value()
    experimentBreakIntervalSeconds = ui.experimentBreakIntervalSpinBox.value()

    minimumFieldsCompleted = minimumFieldsExperimenterScreenCompleted(participantName = participantName, participantId = participantId
                                             , computerId = computerId)

    # minimumFieldsCompleted = True

    if minimumFieldsCompleted is True:

        setupProgram(firstPage = window.firstPage, computerId = computerId,experimentCountry = experimentCountry
                     , participantId = participantId
                     , participantName = participantName
                     , participantLastName=participantLastName
                     , experimentalSession = experimentalSession
                     , animationSpeedFactor=animationSpeedFactor
                     , fontFactor=fontFactor
                     , languageCondition=languageCondition
                     , descriptiveExperimentCondition=descriptiveExperimentCondition
                     , simulatedExperimentCondition=simulatedExperimentCondition
                     , trialsExperimentTrainingBlock=trialsExperimentTrainingBlock
                     , trialsExperimentBlock1=trialsExperimentBlock1
                     , trialsExperimentBlock2=trialsExperimentBlock2
                     , experimentBreakMinutes=experimentBreakMinutes
                     , experimentBreakIntervalSeconds=experimentBreakIntervalSeconds
                     , onlyDescriptiveTestingMode=onlyDescriptiveTestingMode
                     , descriptiveDays=descriptiveDays
                     , allConsentBoxesChecked = allConsentBoxesChecked
                     , fullScreen = fullScreen)


        # setFirstPageProgram(firstPage = ui.demographicsPage)
        # setFirstPageProgram(firstPage = ui.experimentDebriefPage)
        #
        # setupTravelBehaviourPage(city="London")
        # window.currentParticipant.cityOfResidence = "London"
        # # Temporary Initial page in the experiment
        # setFirstPageProgram(firstPage = ui.travelBehaviourPage)

def resetFormatModeButtons():
    # Format Mode Buttons
    for modeButton in [ui.slowTestingModeButton, ui.realTestingUKModeButton, ui.realTestingChileModeButton, ui.descriptiveTestingModeButton
        , ui.fastTestingModeButton, ui.fastSpeedTestingModeButton, ui.minimumScenariosTestingModeButton
        ,ui.controlConditionButton,ui.treatmentConditionButton,ui.windowsFontSizeButton,ui.macFontSizeButton]:
        modeButton.setFont(QFont("Times", 15*window.fontFactor))

def setExperimenterScreenMode(mode):
    completed = False

def setDefaultTestingMode():
    realTestingUKModeButtonClicked()
    ui.realTestingUKModeButton.setFont(QFont("Times", 15*window.fontFactor))

def fastSpeedTestingModeButtonClicked():
    # setDefaultTestingMode()
    resetFormatModeButtons()
    controlConditionButtonClicked()
    ui.fastSpeedTestingModeButton.setFont(QFont("Times", 15*window.fontFactor, QFont.Bold))

    ui.animationSpeedQSpinBox.setValue(0.01)

def fastTestingModeButtonClicked():
    setDefaultTestingMode()
    minimumScenariosTestingModeButtonClicked()
    fastSpeedTestingModeButtonClicked()

    ui.participantIdQSpinBox.setValue(99)
    ui.participantNameQLineEdit.setText("Test")
    ui.participantLastNameQLineEdit.setText("Test")
    ui.experimentalSessionQLineEdit.setText("99")
    ui.experimentBreakSpinBox.setValue(0)
    ui.experimentBreakIntervalSpinBox.setValue(1)

    ui.allConsentCheckedExperimentCheckBox.setChecked(2)
    ui.computerIdQLineEdit.setText(str(99))
    ui.fontSizeQSpinBox.setValue(1.0)  # In Chile I used 0.8, but now we will use 0.75

    resetFormatModeButtons()
    ui.fastTestingModeButton.setFont(QFont("Times", 15*window.fontFactor, QFont.Bold))

def minimumScenariosTestingModeButtonClicked():
    setDefaultTestingMode()
    resetFormatModeButtons()
    ui.minimumScenariosTestingModeButton.setFont(QFont("Times", 15, QFont.Bold))

    ui.trialsExperimentTrainingBlockCBox.setCurrentIndex(0)
    ui.trialsExperimentBlock1CBox.setCurrentIndex(0)
    ui.trialsExperimentBlock2CBox.setCurrentIndex(0)

def realTestingUKModeButtonClicked():
    resetFormatModeButtons()
    ui.realTestingUKModeButton.setFont(QFont("Times", 15*window.fontFactor, QFont.Bold))
    ui.fontSizeQSpinBox.setValue(0.75) #In Chile I use 0.8
    ui.languageCBox.setCurrentIndex(2) #Spanish(1), English(2)
    ui.countryCBox.setCurrentIndex(2)  # Chile(1), UK(2)
    ui.animationSpeedQSpinBox.setValue(1)
    ui.experimentBreakIntervalSpinBox.setValue(10)
    ui.trialsExperimentTrainingBlockCBox.setCurrentIndex(ui.trialsExperimentTrainingBlockCBox.count()-1)
    ui.trialsExperimentBlock1CBox.setCurrentIndex(ui.trialsExperimentBlock1CBox.count() - 1)
    ui.trialsExperimentBlock2CBox.setCurrentIndex(ui.trialsExperimentBlock2CBox.count() - 1)
    ui.experimentBreakSpinBox.setValue(3)
    ui.onlyDescriptiveExperimentCheckBox.setCheckState(0)
    ui.fullScreenCheckBox.setCheckState(2)

def realTestingChileModeButtonClicked():
    resetFormatModeButtons()
    ui.realTestingChileModeButton.setFont(QFont("Times", 15*window.fontFactor, QFont.Bold))
    ui.fontSizeQSpinBox.setValue(0.75) #In Chile I use 0.8
    ui.languageCBox.setCurrentIndex(1) #Spanish(1), English(2)
    ui.countryCBox.setCurrentIndex(1)  # Chile(1), UK(2)
    ui.animationSpeedQSpinBox.setValue(1)
    ui.trialsExperimentTrainingBlockCBox.setCurrentIndex(ui.trialsExperimentTrainingBlockCBox.count()-1)
    ui.trialsExperimentBlock1CBox.setCurrentIndex(ui.trialsExperimentBlock1CBox.count() - 1)
    ui.trialsExperimentBlock2CBox.setCurrentIndex(ui.trialsExperimentBlock2CBox.count() - 1)
    ui.experimentBreakSpinBox.setValue(3)
    ui.experimentBreakIntervalSpinBox.setValue(10)
    ui.onlyDescriptiveExperimentCheckBox.setCheckState(0)
    ui.fullScreenCheckBox.setCheckState(2)

def descriptiveTestingModeButtonClicked():
    setDefaultTestingMode()
    resetFormatModeButtons()
    ui.descriptiveTestingModeButton.setFont(QFont("Times", 15*window.fontFactor, QFont.Bold))

    ui.onlyDescriptiveExperimentCheckBox.setCheckState(2)

def slowTestingModeButtonClicked():
    # setDefaultTestingMode()
    resetFormatModeButtons()
    ui.animationSpeedQSpinBox.setValue(1)
    ui.slowTestingModeButton.setFont(QFont("Times", 15*window.fontFactor, QFont.Bold))

def controlConditionButtonClicked():
    ui.simulatedExperimentConditionCBox.setCurrentIndex(1)
    ui.descriptiveExperimentConditionCBox.setCurrentIndex(1)

def treatmentConditionButtonClicked():
    ui.simulatedExperimentConditionCBox.setCurrentIndex(2)
    ui.descriptiveExperimentConditionCBox.setCurrentIndex(2)

def windowsFontSizeButtonClicked():
    ui.fontSizeQSpinBox.setValue(0.75)

def macFontSizeButtonClicked():
    ui.fontSizeQSpinBox.setValue(1)

def setupExperimenterScreenPage(language,version,fontFactor):

    window.fontFactor = fontFactor

    # Set the first page in the experiment
    ui.stackedWidget.setCurrentWidget(ui.experimenterScreenPage)

    #Title of the page


    #0) Experimenter Screen
    centerWidget(mainWidget = ui.experimenterScreenPage, subWidget = ui.experimenterScreenPanel)
    backgroundStackedWidget(ui.experimenterScreenPanel, "white") #Background colour of main window
    ui.buttonNextExperimenterScreenPage = QPushButton() #Creation of 'Next' buttons
    ui.pushButtonExperimenterScreenGrid.addWidget(ui.buttonNextExperimenterScreenPage,0,0) #Add button to a grid

    #Next Button Experimenter Screen:
    ui.buttonNextExperimenterScreenPage.clicked.connect(buttonNextExperimenterScreenClicked)

    ui.buttonNextExperimenterScreenPage.setFont(QFont("Times", fontFactor * 19))
    ui.buttonNextExperimenterScreenPage.setFixedWidth(100)
    ui.buttonNextExperimenterScreenPage.setFixedHeight(50)
    ui.buttonNextExperimenterScreenPage.setFocusPolicy(QtCore.Qt.NoFocus)

    ui.buttonNextExperimenterScreenPage.setText("Next")

    # Id for computer (Row 0)
    ui.computerIdQLineEdit = QLineEdit()
    ui.experimenterScreenFormLayout1.addRow("Computer ID", ui.computerIdQLineEdit)

    #Id for the participant (Row 1)
    ui.participantIdQSpinBox = QSpinBox()
    ui.experimenterScreenFormLayout1.addRow("Participant ID", ui.participantIdQSpinBox)

    #Name of the participant (Text Edit, Row 2...)
    ui.participantNameQLineEdit = QLineEdit()
    ui.experimenterScreenFormLayout1.addRow("Participant Name", ui.participantNameQLineEdit)

    #Given Name
    ui.participantLastNameQLineEdit = QLineEdit()
    ui.experimenterScreenFormLayout1.addRow("Participant Last Name", ui.participantLastNameQLineEdit)

    #Language Configuration (Combo box, (Row 2)
    ui.languageCBox = QComboBox()
    ui.languageCBox.addItems(["","spanish", "english"])
    ui.experimenterScreenFormLayout1.addRow("Language",ui.languageCBox)

    #Country
    ui.countryCBox = QComboBox()
    ui.countryCBox.addItems(["", "Chile", "UK"])
    ui.experimenterScreenFormLayout1.addRow("Country", ui.countryCBox)

    #Font Size Factor (SpinBox, Row 3)
    ui.fontSizeQSpinBox = QDoubleSpinBox()
    ui.fontSizeQSpinBox.setSingleStep(0.1)
    ui.fontSizeQSpinBox.setDecimals(2)
    ui.experimenterScreenFormLayout1.addRow("Font Size Factor", ui.fontSizeQSpinBox)

    #Animation Speed Factor (SpinBox, Row 4)
    ui.animationSpeedQSpinBox = QDoubleSpinBox()
    ui.animationSpeedQSpinBox.setSingleStep(0.01)
    ui.animationSpeedQSpinBox.setDecimals(2)
    ui.experimenterScreenFormLayout1.addRow("Animation Speed Factor", ui.animationSpeedQSpinBox)

    ui.allConsentCheckedExperimentCheckBox = QCheckBox()
    ui.experimenterScreenFormLayout1.addRow("All Consent Boxes Checked", ui.allConsentCheckedExperimentCheckBox)

    ui.fullScreenCheckBox = QCheckBox()
    ui.experimenterScreenFormLayout1.addRow("Full Screen", ui.fullScreenCheckBox)

    #Experimental Session

    ui.experimentalSessionQLineEdit = QLineEdit()
    ui.experimenterScreenFormLayout2.addRow("Experimental Session", ui.experimentalSessionQLineEdit)

    # # Experimental Condition (Control and Treatment, it is the same for the simulated and descriptive experiment)
    # Experimental
    # Condition

    #Experimental Condition in Simulated Experiment (ComboBox, Row 5)
    ui.simulatedExperimentConditionCBox = QComboBox()
    ui.simulatedExperimentConditionCBox.addItems([" ", "Control", "Treatment"])
    ui.simulatedExperimentConditionCBox.setEnabled(False)
    ui.simulatedExperimentConditionCBox.setCurrentIndex(0)
    ui.experimenterScreenFormLayout2.addRow("Simulated Experiment", ui.simulatedExperimentConditionCBox)

    # Experimental Condition in Descriptive Experiment (ComboBox, Row 6)
    ui.descriptiveExperimentConditionCBox = QComboBox()
    ui.descriptiveExperimentConditionCBox.addItems([" ", "Control", "Treatment"])
    ui.descriptiveExperimentConditionCBox.setEnabled(False)
    ui.descriptiveExperimentConditionCBox.setCurrentIndex(0)
    ui.experimenterScreenFormLayout2.addRow("Descriptive Experiment",ui.descriptiveExperimentConditionCBox)

    #Trials per block (ComboBox, Row 7-8-9)
    ui.trialsExperimentTrainingBlockCBox = QComboBox()
    ui.trialsExperimentTrainingBlockCBox.addItems(["1","2"])
    ui.experimenterScreenFormLayout2.addRow("Trials Training Block",
                                           ui.trialsExperimentTrainingBlockCBox)

    ui.trialsExperimentBlock1CBox = QComboBox()
    ui.trialsExperimentBlock1CBox.addItems(["1","2","3","4","5","6"])
    ui.experimenterScreenFormLayout2.addRow("Trials Block 1",
                                           ui.trialsExperimentBlock1CBox)

    ui.trialsExperimentBlock2CBox = QComboBox()
    ui.trialsExperimentBlock2CBox.addItems(["1","2","3","4","5","6"])
    ui.experimenterScreenFormLayout2.addRow("Trials Block 2",
                                           ui.trialsExperimentBlock2CBox)


    ui.descriptiveDaysCBox = QComboBox()
    ui.descriptiveDaysCBox.addItems(["2", "4", "6"])
    ui.experimenterScreenFormLayout2.addRow("Descriptive Days",
                                           ui.descriptiveDaysCBox)

    ui.onlyDescriptiveExperimentCheckBox = QCheckBox()
    ui.experimenterScreenFormLayout2.addRow("Only Descriptive",ui.onlyDescriptiveExperimentCheckBox)



    # ui.cBoxConsent.checkState() == 2
    #Duration of the experimental break
    ui.experimentBreakSpinBox = QSpinBox()
    ui.experimenterScreenFormLayout2.addRow("Break Duration (mins)",
                                           ui.experimentBreakSpinBox)

    #Interval to refresh the experiment break progress bar
    ui.experimentBreakIntervalSpinBox = QSpinBox()
    ui.experimenterScreenFormLayout2.addRow("Interval Update Break Bar (seconds)",
                                            ui.experimentBreakIntervalSpinBox)


    # ui.consent2FormLayout.addRow(QCheckBox(), tickLabel)

    #Events associated to testing modes
    ui.slowTestingModeButton.clicked.connect(slowTestingModeButtonClicked)
    ui.realTestingChileModeButton.clicked.connect(realTestingChileModeButtonClicked)
    ui.realTestingUKModeButton.clicked.connect(realTestingUKModeButtonClicked)
    ui.descriptiveTestingModeButton.clicked.connect(descriptiveTestingModeButtonClicked)
    ui.fastTestingModeButton.clicked.connect(fastTestingModeButtonClicked)
    ui.fastSpeedTestingModeButton.clicked.connect(fastSpeedTestingModeButtonClicked)
    ui.minimumScenariosTestingModeButton.clicked.connect(minimumScenariosTestingModeButtonClicked)
    ui.controlConditionButton.clicked.connect(controlConditionButtonClicked)
    ui.treatmentConditionButton.clicked.connect(treatmentConditionButtonClicked)
    ui.windowsFontSizeButton.clicked.connect(windowsFontSizeButtonClicked)
    ui.macFontSizeButton.clicked.connect(macFontSizeButtonClicked)

    resetFormatModeButtons()

    # #Modes (testing, experiment, descriptive)
    # ui.experimentModeCBox = QComboBox()
    # ui.experimentModeCBox.addItems(["","Real","Fast","Slow","Descriptive"])
    # ui.experimentModeCBox.setCurrentIndex(1)
    # ui.experimenterScreenFormLayout.addRow("Experimenter Mode", ui.experimentModeCBox)
    #
    setDefaultTestingMode()

    # setExperimenterScreenMode(mode = ui.experimentModeCBox.currentText())

    if language == "english":
        setTitlePage(grid=ui.experimenterScreenTitleGrid, text="Experiment Settings (Version " + str(version)+ ")"
                     ,capitalLetters = False, centered=False, fontFactor=1, fontLetter="Times")

    if language == "spanish":
        setTitlePage(grid=ui.experimenterScreenTitleGrid, text="Configuración del Experimento (Version "+ str(version)+ ")"
                     , capitalLetters=False, centered=False, fontFactor=1, fontLetter="Times")

setupExperimenterScreenPage(language = "english", version = "4.0",fontFactor = 0.75)


# ***************  (Page 1) Consent Page *************************************** #

# The text file "ConsentPage.html" contains the instruction of the consent page. This information can be changed in the txt file, and the program will automatically update the UI
# The following code lines read the information of the txt file to display it later in the consent page

#Function assigned to the 'next' button shown in the consent page ("consentPage")
def buttonNextConsent1Clicked():

    if ui.cBoxConsent.checkState()==2: #If the consent check box is checked

        # window.currrentParticipant = Participant(age=0, gender="None", educationLevel="None", country = "None")
        createSimulationExperiments(mainExperiment = window.mainExperiment, participant = window.mainExperiment.currentParticipant
                                    ,timeChoiceSetsBlock0 = window.timeChoiceSetsBlock0
                                    ,timeChoiceSetsBlock1 = window.timeChoiceSetsBlock1
                                    ,timeChoiceSetsBlock2 = window.timeChoiceSetsBlock2
                                    ,timeProspectSetsBlock3 = window.timeProspectSetsBlock3)

        currentExperiment = window.mainExperiment.currentExperiment

        ui.stackedWidget.setCurrentWidget(ui.consent2Page)
def buttonNextConsent2Clicked():

    currentExperiment = window.mainExperiment.currentExperiment
    folderSimulatedExperimentDescription = "SimulatedExperiment/GeneralDescription"

    allCheckedCheckBoxes = True

    # The following loop connects the Qlabels of each grid with the function that generate the trip
    for i in range(ui.consent2FormLayout.count()):
        elementGrid = ui.consent2FormLayout.itemAt(i).widget() # ui.journeyClickableGrid is a grid with 4 grids.

        if isinstance(elementGrid, QCheckBox):

            if elementGrid.isChecked() is not True:
                allCheckedCheckBoxes = False

    if allCheckedCheckBoxes == True:
        setupSimulationExpPage(experiment=currentExperiment)

        setupExperimentDescription(experiment=currentExperiment
                                   , grid=ui.simulationExpDescriptionGrid
                                   , folder=folderSimulatedExperimentDescription)
        ui.stackedWidget.setCurrentWidget(ui.simulationExpDescriptionPage)  # Go to next page




        # for j in range(subGrid.count()):
        #     clickableLabel = subGrid.itemAt(j).widget()
        #     if isinstance(clickableLabel, ClickableOptionIcon): #We do not have to include Qlabel objects (they were used to redistribute space among the grid)
        #         clickableLabel.clicked.connect(function)

    # setupExperimentGeneralDescription(page=1)
    # ui.stackedWidget.setCurrentWidget(ui.scenarioDescriptionPage)  # Go to next page

def setupConsent1Page():
    language = window.mainExperiment.languageCondition

    txtFile = ""
    folder = "Descriptions/Consent/"
    pathUCLLogo = folder + "UCL-logo-new.png"

    # Add UCL Logo in the heading of the page (Right side of the heading)
    ui.consent1LogoGrid.addWidget(QLabel(), 0, 0)
    ui.uclLogo = ui.consent1LogoGrid.itemAtPosition(0, 0).widget()
    pixMap = QtGui.QPixmap(pathUCLLogo)
    ui.uclLogo.setPixmap(pixMap)
    ui.uclLogo.setAlignment(QtCore.Qt.AlignRight)
    ui.uclLogo.setFrameShape(QFrame.Box)
    ui.uclLogo.setScaledContents(True)

    if language == "english":
        setTitlePage(grid=ui.consent1TitleGrid, text="Information Sheet for Participants in Research Studies"
                     ,capitalLetters = False, centered=False, fontFactor=window.fontFactor, fontLetter=window.fontLetter)
        # setBackgroundColorQLabel(QLabel = ui.consentTitleLbl, colorString="black")
        # setWhiteLettersQLabel(QLabel = ui.consentPageTitleLbl)

        txtFile = folder + "informationSheetENG.html"

    if language == "spanish":
        setTitlePage(grid=ui.consent1TitleGrid, text="Hoja Informativa para Participantes en Estudios de Investigación"
                     , centered=False, capitalLetters = False, fontFactor=window.fontFactor, fontLetter=window.fontLetter)
        # setTitlePage(qLabel=ui.consentPageTitleLbl, text="CONSENTIMIENTO")

        txtFile = folder + "informationSheetSPA.html"

    fileConsent = open(txtFile, 'r', encoding='utf-8')
    infoFileConsent = fileConsent.readlines()
    fileConsent.close()

    window.consent = ""
    for line in infoFileConsent:
        window.consent += line

    # The txt file contains the _N_ hat is replaced depending on the conditions defined by the users in the section "Experiment Paramaters"
    window.consent = window.consent.replace("_N_", str(len(window.waitingTimes)))

    # Create a Scroll Area Widget to add on it the QLabel that contains the text displayed in the consent page.
    ui.scrollConsent = QScrollArea()
    # ui.scrollConsent.setFrameShape(QFrame.Box)
    ui.scrollConsent.setFrameShape(QFrame.NoFrame)
    ui.lblConsent = QLabel()
    # ui.scrollConsent.setFont(QFont(window.fontLetter, window.fontFactor*16))

    # Format of the Qlabel widget that displays the text of experiment's consent page to the user

    # We add a Qlabel in the scroll area
    ui.scrollConsent.setWidget(ui.lblConsent)

    setBackgroundColorQLabel(ui.lblConsent, "white")
    ui.scrollConsent.setWidgetResizable(
        True)  # The advantage of the scroll area has the advantage of being resizable but if the text exceed the maximum height or width set in the following line, it displays a scrollbar
    # ui.scrollConsent.setFixedSize(ui.stackedWidget.width()*0.8,ui.stackedWidget.height()*0.8) #Set the size of the Scroll Area Widget to the hall of the size of the window

    # ui.lblConsent.setTextFormat(QtCore.Qt.RichText)
    ui.lblConsent.setWordWrap(True)
    ui.lblConsent.setAlignment(QtCore.Qt.AlignTop | QtCore.Qt.AlignLeft)
    ui.lblConsent.setFont(QFont(window.fontLetter, window.fontFactor * 18))
    ui.consent1TextGrid.addWidget(ui.scrollConsent, 0, 0)
    ui.lblConsent.setText(window.consent)

    # Consent Page checkbox

    ui.cBoxConsent = QCheckBox()  # Creation f Checkbox button

    # Format of the consentiment checkbox
    cBoxHeight = 30
    cBoxWidth = 400  # To show the entire text set in the following line

    consentMessage = ""
    if language == "english": consentMessage = "I agree to take part in the experiment"
    if language == "spanish": consentMessage = "Acepto participar en el experimento"

    ui.cBoxConsent.setText(consentMessage)  # The message added in the checkbox is located on the left of the checkbox

    #Format of the message

    ui.cBoxConsent.setFont(QFont(window.fontLetter, window.fontFactor * 16))

    # ui.cBoxConsent.setGeometry(ui.scrollConsent.x(),ui.scrollConsent.y()+ui.scrollConsent.height(),cBoxWidth,cBoxHeight) #Set the position just below the Scroll Area Widget

    ui.cBoxConsent1Grid.addWidget(ui.cBoxConsent, 0, 0)

    # Next Button

    if language == "english": ui.buttonNextConsent1Page.setText("Next")
    if language == "spanish": ui.buttonNextConsent1Page.setText("Siguiente")

    # if language == "english": ui.buttonNextConsent1Page.setText("Next Page")
    # if language == "spanish": ui.buttonNextConsent1Page.setText("Siguiente Página")

    ui.consent1TextGrid.setContentsMargins(1, 1, 1, 1)

# window.ticksConsent2FormLayout = None

def setupConsent2Page():

    language = window.mainExperiment.languageCondition

    txtFile = ""
    folder = "Descriptions/Consent/"

    if language == "english":
        setTitlePage(grid=ui.consent2TitleGrid, text="Informed Consent Form for Participants in Research Studies"
                     ,capitalLetters = False, centered=False, fontFactor=window.fontFactor, fontLetter=window.fontLetter)

        # Introductory paragraphs before showing the consent boxes

        setupExpGeneralDescriptionText(txtInstructions="informedConsentFormENG.html"
                                       , grid=ui.consent2TextGrid, folder="Consent", fontIncreaseFactor=1)

        # setupExpGeneralDescriptionText(txtInstructions="informedConsentFormBENG.html"
        #                                , grid=ui.consent2BTextGrid, folder="Consent", fontIncreaseFactor=1)

        # Next Button
        ui.buttonNextConsent2Page.setText("Continue")

    if language == "spanish":
        setTitlePage(grid=ui.consent2TitleGrid, text="Formulario de Consentimiento Informado para Participantes en Estudios de Investigación"
                     ,capitalLetters = False, centered=False, fontFactor=window.fontFactor, fontLetter=window.fontLetter)

        setupExpGeneralDescriptionText(txtInstructions="informedConsentFormSPA.html"
                                       , grid=ui.consent2TextGrid, folder="Consent", fontIncreaseFactor=1)

        # setupExpGeneralDescriptionText(txtInstructions="informedConsentFormBSPA.html"
        #                                , grid=ui.consent2BTextGrid, folder="Consent", fontIncreaseFactor=1)

        # Next Button
        ui.buttonNextConsent2Page.setText("Continuar")

    # ui.lblConsent.setWordWrap(True)
    # ui.lblConsent.setAlignment(QtCore.Qt.AlignTop | QtCore.Qt.AlignLeft)
    # ui.lblConsent.setFont(QFont(window.fontLetter, window.fontFactor * 18))


    #Checkboxes of the consent page
    ticksConsent2FormLabels = getTicksConsentForm(window.mainExperiment.languageCondition)
    nTick = 0

    for tick in ticksConsent2FormLabels:

        #Message consent ticks

        tickLabel = QLabel(tick)
        # tickLabel.setText(tickLabel.text().capitalize())
        tickLabel.setFont(QFont(window.fontLetter, window.fontFactor*16))

        # tickLabel.setSizePolicy(QSizePolicy.Maximum,QSizePolicy.Maximum)
        #
        tickLabel.setFixedWidth(600)
        tickLabel.setWordWrap(True)

        ui.consent2FormLayout.addRow(QCheckBox(), tickLabel)

        # ui.consent2TextGrid.itemAtPosition(nTick, 0).widget().setAlignment(QtCore.Qt.AlignRight)

        #Checkbox consent ticks
        # ui.consent2TextGrid.addWidget(QLabel(tick),nTick,1)
        # ui.consent2FormLayout.row.itemAt(nTick,1).widget().setWordWrap(True)
        # ui.consent2TextGrid.itemAtPosition(nTick, 1).setAlignment(QtCore.Qt.AlignLeft)
        # nTick +=1

    # ui.consent2FormLayout.setRowWrapPolicy(QFormLayout.WrapLongRows)
    # ui.consent2FormLayout.setFieldGrowthPolicy(QFormLayout.ExpandingFieldsGrow)


    # ui.consent2FormLayout.setVerticalSpacing(12)
    # ui.consent2FormLayout.setHorizontalSpacing(15)
    # ui.consent2FormLayout.setMargin(-10)
    ui.consent2TextGrid.setContentsMargins(1,1,1,1)

def setCheckBoxesConsentPagesClicked(boolean):

    if boolean == True:

        #Page 1: Consent
        ui.cBoxConsent.setCheckState(2)  # This will set the button unchecked at the beginning

        #Page 2: Consent
        for i in range(ui.consent2FormLayout.count()):
            elementGrid = ui.consent2FormLayout.itemAt(i).widget()  # ui.journeyClickableGrid is a grid with 4 grids.

            if isinstance(elementGrid, QCheckBox):
                elementGrid.setCheckState(2)

    else:
        completed = False

def setupConsentPage(allChecked):

    setupConsent1Page()
    setupConsent2Page()

    #We set up as default the checkbox clicked.
    setCheckBoxesConsentPagesClicked(boolean = allChecked)

# ***************  Experiment*************************************** #

# ***************  Experiment Description *************************************** #

# Main page describing the experiment

def buttonNextExpDescriptionPageClicked():

    #Now we show the simulation exp page for the first example
    ui.stackedWidget.setCurrentWidget(ui.simulationExpPage)


    # setupExperimentGeneralDescription(page=1)
    # ui.stackedWidget.setCurrentWidget(
    #     ui.simulationExpGeneralDescriptionPage)  # Stay in the same page but update information
    #

# The text file "ExperimentPage.html" contains the instruction of each experiment page. This information can be changed in the txt file, and the program will automatically update the UI

def setupExpGeneralDescriptionText(txtInstructions, grid, folder,fontIncreaseFactor = 1):

    # The txt file contains the _N_ hat is replaced depending on the conditions defined by the users in the section "Experiment Paramaters"
    generalDescription = updateInstruction(txtInstructions=txtInstructions, folder = folder)

    ui.scrollExperimentDescription = QScrollArea()

    ui.scrollExperimentDescription.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
    ui.scrollExperimentDescription.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
    ui.scrollExperimentDescription.setEnabled(False)
    # ui.scrollExperimentDescription.setFrameShape(QFrame.Box)
    ui.scrollExperimentDescription.setFrameShape(QFrame.NoFrame)
    ui.lblExperimentDescription = QLabel()
    ui.lblExperimentDescription.setFont(QFont(window.fontLetter, window.fontFactor*18*fontIncreaseFactor))


    #Format of the Qlabel widget that displays the text of experiment's description page to the user
    ui.lblExperimentDescription.setText(generalDescription)
    ui.lblExperimentDescription.setWordWrap(True)
    ui.lblExperimentDescription.setAlignment(QtCore.Qt.AlignTop|QtCore.Qt.AlignLeft)

    # #We add a Qlabel in the scroll area
    # ui.scrollExperimentDescription.setWidget(ui.lblExperimentDescription)
    # ui.scrollExperimentDescription.setWidgetResizable(True) #The advantage of the scroll area has the advantage of being resizable but if the text exceed the maximum height or width set in the following line, it displays a scrollbar
    # # ui.scrollExperimentDescription.setFixedSize(widgetPanel.width()*0.8,widgetPanel.height()*0.5) #Set the size of the Scroll Area Widget to the hall of the size of the window

    # grid.addWidget(ui.scrollExperimentDescription, 0, 0)
    grid.addWidget(ui.lblExperimentDescription, 0, 0)
    setBackgroundColorQLabel(ui.lblExperimentDescription, "white")

#The pictures will be discplayed by columns. Pictures will show a number with a label above and a picture below.
def setupExpGeneralDescriptionPictures(pathPicture, number, grid, larger = False):

    # grid = QtGui.QGridLayout(ui.simulationExpGeneralDescriptionPanel)
    # grid.addWidget(QLabel(),0,0)
    # grid.itemAtPosition(0, 0).widget().setText("AAA")


    row = 0
    column = number - 1
    #Title of picture
    grid.addWidget(QLabel(), row, column)
    pictureTitle = grid.itemAtPosition(row, column).widget()
    pictureTitle.setText(str(number))
    pictureTitle.setAlignment(QtCore.Qt.AlignCenter)
    pictureTitle.setFont(QFont(window.fontLetter, window.fontFactor * 18))
    pictureTitle.setFrameShape(QFrame.Box)

    #Picture

    picture = QLabel()
    if larger == True:
        completed = False
        # picture.setFixedWidth(400)
        # pictureTitle.setFixedWidth(400)

    grid.addWidget(picture,row+1, column)
    # picture = grid.itemAtPosition(row+1, column).widget()


    picture.setPixmap(QtGui.QPixmap(pathPicture))
    picture.setAlignment(QtCore.Qt.AlignCenter)
    picture.setFrameShape(QFrame.Box)
    picture.setScaledContents(True)
    # picture.setText("11231313")

def resetPicturesGrid(grid):

    for i in range(grid.count()):
        element = grid.itemAt(i).widget() # ui.journeyClickableGrid is a grid with 4 grids.
        elementText =element.text()
        if not elementText in ["1","2","3","4","5","6","7"]:
            element.setVisible(False)
        # element.widget().setText("")
        # grid.removeItem(element.widget())

        # for j in range(subGrid.count()):
            # clickableLabel = subGrid.itemAt(j).widget()
            # if isinstance(clickableLabel, ClickableOptionIcon):
            #     subGrid.itemAt(j).widget().resetBackgroundColor()
            #

def setupExperimentGeneralDescription(page):

    fontIncreaseFactor = 1 #This will change in some pages if the descirption will be shown bigger.

    #Labelling next buttons

    ui.buttonBackSimulationExperimentGeneralDescription.setVisible(False)

    if window.mainExperiment.languageCondition == "spanish":

        if window.nGeneralDescriptionPage == window.nGeneralDescriptionPage:
            # ui.buttonNextSimulationExperimentGeneralDescription.setText(
            #     "Ir a Página " + str(int(window.nGeneralDescriptionPage + 1)))

            ui.buttonNextSimulationExperimentGeneralDescription.setText("Siguiente")


        elif window.nGeneralDescriptionPage < window.nGeneralDescriptionPages:
            # ui.buttonNextSimulationExperimentGeneralDescription.setText("Ir a Página "+str(int(window.nGeneralDescriptionPage+1)))
            ui.buttonNextSimulationExperimentGeneralDescription.setText("Siguiente")

        else:
            if window.nGeneralDescriptionPage == window.nGeneralDescriptionPages:
                # ui.buttonNextSimulationExperimentGeneralDescription.setText("Empezar Entrenamiento")
                ui.buttonNextSimulationExperimentGeneralDescription.setText("Siguiente")

        # ui.buttonBackSimulationExperimentGeneralDescription.setText("Volver a Página " + str(int(window.nGeneralDescriptionPage-1)))

    if window.mainExperiment.languageCondition == "english":

        if window.nGeneralDescriptionPage == 1:
            # ui.buttonNextSimulationExperimentGeneralDescription.setText(
            #     "Ir a Página " + str(int(window.nGeneralDescriptionPage + 1)))

            ui.buttonNextSimulationExperimentGeneralDescription.setText("Next")

        if window.nGeneralDescriptionPage < window.nGeneralDescriptionPages:
            # ui.buttonNextSimulationExperimentGeneralDescription.setText("Go to Page "+str(int(window.nGeneralDescriptionPage+1)))
            ui.buttonNextSimulationExperimentGeneralDescription.setText(
                "Next")

        else:
            if window.nGeneralDescriptionPage == window.nGeneralDescriptionPages:
                ui.buttonNextSimulationExperimentGeneralDescription.setText("Next")

        # ui.buttonBackSimulationExperimentGeneralDescription.setText("Return to Page "+str(int(window.nGeneralDescriptionPage-1)))


    #Remove previous description added in the page
    resetPicturesGrid(grid=ui.experimentPicturesGrid)

    if ui.experimentLongDescriptionGrid.itemAtPosition(0, 0) is not None:
        ui.experimentLongDescriptionGrid.itemAtPosition(0, 0).widget().setVisible(False)
        ui.experimentLongDescriptionGrid.itemAtPosition(0, 0).widget().lower()

    if ui.experimentDescriptionGrid.itemAtPosition(0, 0) is not None:
        ui.experimentDescriptionGrid.itemAtPosition(0, 0).widget().setVisible(False)
        ui.experimentDescriptionGrid.itemAtPosition(0, 0).widget().lower()

    #Update description of the experiment's pages.


    if page == 1:
        fontIncreaseFactor = 1.5

        resetPicturesGrid(grid=ui.experimentPicturesGrid)
        # ui.buttonBackSimulationExperimentGeneralDescription.setVisible(True)

        # setBackgroundColorQLabel(QLabel = ui.buttonBackSimulationExperimentGeneralDescriptionPanel, colorString= "white")
        # ui.buttonBackSimulationExperimentGeneralDescriptionPanel.raise_()
        folderInstructions = "GeneralInstructions"
        if window.mainExperiment.languageCondition == "spanish":
            # setTitlePage(grid=ui.simulationExpGeneralDescriptionTitleGrid,
            #              text="Instrucciones Generales - Página " + str(int(page))
            #              , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

            setTitlePage(grid=ui.simulationExpGeneralDescriptionTitleGrid,
                         text="", capitalLetters=False
                         , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

            setupExpGeneralDescriptionText(txtInstructions="GeneralInstructionsPage1SPA.html"
                                           , grid=ui.experimentLongDescriptionGrid
                                           , folder=folderInstructions, fontIncreaseFactor=fontIncreaseFactor)

        if window.mainExperiment.languageCondition == "english":
            # setTitlePage(grid=ui.simulationExpGeneralDescriptionTitleGrid,
            #              text="General Instructions - Page " + str(int(page)),capitalLetters = False
            #              , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

            setTitlePage(grid=ui.simulationExpGeneralDescriptionTitleGrid,
                         text="", capitalLetters=False
                         , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

            setupExpGeneralDescriptionText(txtInstructions="GeneralInstructionsPage1ENG.html"
                                           , grid=ui.experimentLongDescriptionGrid
                                           , folder=folderInstructions, fontIncreaseFactor=fontIncreaseFactor)

        # ui.experimentLongDescriptionGrid.itemAtPosition(0, 0).widget().setVisible(True)
        # ui.experimentLongDescriptionGrid.itemAtPosition(0, 0).widget().raise_()

    if page == 2:

        fontIncreaseFactor = 1.2
        fontIncreaseFactorTitle = 0.9

        resetPicturesGrid(grid=ui.experimentPicturesGrid)
        ui.buttonBackSimulationExperimentGeneralDescription.setVisible(False)

        folderInstructions = "GeneralInstructions"

        if window.mainExperiment.languageCondition == "spanish":
            setTitlePage(grid=ui.simulationExpGeneralDescriptionTitleGrid
                         ,text="Como viste en el ejemplo anterior, un viaje en bus tendrá varias partes", capitalLetters = False
                         ,fontIncreaseFactor = fontIncreaseFactorTitle , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

            setupExpGeneralDescriptionText(txtInstructions="GeneralInstructionsPage2SPA.html"
                                           , grid=ui.experimentDescriptionGrid
                                           , folder=folderInstructions
                                           , fontIncreaseFactor=fontIncreaseFactor)

        if window.mainExperiment.languageCondition == "english":
            # setTitlePage(grid=ui.simulationExpGeneralDescriptionTitleGrid,
            #              text="General Instructions - Page " + str(int(page))
            #              , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

            setTitlePage(grid=ui.simulationExpGeneralDescriptionTitleGrid
                         , text="As you saw in the previous example, a bus trip will have several parts:",capitalLetters = False
                         , fontIncreaseFactor=fontIncreaseFactorTitle, fontFactor=window.fontFactor, fontLetter=window.fontLetter
                         )

            setupExpGeneralDescriptionText(txtInstructions="GeneralInstructionsPage2ENG.html"
                                           , grid=ui.experimentDescriptionGrid
                                           , folder="GeneralInstructions"
                                           , fontIncreaseFactor=fontIncreaseFactor)

        # ui.experimentDescriptionGrid.itemAtPosition(0, 0).widget().setVisible(True)
        # ui.experimentDescriptionGrid.itemAtPosition(0, 0).widget().raise_()


        folderPictures = "Pictures/tripStages/"

        pathPicture1 = "personWalkingBusStop.png"

        pathPicture2 = ""
        pathPicture3 = ""

        if window.simulatedExperimentCondition == "simulatedControlCondition":
            pathPicture2 = "waitingStopControl.png"
            pathPicture3 = "busArrivingStopControl.png"

        if window.simulatedExperimentCondition == "simulatedTreatmentCondition1":
            pathPicture2 = "waitingStopTreatment.png"
            pathPicture3 = "busArrivingStopTreatment.png"

        pathPicture4 = "busLoadingStop.png"
        pathPicture5 = "busTravelling.png"
        pathPicture6 = "passengerAlighting.png"
        pathPicture7 = "personWalkingDestination.png"  #Arrival to final bus stop

        pathPictures = [pathPicture1,pathPicture2,pathPicture3,pathPicture4,pathPicture5,pathPicture6,pathPicture7]
        counterPicture = 1
        for pathPicture in pathPictures:
            setupExpGeneralDescriptionPictures(pathPicture = folderPictures+pathPicture, number = counterPicture, grid=ui.experimentPicturesGrid)
            counterPicture += 1

    if page == 3:

        fontIncreaseFactor = 1.2

        resetPicturesGrid(grid=ui.experimentPicturesGrid)
        ui.experimentPicturesGrid.setEnabled(False)
        # ui.buttonBackSimulationExperimentGeneralDescription.setVisible(True)

        # setBackgroundColorQLabel(QLabel = ui.buttonBackSimulationExperimentGeneralDescriptionPanel, colorString= "white")
        # ui.buttonBackSimulationExperimentGeneralDescriptionPanel.raise_()
        folderInstructions = "GeneralInstructions"
        if window.mainExperiment.languageCondition == "spanish":
            # setTitlePage(grid=ui.simulationExpGeneralDescriptionTitleGrid,
            #              text="Instrucciones Generales - Página " + str(int(page))
            #              , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

            setTitlePage(grid=ui.simulationExpGeneralDescriptionTitleGrid,
                         text="Etapas de un Escenario de Eleccion de Ruta",capitalLetters = True
                         , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

            setupExpGeneralDescriptionText(txtInstructions="GeneralInstructionsPage3SPA.html"
                                           , grid=ui.experimentLongDescriptionGrid
                                           , folder=folderInstructions, fontIncreaseFactor = fontIncreaseFactor)


        if window.mainExperiment.languageCondition == "english":
            # setTitlePage(grid=ui.simulationExpGeneralDescriptionTitleGrid,
            #              text="General Instructions - Page " + str(int(page)),capitalLetters = False
            #              , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

            setTitlePage(grid=ui.simulationExpGeneralDescriptionTitleGrid,
                         text="Stages of a Route Choice Scenario",capitalLetters = True
                         , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

            setupExpGeneralDescriptionText(txtInstructions="GeneralInstructionsPage3ENG.html"
                                           , grid=ui.experimentLongDescriptionGrid
                                           , folder=folderInstructions, fontIncreaseFactor = fontIncreaseFactor)


        ui.experimentLongDescriptionGrid.itemAtPosition(0, 0).widget()
        # ui.experimentLongDescriptionGrid.itemAtPosition(0, 0).widget().raise_()

        # folderPictures = "Pictures/generalDescription1/"
        #
        # pathPicture1 = "transportationNetwork.png"
        # pathPicture2 = "stop.png"
        # pathPicture3 = "origin.png"
        # pathPicture4 = "destination.png"
        # pathPicture5 = "completedTripsPanel.png"
        # pathPicture6 = "routesPanel.png"
        # # pathPicture7 = "person.png"
        #
        # pathPictures = [pathPicture1, pathPicture2, pathPicture3, pathPicture4, pathPicture5, pathPicture6]
        # counterPicture = 1
        # for pathPicture in pathPictures:
        #
        #     larger = False
        #
        #     if pathPicture == "transportationNetwork.png":
        #         larger = True
        #
        #     setupExpGeneralDescriptionPictures(pathPicture=folderPictures + pathPicture, number=counterPicture,
        #                                        grid=ui.experimentPicturesGrid, larger=larger)
        #     counterPicture += 1

def setupExperimentDescription(experiment, grid, fontIncreaseFactor = 1, descriptive = False, folder = None):

    fontIncreaseFactor = fontIncreaseFactor #Fator to increase the size of the text shown in the description

    mainExperiment = window.mainExperiment

    #Next Buttons
    currentExperiment = window.mainExperiment.currentExperiment
    # if currentExperiment.simulationOrderId == 1:
    #     if window.mainExperiment.languageCondition == "spanish": ui.buttonNextSimulationExperimentDescriptionPage.setText("Empezar "+mainExperiment.getNameCurrentExperimentBlock("spanish"))
    #     if window.mainExperiment.languageCondition == "english": ui.buttonNextSimulationExperimentDescriptionPage.setText("Start "+ mainExperiment.getNameCurrentExperimentBlock("english"))

    if currentExperiment.expType == 0 and descriptive is not True:

        fontIncreaseFactor = 1.3

        if window.mainExperiment.languageCondition == "english":

            ui.buttonNextSimulationExperimentDescriptionPage.setText("Start Example")

            setTitlePage(grid=ui.simulationExpDescriptionTitleGrid
                         , text="Carefully read the instructions",capitalLetters = True
                         , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

            window.experimentDescription = updateInstruction(experiment=experiment,
                                                             txtInstructions="Experiment0DescriptionENG.html",
                                                             folder=folder)


        if window.mainExperiment.languageCondition == "spanish":

            ui.buttonNextSimulationExperimentDescriptionPage.setText("Empezar Ejemplo")

            setTitlePage(grid=ui.simulationExpDescriptionTitleGrid,capitalLetters = True
                         , text="Lee cuidadosamente las instrucciones"
                         , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

            window.experimentDescription = updateInstruction(experiment=experiment,
                                                             txtInstructions="Experiment0DescriptionSPA.html",
                                                             folder=folder)

    elif descriptive is not True: #Simulation Experiments
        # else:
        if window.mainExperiment.languageCondition == "spanish":
            ui.buttonNextSimulationExperimentDescriptionPage.setText("Comenzar "+ window.mainExperiment.getNameCurrentExperimentBlock(language = "spanish", short = True))
        if window.mainExperiment.languageCondition == "english":
            ui.buttonNextSimulationExperimentDescriptionPage.setText("Start " + window.mainExperiment.getNameCurrentExperimentBlock(language = "english", short = True))

        #The txt file contains the _N_ hat is replaced depending on the conditions defined by the users in the section "Experiment Paramaters"
        window.experimentDescription = ""

        if experiment.expType == 1:

            fontIncreaseFactor = 1.4

            # window.mainExperiment.nBlockDecisionProblem = window.mainExperiment.nDecisionProblem - 0
            window.mainExperiment.nBlockDecisionProblem = int(window.mainExperiment.nBlockDecisionProblem)

            if window.mainExperiment.languageCondition == "english":
                setTitlePage(grid=ui.simulationExpDescriptionTitleGrid, capitalLetters = True
                             , text=window.mainExperiment.getNameCurrentExperimentBlock(language = "english", short = False)
                             , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

                window.experimentDescription = updateInstruction(experiment=experiment, txtInstructions="Experiment1DescriptionENG.html",
                                                                 folder=folder)

            if window.mainExperiment.languageCondition == "spanish":
                setTitlePage(grid=ui.simulationExpDescriptionTitleGrid, capitalLetters = True
                             , text=window.mainExperiment.getNameCurrentExperimentBlock(language = "spanish", short = False)
                             , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

                window.experimentDescription = updateInstruction(experiment=experiment,
                                                                 txtInstructions="Experiment1DescriptionSPA.html",
                                                                 folder=folder)

        if experiment.expType == 2:

            fontIncreaseFactor = 1.4
            # window.mainExperiment.nBlockDecisionProblem = window.mainExperiment.nDecisionProblem-2
            window.mainExperiment.nBlockDecisionProblem = int(window.mainExperiment.nBlockDecisionProblem)

            if window.mainExperiment.languageCondition == "english":
                setTitlePage(grid=ui.simulationExpDescriptionTitleGrid, capitalLetters = True
                             ,text= window.mainExperiment.getNameCurrentExperimentBlock(language = "english", short = False)
                             , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

                window.experimentDescription = updateInstruction(experiment=experiment
                                                                 , txtInstructions="Experiment2DescriptionENG.html"
                                                                 , folder=folder)

            if window.mainExperiment.languageCondition == "spanish":
                setTitlePage(grid=ui.simulationExpDescriptionTitleGrid, capitalLetters = True
                             , text=window.mainExperiment.getNameCurrentExperimentBlock(language = "spanish", short = False)
                             , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

                window.experimentDescription = updateInstruction(experiment=experiment
                                                                 , txtInstructions="Experiment2DescriptionSPA.html"
                                                                 , folder=folder)

        if experiment.expType == 3:
            fontIncreaseFactor = 1.4
            # window.mainExperiment.nBlockDecisionProblem = window.mainExperiment.nDecisionProblem - 8
            window.mainExperiment.nBlockDecisionProblem = int(window.mainExperiment.nBlockDecisionProblem)

            if window.mainExperiment.languageCondition == "english":
                setTitlePage(grid=ui.simulationExpDescriptionTitleGrid, capitalLetters = True
                            , text= window.mainExperiment.getNameCurrentExperimentBlock(language = "english", short = False)
                             , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

                window.experimentDescription = updateInstruction(experiment=experiment,
                                                                 txtInstructions="Experiment3DescriptionENG.html",
                                                                 folder=folder)

            if window.mainExperiment.languageCondition == "spanish":
                setTitlePage(grid=ui.simulationExpDescriptionTitleGrid, capitalLetters = True
                             , text= window.mainExperiment.getNameCurrentExperimentBlock(language = "spanish", short = False)
                             , fontFactor=window.fontFactor, fontLetter=window.fontLetter)

                window.experimentDescription = updateInstruction(experiment=experiment,
                                                                 txtInstructions="Experiment3DescriptionSPA.html",
                                                                 folder=folder)

    if descriptive is True:

        fontIncreaseFactorTitle = 1

        # if window.mainExperiment.languageCondition  == "english":
        #
        #     setTitlePage(grid=ui.experimenterScreenTitleGrid
        #                  , text="Third Experiment Block",
        #                  capitalLetters=False
        #                  , fontIncreaseFactor=fontIncreaseFactorTitle, fontFactor=window.fontFactor,
        #                  fontLetter=window.fontLetter
        #                  )
        #
        # if window.mainExperiment.languageCondition == "spanish":
        #
        #     setTitlePage(grid=ui.experimenterScreenTitleGrid
        #                  , text="Tercer Bloque Experimental",
        #                  capitalLetters=False
        #                  , fontIncreaseFactor=fontIncreaseFactorTitle, fontFactor=window.fontFactor,
        #                  fontLetter=window.fontLetter
        #                  )

        if window.descriptiveExperimentCondition == "descriptiveControl":

            if window.mainExperiment.languageCondition == "english":
                window.experimentDescription = updateInstruction(
                    txtInstructions="DescriptiveExperimentDescriptionENG.html"
                    , experiment=window.mainExperiment.currentExperiment
                    , folder="DescriptiveExperiment/ProspectExp")

            if window.mainExperiment.languageCondition == "spanish":
                window.experimentDescription = updateInstruction(
                    txtInstructions="DescriptiveExperimentDescriptionSPA.html"
                    , experiment=window.mainExperiment.currentExperiment
                    , folder="DescriptiveExperiment/ProspectExp")

        if window.descriptiveExperimentCondition == "descriptiveTreatmentCondition1":

            if window.mainExperiment.languageCondition == "english":

                window.experimentDescription = updateInstruction(
                    txtInstructions="DescriptiveExperimentDescriptionENG.html"
                    , experiment=window.mainExperiment.currentExperiment
                    , folder=folder)

            if window.mainExperiment.languageCondition == "spanish":
                window.experimentDescription = updateInstruction(
                    txtInstructions="DescriptiveExperimentDescriptionSPA.html"
                    , experiment=window.mainExperiment.currentExperiment
                    , folder=folder)

    # if ui.scrollExperimentDescription is None:
    #
    #Create a Scroll Area Widget to add on it the QLabel that contains the text displayed in the description page.
    ui.scrollExperimentDescription = QScrollArea()
    ui.scrollExperimentDescription.setFrameShape(QFrame.Box)
    ui.scrollExperimentDescription.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
    ui.scrollExperimentDescription.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
    ui.scrollExperimentDescription.setEnabled(False)
    ui.scrollExperimentDescription.setFrameShape(QFrame.NoFrame)
    ui.scrollExperimentDescription.setStyleSheet("background-color:transparent;")

    ui.lblExperimentDescription = QLabel()
    ui.lblExperimentDescription.setFont(QFont(window.fontLetter, window.fontFactor*fontIncreaseFactor* 20))

    #Format of the Qlabel widget that displays the text of experiment's description page to the user
    ui.lblExperimentDescription.setText(window.experimentDescription)
    ui.lblExperimentDescription.setWordWrap(True)
    ui.lblExperimentDescription.setAlignment(QtCore.Qt.AlignTop|QtCore.Qt.AlignLeft)
    ui.lblExperimentDescription.setStyleSheet(
        "QLabel { background-color : transparent; color : black; }")  # Better to use style sheets

    #We add a Qlabel in the scroll area
    ui.scrollExperimentDescription.setWidget(ui.lblExperimentDescription)
    # setBackgroundColorQLabel(ui.lblExperimentDescription, "white")

    ui.scrollExperimentDescription.setWidgetResizable(True) #The advantage of the scroll area has the advantage of being resizable but if the text exceed the maximum height or width set in the following line, it displays a scrollbar
    # ui.scrollExperimentDescription.setFixedSize(ui.stackedWidget.width()*0.8,ui.stackedWidget.height()*0.8) #Set the size of the Scroll Area Widget to the hall of the size of the window

    if grid.itemAt(0) is None:
        grid.addWidget(ui.scrollExperimentDescription, 0, 1)
    # grid.replaceWidget(ui.scrollExperimentDescription)
    # grid.removeWidget(grid.itemAt(0).widget())

        # ui.lblExperimentDescription.setText(window.experimentDescription)
        # ui.scrollExperimentDescription.setWidget(ui.lblExperimentDescription)



    # ui.lblExperimentDescription.setContentsMargins(100,100,100,100)

#Function assigned to the 'next' button shown in the experiment general description page ("simulationExpDescriptionPage")

window.nGeneralDescriptionPage = 2
window.nGeneralDescriptionPages = 3

def buttonNextSimulationExperimentGeneralDescriptionClicked():

    lastExperimentGeneralDescriptionPage = None

    currentExperiment = window.mainExperiment.currentExperiment

    if  window.nGeneralDescriptionPage == 3:
        lastExperimentGeneralDescriptionPage = True

    window.nGeneralDescriptionPage += 1

    folderSimulatedExperimentDescription = "SimulatedExperiment/GeneralDescription"

    if lastExperimentGeneralDescriptionPage:

        setupSimulationExpPage(experiment=currentExperiment)

        setupExperimentDescription(experiment=currentExperiment
                                   , grid = ui.simulationExpDescriptionGrid
                                   , folder = folderSimulatedExperimentDescription)


        ui.stackedWidget.setCurrentWidget(ui.simulationExpDescriptionPage) #Go to next page

    else:
        setupExperimentGeneralDescription(page=window.nGeneralDescriptionPage)
        ui.stackedWidget.setCurrentWidget(ui.simulationExpGeneralDescriptionPage)  #Stay in the same page but update information

def buttonBackSimulationExperimentGeneralDescriptionClicked():
    window.nGeneralDescriptionPage -= 1
    setupExperimentGeneralDescription(page=window.nGeneralDescriptionPage)
    ui.stackedWidget.setCurrentWidget(ui.simulationExpGeneralDescriptionPage)

def buttonNextScenarioDescriptionPageClicked():
    if window.experimentBreak is False:
        ui.stackedWidget.setCurrentWidget(ui.simulationExpPage)  # Go to next page

    else:
        window.experimentBreak = False
        # finishCurrentExperiment() #This line was added by error in the experiment in Chile. As a result the second experimental block start with scenario 2
        ui.stackedWidget.setCurrentWidget(ui.simulationExpDescriptionPage)

def setupScenarioDescriptionPage():

    #Progress bar for the brake is not visible
    ui.accumulatedTimeBrakeProgressBar.setVisible(False)

    #Title
    setTitlePage(grid = ui.scenarioDescriptionTitleGrid, capitalLetters=False
                 , text="", fontFactor=window.fontFactor, fontLetter=window.fontLetter)

    #Body
    ui.scenarioDescriptionGrid.addWidget(QLabel(),0,0)
    ui.scenarioDescriptionLbl = ui.scenarioDescriptionGrid.itemAtPosition(0, 0).widget()
    ui.scenarioDescriptionLbl.setAlignment(QtCore.Qt.AlignVCenter | QtCore.Qt.AlignHCenter)
    ui.scenarioDescriptionLbl.setFont(QFont(window.fontLetter, window.fontFactor * 40, QFont.Bold))

    if window.mainExperiment.languageCondition == "english":
        ui.scenarioDescriptionLbl.setText(window.mainExperiment.getNameCurrentExperimentBlock(
            language="english", short=False) + " - Scenario " + str(window.mainExperiment.nBlockDecisionProblem))

        #Text next button
        ui.buttonNextScenarioDescriptionPage.setText("Start Scenario " + str(window.mainExperiment.nBlockDecisionProblem))

    if window.mainExperiment.languageCondition == "spanish":

        ui.scenarioDescriptionLbl.setText(window.mainExperiment.getNameCurrentExperimentBlock(
            language="spanish", short=False) + " - Escenario " + str(window.mainExperiment.nBlockDecisionProblem))

        # Text next button
        ui.buttonNextScenarioDescriptionPage.setText(
            "Empezar Escenario " + str(window.mainExperiment.nBlockDecisionProblem))

    #Setup the simulation page
    setupSimulationExpPage(experiment=window.mainExperiment.currentExperiment)

def setupBrakeDescriptionPage(text):
    # setupScenarioDescriptionPage()
    ui.scenarioDescriptionLbl.setText(text)



#Function assigned to the 'next' button shown in the experiment description page ("simulationExpDescriptionPage")
def buttonNextExperimentDescriptionClicked():

    if window.mainExperiment.currentExperiment.expType == 0:
        setupSimulationExpPage(experiment = window.mainExperiment.currentExperiment)
        ui.stackedWidget.setCurrentWidget(ui.simulationExpPage)  # Go to next page

    else:
        setupScenarioDescriptionPage()
        ui.stackedWidget.setCurrentWidget(ui.scenarioDescriptionPage)  # Go to next page

# Update Labels of the Simulation Experiment Page
def updateSimulationExpTitlePage(expType, trial, direction, color):

    nTrial = trial.nTrial
    nTrials = trial.nTrials

    #Day and color of the route
    color = str(color.capitalize())
    colorRoute = ""

    if window.mainExperiment.languageCondition == "english":
        colorRoute = color+ " Route"
        # ui.simulationExpDayLbl.setText("Day " + str(nTrial) + "/" + str(nTrials) + " (" + colorRoute + ")")

        # ui.simulationExpDayLbl.setText("Trip No. " + str(nTrial) + " (" + colorRoute +")")
        ui.simulationExpRemainingDaysLbl.setText("Completed trips: " + str(nTrial-1) +" out of " + str(trial.nTrials))

    if window.mainExperiment.languageCondition == "spanish":
        if color == "Red":
            colorRoute = "Ruta Roja"

        if color == "Blue":
            colorRoute = "Ruta Azul"

        # ui.simulationExpDayLbl.setText("Viaje Nº" + str(nTrial) + ": " + colorRoute)
        ui.simulationExpRemainingDaysLbl.setText("Viajes completados: " + str(nTrial-1) +" de " + str(trial.nTrials))

    # Progress bar completed trips
    progress = ""

    progress = round(100*(nTrial-1)/nTrials,1)
    ui.progressBarCompletedTrips.setValue(progress)

    #Style progress bar
    ui.progressBarCompletedTrips.setStyleSheet(window.styleProgressBar1)

    for label in [ui.simulationExpRemainingDaysLbl]:
        label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignBottom)
        label.setFont(QFont(window.fontLetter, window.fontFactor*18,QFont.Bold))
    # ui.simulationExpDayLbl.setText("Experiment "+ str(expType) +". "+"Day " + str(nTrial)+"/"+str(nLearningTrials))
    # ui.simulationExpDayLbl.setText("Day " + str(nTrial)+"/"+str(nLearningTrials)+" (" + str(direction)+ ")")

    # ui.simulationExpStageLbl.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
    ui.simulationExpStageLbl.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignBottom)
    ui.simulationExpStageLbl.setFont(QFont(window.fontLetter, window.fontFactor * 22,QFont.Bold))



    #Stage Title


    expStage = ""
    currentExperiment = window.mainExperiment.currentExperiment
    if window.mainExperiment.languageCondition == "english":
        expStage = window.mainExperiment.getNameCurrentExperimentStage("english")
        ui.simulationExpStageLbl.setText("Scenario " + str(window.mainExperiment.nBlockDecisionProblem) + " - " + expStage)

    if window.mainExperiment.languageCondition == "spanish":
        expStage = window.mainExperiment.getNameCurrentExperimentStage("spanish")
        ui.simulationExpStageLbl.setText(("Escenario " + str(window.mainExperiment.nBlockDecisionProblem) + " - " + expStage))

    # ui.simulationExpTitleLbl.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
    # ui.simulationExpTitleLbl.setFont(QFont(window.fontLetter, window.fontFactor * 18,QFont.Bold))

    ui.simulationExpDecisionProblemCounterLbl.setFont(QFont(window.fontLetter, window.fontFactor*18,QFont.Bold))
    ui.simulationExpDecisionProblemCounterLbl.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignBottom)

    #Progress Bars
    # progress = round((window.mainExperiment.nDecisionProblem-1) / window.mainExperiment.currentExperiment.maxId * 100, 1)
    # ui.simulationExpProgressBar.setValue(progress)


        #Status
    # ui.simulationExpStatusTitleLbl.setText("Status: ")
    # ui.simulationExpStatusTitleLbl.setAlignment(QtCore.Qt.AlignLeft)

    ui.simulationExpStatusLbl.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
    ui.simulationExpStatusLbl.setFont(QFont(window.fontLetter, window.fontFactor*22, QFont.Bold ))

    # ui.simulationExpStatusLbl.setFont(QFont(window.fontLetter, window.fontFactor*22, QFont.Bold))

    startJourneyButtonName = ui.startJourneyButton.text()

    if window.mainExperiment.languageCondition == "english":
        updateStatusSimulationExpPage(status = "Please click " + startJourneyButtonName+ " to watch a journey in the "+colorRoute
                                      , statusLbl = ui.simulationExpStatusLbl, mainExperiment = window.mainExperiment)

    else:
        updateStatusSimulationExpPage(status="Por favor haz click en " + startJourneyButtonName+ " para ver un viaje en la " + colorRoute
                                      ,statusLbl=ui.simulationExpStatusLbl, mainExperiment = window.mainExperiment)

#Before going to the choice page, this method is activated from the animation class in the last trial animation
def lastUpdateLearningPhase(mainExperiment, statusLbl):

    currentTrial = mainExperiment.currentExperiment.currentTrial
        # ui.simulationExpDayLbl.setVisible(False)

    #Update message next button

    # stageNumber =  str(mainExperiment.getNumberCurrentExperimentStage())
    # stageName = str(mainExperiment.getNameCurrentExperimentStage(language = mainExperiment.languageCondition,short=True))

    nextStageNumber = window.mainExperiment.getNumberCurrentExperimentStage() + 1
    nextStageId = str(window.mainExperiment.getIdExperimentStage(number=nextStageNumber))
    nextStageName = mainExperiment.getNameExperimentStage(experimentStage=nextStageId, short=True
                                                          , language=mainExperiment.languageCondition)

    if mainExperiment.currentExperiment.expType == 0:
        if mainExperiment.languageCondition == "spanish":
            # ui.nextJourneyButton.setText("Siguiente Página")
            ui.nextJourneyButton.setText("Siguiente")

        if mainExperiment.languageCondition == "english":
            # ui.nextJourneyButton.setText("Next Page")
            ui.nextJourneyButton.setText("Next")


    elif mainExperiment.isCurrentExperimentStage("consequences") == True:
        if mainExperiment.languageCondition == "spanish":
            ui.nextJourneyButton.setText("Ir a Etapa "+ str(nextStageNumber) + " ("+nextStageName+")")

        if mainExperiment.languageCondition == "english":
            ui.nextJourneyButton.setText("Go to Stage "+str(nextStageNumber) + " ("+nextStageName+")")


    elif mainExperiment.isCurrentExperimentStage("confirmation") == True:
        if mainExperiment.languageCondition == "spanish":
            ui.nextJourneyButton.setText("Siguiente Escenario")

        if mainExperiment.languageCondition == "english":
            ui.nextJourneyButton.setText("Next Scenario")

    else:
        if mainExperiment.languageCondition == "spanish":
            ui.nextJourneyButton.setText("Ir a Etapa " +str(nextStageNumber)  + " ("+nextStageName+")")

        if mainExperiment.languageCondition == "english":
            ui.nextJourneyButton.setText("Go to Stage "+str(nextStageNumber) + " ("+nextStageName+")")

    ui.progressBarCompletedTrips.setValue(100)


    nextButtonLabel = ui.nextJourneyButton.text()

    if mainExperiment.languageCondition == "spanish":
        updateStatusSimulationExpPage(status="Por favor presiona "+ nextButtonLabel + " para ir a la próxima pantalla",
                                      statusLbl=statusLbl, mainExperiment=mainExperiment)

        ui.simulationExpRemainingDaysLbl.setText(
            "Viajes completados: " + str(currentTrial.nTrial) + " de "+str(currentTrial.nTrials))
        # ui.simulationExpDayLbl.setVisible(False)

    if mainExperiment.languageCondition == "english":
        updateStatusSimulationExpPage(status="Please click " + nextButtonLabel +" to go to the next screen ",
                                      statusLbl=statusLbl, mainExperiment=mainExperiment)

        ui.simulationExpRemainingDaysLbl.setText(
            "Completed trips: " + str(currentTrial.nTrial) +" out of "+str(currentTrial.nTrials))

def blockStartJourneyPanel(boolean):

    if boolean == True:
        # The panels where with the buttons to select the journey are blocked
        ui.startJourneyPanel.raise_()

    else:
        # The panels where with the buttons to select the journey are unblocked
        ui.startJourneyPanel.lower()

def blockJourneyPanel(boolean):
    if boolean == True:
        # The panels where with the buttons to select the journey are blocked
        ui.journeyPanel.raise_()
    else:
        # The panels where with the buttons to select the journey are unblocked
        ui.journeyPanel.lower()

def resetColorLocations():
    window.westLocation.icon.setBackgroundColor(color="white")
    window.eastLocation.icon.setBackgroundColor(color="white")

def resetColorButtonsJourneyPanel(grid):
    for i in range(grid.count()):
        subGrid = grid.itemAt(i) # ui.journeyClickableGrid is a grid with 4 grids.
        for j in range(subGrid.count()):
            clickableLabel = subGrid.itemAt(j).widget()
            if isinstance(clickableLabel, ClickableOptionIcon):
                subGrid.itemAt(j).widget().resetBackgroundColor()

def setupSimulationExpPage(experiment):

    # revealBusTerminals(reveal=False)
    # revealBusPositions(reveal=False)

    # temp = mainExperiment.currentExperiment.currentTrial.treatmentColor

    #Virtual Network Initialization
    # createVehicles()

    # Set Bus Colours
    setColoursBusIcons()

    # ui.simulationExpDayLbl.setVisible(True)

    #Set colours of the panel to choose between the two bus routes
    setColoursButtonJourneyPanel()

    updateLocationIcons()

    #Progres Bar
    ui.progressBarCompletedTrips.setValue(0)

    creationPreferredJourneyPanel(grid=ui.preferredJourneyClickableGrid, function=preferredJourneySelection)

    resetColorButtonsJourneyPanel(grid=ui.journeyClickableGrid)

    #Start Button
    ui.startJourneyButton.setFont(QFont(window.fontLetter, window.fontFactor * 18))

    if window.mainExperiment.languageCondition == "english":
        ui.startJourneyButton.setText("Travel")

    if window.mainExperiment.languageCondition == "spanish":
        ui.startJourneyButton.setText("Viajar")


    #Next button
    ui.nextJourneyButton.setFont(QFont(window.fontLetter, window.fontFactor * 18))


    if window.learningMode == "free":
        # Unblocked the panels with options to start a new Journey
        blockStartJourneyPanel(False)
        blockJourneyPanel(False)

    else: #Free Learning is false

        blockJourneyPanel(True)
        window.tripDirection = Direction(id=experiment.currentTrial.direction)

        if window.tripDirection.id == "counterclockwise":
            ui.directionCounterclockwiseSelectedIcon.manualClick()

        else:
            ui.directionClockwiseSelectedIcon.manualClick()


        if window.mainExperiment.currentExperiment.randomOrigin == "west":
            # window.person.icon.setPicture(window.person.icons["westToEast"].path)
            window.person.icon.setPicture(window.person.icons["westToEast"].path)
            window.person.addIcon(icon = window.person.icons["westToEast"], id = "walking")

            window.westLocation.icon.setBackgroundColor(color="yellow")
            window.eastLocation.icon.setBackgroundColor(color="white")

        if window.mainExperiment.currentExperiment.randomOrigin == "east":
            # window.person.icon.setPicture(window.person.icons["eastToWest"].path)
            window.person.icon.setPicture(window.person.icons["eastToWest"].path)
            window.person.addIcon(icon = window.person.icons["eastToWest"], id = "walking")
            window.eastLocation.icon.setBackgroundColor(color="yellow")
            window.westLocation.icon.setBackgroundColor(color="white")


    updateSimulationExpTitlePage(expType=experiment.expType
                                 , trial=experiment.currentTrial
                                 , direction=experiment.currentTrial.direction
                                 , color=experiment.currentTrial.colorRouteSelected
                                 )

    if experiment.expType == 0:
        setupSimulationExp0Page(experiment)


    if experiment.expType == 1:
        setupSimulationExp1Page(experiment)

    if experiment.expType == 2:
        setupSimulationExp2Page(experiment)

    if experiment.expType == 3:
        setupSimulationExp3Page(experiment)

def setupSimulationExp0Page(experiment):

    mainExperiment = window.mainExperiment
    fontIncrease = 0.9

    if mainExperiment.languageCondition == "english":
        setTitlePage(grid = ui.simulationExpGrid,text = "An example of a trip is shown below. Please follow the instructions in the panel"
                     ,capitalLetters = False , fontLetter =mainExperiment.fontLetter, fontFactor = mainExperiment.fontFactor*fontIncrease)

    if mainExperiment.languageCondition == "spanish":
        setTitlePage(grid = ui.simulationExpGrid,text = "Un ejemplo de un viaje es mostrado abajo. Por favor sigue las instrucciones mostradas en el panel"
                     ,capitalLetters = False, fontLetter=mainExperiment.fontLetter, fontFactor=mainExperiment.fontFactor*fontIncrease)

    if window.mainExperiment.getCurrentExperimentStage() == "learning":
        ui.simulationExpStatusLbl.setVisible(True)

    if window.mainExperiment.getCurrentExperimentStage() == "consequences":
        ui.simulationExpStatusLbl.setVisible(False)


    # #Additional Instructions
    #
    # ui.simulationExpInstructionsGrid.addWidget(QLabel(), 0, 0)
    # titleLbl = ui.simulationExpInstructionsGrid.itemAtPosition(0, 0).widget()
    #
    # titleLbl.setText("Como ves...")

def setupSimulationExp1Page(experiment):

    if window.mainExperiment.getCurrentExperimentStage() == "learning":
        ui.simulationExpGrid.itemAtPosition(0, 0).widget().setVisible(False)  # Hide the upper panel
        ui.simulationExpGrid.itemAtPosition(0, 0).widget().lower()
        ui.simulationExpStatusLbl.setVisible(False)

    if window.mainExperiment.getCurrentExperimentStage() == "consequences":
        ui.simulationExpGrid.itemAtPosition(0, 0).widget().setVisible(True)  # Show the upper panel
        ui.simulationExpGrid.itemAtPosition(0, 0).widget().raise_()

        ui.simulationExpStatusLbl.setVisible(False)

def setupSimulationExp2Page(experiment):

    if window.mainExperiment.getCurrentExperimentStage() == "learning":
        ui.simulationExpGrid.itemAtPosition(0, 0).widget().setVisible(False)  # Hide the upper panel
        ui.simulationExpGrid.itemAtPosition(0, 0).widget().lower()
        ui.simulationExpStatusLbl.setVisible(False)

    if window.mainExperiment.getCurrentExperimentStage() == "consequences":
        ui.simulationExpGrid.itemAtPosition(0, 0).widget().setVisible(True)  # Show the upper panel
        ui.simulationExpGrid.itemAtPosition(0, 0).widget().raise_()

        ui.simulationExpStatusLbl.setVisible(False)

def remainingTimeBreak():
    # window.remainingSecondsBrake-=1
    window.accumulatedSeconds += window.experimentBreakIntervalSeconds
    window.totalSecondsBrake = window.experimentBreakMinutes*60

    # remainingTime = window.remainingSecondsBrake
    # ui.scenarioDescriptionLbl.setText(str(remainingTime))
    # setupBrakeDescriptionPage(remainingTime)

    if window.totalSecondsBrake == 0:
        percentageAccumulatedSecondsBrake = 100

    else:
        percentageAccumulatedSecondsBrake = round(window.accumulatedSeconds/window.totalSecondsBrake*100,0)

    ui.accumulatedTimeBrakeProgressBar.setValue(percentageAccumulatedSecondsBrake)

    if percentageAccumulatedSecondsBrake == 100:
        ui.buttonNextScenarioDescriptionPage.setVisible(True)
        ui.remainingTimeBreakTimer.stop()

ui.remainingTimeBreakTimer = QTimer()
ui.remainingTimeBreakTimer.timeout.connect(remainingTimeBreak)

def setupExperimentBreakPage():

    window.remainingSecondsBrake = window.experimentBreakMinutes * 60
    window.accumulatedSeconds = 0

    #Style and initial values of the progress bar
    ui.accumulatedTimeBrakeProgressBar.setVisible(True)
    ui.accumulatedTimeBrakeProgressBar.setValue(0)
    ui.accumulatedTimeBrakeProgressBar.setStyleSheet(window.styleProgressBar1)

    # ui.scenarioDescriptionGrid.itemAtPosition(0, 0).widget().setText()

    #Format of the text shown in the break page

    ui.scenarioDescriptionLbl.setWordWrap(True)
    ui.scenarioDescriptionLbl.setFont(QFont(window.fontLetter, window.fontFactor * 30,QFont.Bold))
    currentExperimentBlock = ""

    #The button to continue with the next page is initially not visible
    ui.buttonNextScenarioDescriptionPage.setVisible(False)

    if window.mainExperiment.languageCondition == "spanish":

        ui.buttonNextScenarioDescriptionPage.setText("Continuar")

        currentExperimentBlock = window.mainExperiment.getNameCurrentExperimentBlock(language = "spanish", short = False)

        # setTitlePage(grid=ui.simulationExpGrid,
        #              text="Por favor toma un descanso de " + str(window.experimentBreakMinutes)
        #                   + " minutos antes de continuar con el " + currentExperimentBlock
        #              , capitalLetters=False, fontLetter=window.mainExperiment.fontLetter,
        #              fontFactor=window.mainExperiment.fontFactor, fontIncreaseFactor=1)

        brakeTextDescription = "Por favor toma un descanso de " + str(window.experimentBreakMinutes)\
                               + " minutos antes de continuar con el " + currentExperimentBlock

    if window.mainExperiment.languageCondition == "english":

        ui.buttonNextScenarioDescriptionPage.setText("Continue")

        currentExperimentBlock = window.mainExperiment.getNameCurrentExperimentBlock(language="english", short=False)

        # setTitlePage(grid=ui.scenarioDescriptionTitleGrid,
        #              text="Please take a break of minutes before continue with the " + currentExperimentBlock
        #              , capitalLetters=False, fontLetter=window.mainExperiment.fontLetter,
        #              fontFactor=window.mainExperiment.fontFactor, fontIncreaseFactor=1)


        brakeTextDescription = "Please take a break of "+ str(window.experimentBreakMinutes)+ " minutes. " \
                               "\nOnce the progress bar is completed, you will be able to continue with the " + currentExperimentBlock



    #Instructions about the brake in the heading of the page
    setHeadingPage(grid=ui.scenarioDescriptionTitleGrid,
                 text= brakeTextDescription, fontSize = 22
                 , capitalLetters=False, fontLetter=window.mainExperiment.fontLetter,
                 fontFactor=window.mainExperiment.fontFactor, fontIncreaseFactor=1)

    #In the body of the page, there is not text, a progress bar is instead.
    setupBrakeDescriptionPage("")

    timerInterval = 1000 #1000 miliseconds
    # window.brakeTimerIntervalSeconds = 10
    ui.remainingTimeBreakTimer.start(window.experimentBreakIntervalSeconds*timerInterval) #(each 10 seconds)

def setupSimulationExp3Page(experiment):

    if window.mainExperiment.getCurrentExperimentStage() == "learning":
        ui.simulationExpGrid.itemAtPosition(0, 0).widget().setVisible(False)  # Hide the upper panel
        ui.simulationExpGrid.itemAtPosition(0, 0).widget().lower()
        ui.simulationExpStatusLbl.setVisible(False)

    if window.mainExperiment.getCurrentExperimentStage() == "consequences":
        ui.simulationExpGrid.itemAtPosition(0, 0).widget().setVisible(True)  # Show the upper panel
        ui.simulationExpGrid.itemAtPosition(0, 0).widget().raise_()

        ui.simulationExpStatusLbl.setVisible(False)

def getConfirmationAlternatives(all):

    try:
        if ui.horizontalSliderConfirmationPage is not None:

            dictLevels = ui.horizontalSliderConfirmationPage.getAlternatives(all)

            counter = 0
            stringLevels = ""

            for key in dictLevels.keys():
                counter += 1

                if counter > 1:
                    stringLevels += ", "

                stringLevels += str(key)+": " + dictLevels[key]


            return stringLevels

    except:
        return ""

def getNConfirmationAlternatives():
    try:
        if ui.horizontalSliderConfirmationPage is not None:

            return int(len(ui.horizontalSliderConfirmationPage.getAlternatives().keys()))
    except:
        return ""

window.sliderLevels = {}
window.lastSliderLevel = {}
window.firstSliderLevel = {}

def setupConfirmationPage():

    # Information of buttons

    # Show the part of the panel with the progress bar
    showProgressBarExpChoicePage(True)
    # ui.moreJourneysLbl.setVisible(False)


    ui.moreJourneysLbl.setVisible(False)

    # Click the same directions chosen in the decision part of the experiment.

    if window.mainExperiment.currentExperiment.preferredJourney == "counterclockwise":
        ui.counterclockwiseJourneyPreferred.manualClick()

    else:
        ui.clockwiseJourneyPreferred.manualClick()



    #We block the panel to choose between routes

    ui.preferredDirectionPanel.raise_()

    #We remove the map picture and place a slider and its title instead
    ui.mapGrid.itemAtPosition(0,0).widget().clear()



    #Levels of the slider

    sliderTitle = "" #Title of the slider (Certainty Level - Nivel de Certeza)

    if window.mainExperiment.languageCondition == "spanish":
        # sliderLevels = {1: "No estoy segura (1)", 2: "No lo sé",3: "Estoy segura (2)"}
        window.sliderLevels = {1: "Completamente\ninsegura(o) \n(Nivel de Certeza: 0%)", 2: "Completamente segura(o) \n(Nivel de Certeza: 100%)"}
        window.allSliderLevels = {1: "Completamente\ninsegura(o) \n(0%)",2:"",3:"Completamente segura(o) \n(100%)"} #This is what is shown in the slider
        sliderTitle = "Nivel de certeza"

    if window.mainExperiment.languageCondition == "english":
        # sliderLevels = {1: "I am not sure (1)",2: "I do not know (2)", 3: "I am sure (3)"}
        window.sliderLevels = {1: "Completely uncertain \n(Certainty Level: 0%)", 2: "Completely certain \n(Certainty Level: 100%)"}
        window.allSliderLevels = {1: "Completely\nuncertain\n(0%)", 2:"", 3: "Completely\ncertain\n(100%)"}  #This is what is shown in the slider
        sliderTitle = "Certainty Level"

    window.lastSliderLevel = window.sliderLevels[len(window.sliderLevels.keys())]
    window.firstSliderLevel = window.sliderLevels[1]


    #Create slider
    if window.mainExperiment.currentExperiment.simulationAbsoluteOrderId == 1:
        #Slider Bar
        ui.horizontalSliderConfirmationPage = mySliderBar(sliderTitle = sliderTitle, allLevels = window.allSliderLevels
                                                          , levels = window.sliderLevels, language = window.mainExperiment.languageCondition
                                                         , discreteRange = False, sliderGrid = ui.certaintyLevelConfirmationGrid
                                                          ,fontSize = 18, fontLetter = window.fontLetter, fontFactor = window.fontFactor)

        ui.horizontalSliderConfirmationPage.setStyleSheet1()
        ui.horizontalSliderConfirmationGrid.addWidget(ui.horizontalSliderConfirmationPage,0,0)


    #We show the horizontal slider after creating it
    ui.horizontalSliderConfirmationGrid.itemAtPosition(0, 0).widget().setVisible(True)
    #Title of the slider showing the certainty level
    ui.certaintyLevelConfirmationGrid.itemAtPosition(0, 0).widget().setVisible(True)
    #Default value for the certainty level
    ui.horizontalSliderConfirmationPage.setSliderValue(ui.horizontalSliderConfirmationPage.max)



    # Information Text Labels
    folderSimulatedExperimentConsequences ="SimulatedExperiment/Confirmation"

    if window.mainExperiment.languageCondition == "spanish":
        ui.buttonNextSimulationExpChoicePage.setText("Terminar Escenario " + str(int(window.mainExperiment.currentExperiment.simulationOrderId)))

        confirmationJourneyInstructions1 = updateInstruction(
            experiment=window.mainExperiment.currentExperiment
            , txtInstructions="confirmJourneyInstructions1SPA.html"
            ,folder = folderSimulatedExperimentConsequences)

        confirmationJourneyInstructions2 = updateInstruction(
            experiment=window.mainExperiment.currentExperiment
            , txtInstructions="confirmJourneyInstructions2SPA.html"
            , folder=folderSimulatedExperimentConsequences)

    if window.mainExperiment.languageCondition == "english":
        ui.buttonNextSimulationExpChoicePage.setText("Finish Scenario " + str(int(window.mainExperiment.currentExperiment.simulationOrderId)))

        confirmationJourneyInstructions1 = updateInstruction(
            experiment=window.mainExperiment.currentExperiment
            , txtInstructions="confirmJourneyInstructions1ENG.html"
            , folder=folderSimulatedExperimentConsequences)

        confirmationJourneyInstructions2 = updateInstruction(
            experiment=window.mainExperiment.currentExperiment
            , txtInstructions="confirmJourneyInstructions2ENG.html"
            , folder = folderSimulatedExperimentConsequences)

    ui.preferredJourneyLbl.setText(confirmationJourneyInstructions1)
    ui.moreJourneysLbl.setText(confirmationJourneyInstructions2)

def setupSimulationExpChoicePage():

    # We hide the horizontal slider bar (but it needs to have been created before)
    if window.mainExperiment.currentExperiment.simulationAbsoluteOrderId > 1:
        ui.horizontalSliderConfirmationGrid.itemAtPosition(0, 0).widget().setVisible(False)

    #Map Picture
    # Preferred Journey Option Panel Initialization
    creationPreferredJourneyPanel(grid=ui.preferredJourneyClickableGrid, function=preferredJourneySelection)
    connectButtonsGridPanel(grid=ui.preferredJourneyClickableGrid, function=preferredJourneySelection)
    setColoursButtonPreferredJourneyPanel()

    #Progress Ba
    progress = round((window.mainExperiment.nBlockDecisionProblem) / window.mainExperiment.currentExperiment.maxId * 100, 1)
    ui.simulationExpChoiceProgressBar.setValue(progress)
    ui.simulationExpChoiceProgressBar.setStyleSheet(window.styleProgressBar2)

    #Decision Scenario and Part

    currentExperiment = window.mainExperiment.currentExperiment
    if window.mainExperiment.languageCondition == "english":

        stage = window.mainExperiment.getNameCurrentExperimentStage("english")
        expTag = expTag =  window.mainExperiment.getNameCurrentExperimentBlock(language = "english", short = False)

        ui.simulationExpDecisionProblemCounterLbl.setText(
            ("Completed Scenarios: " + str(int(window.mainExperiment.nBlockDecisionProblem)) + " out of " + str(
                window.mainExperiment.currentExperiment.maxId))+" ("+expTag+")")

        # ui.simulationExpTitleLbl.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
        # ui.simulationExpTitleLbl.setFont(QFont(window.fontLetter, window.fontFactor * 18))

        ui.simulationExpChoiceStageLbl.setText("Scenario "+ str(window.mainExperiment.nBlockDecisionProblem) +" - "+ stage)

    if window.mainExperiment.languageCondition == "spanish":

        stage = window.mainExperiment.getNameCurrentExperimentStage("spanish")
        expTag =  window.mainExperiment.getNameCurrentExperimentBlock(language = "spanish", short = False)

        ui.simulationExpDecisionProblemCounterLbl.setText(
            ("Escenarios Completados: " + str(window.mainExperiment.nBlockDecisionProblem) + " de " + str(
                window.mainExperiment.currentExperiment.maxId)+" ("+expTag+")"))

        # ui.simulationExpTitleLbl.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
        # ui.simulationExpTitleLbl.setFont(QFont(window.fontLetter, window.fontFactor * 18))

        ui.simulationExpChoiceStageLbl.setText("Escenario "+ str(window.mainExperiment.nBlockDecisionProblem) +" - "+ stage)

    #Format Next and Buttons

    ui.simulationExpChoiceStageLbl.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignBottom)
    ui.simulationExpChoiceStageLbl.setFont(QFont(window.fontLetter, window.fontFactor * 22,QFont.Bold))

    #Format of the Qlabels widget that displays the text of experiment's description page to the user

    for label in [ui.preferredJourneyLbl,ui.moreJourneysLbl]:
        label.setWordWrap(True)
        # label.setAlignment(QtCore.Qt.AlignBottom)
        label.setAlignment(QtCore.Qt.AlignCenter)
        label.setFont(QFont(window.fontLetter, window.fontFactor*18))

    #Adding map to help people to remember the routes

    ui.preferredDirectionPanel.lower()

    ui.mapGrid.addWidget(QLabel(),0,0)
    mapSimulationPicture = ui.mapGrid.itemAtPosition(0, 0).widget()
    mapSimulationPicture.setFrameShape(QFrame.Box)
    # setBackgroundColorQLabel(QLabel =mapSimulationPicture,colorString = "white")
    mapSimulationPicture.raise_()

    #We hide the title of the slider

    if ui.certaintyLevelConfirmationGrid.itemAtPosition(0,0) is not None:
        ui.certaintyLevelConfirmationGrid.itemAtPosition(0,0).widget().setVisible(False)

    currentExperiment = window.mainExperiment.currentExperiment
    cardinalDirectionBlueRoute = currentExperiment.getCardinalDirection(color="blue", origin = currentExperiment.randomOrigin)
    cardinalDirectionRedRoute = currentExperiment.getCardinalDirection(color="red", origin = currentExperiment.randomOrigin)

    if currentExperiment.randomOrigin == "west" and cardinalDirectionBlueRoute == "north":
        mapSimulationPicture.setPixmap(QtGui.QPixmap("Pictures/mapGrid/directionClockwiseOriginWestBlueNorth.png"))

    elif currentExperiment.randomOrigin == "west" and cardinalDirectionBlueRoute == "south":
        mapSimulationPicture.setPixmap(QtGui.QPixmap("Pictures/mapGrid/directionClockwiseOriginWestRedNorth.png"))

    elif currentExperiment.randomOrigin == "east" and cardinalDirectionBlueRoute == "north":
        mapSimulationPicture.setPixmap(QtGui.QPixmap("Pictures/mapGrid/directionCounterclockwiseOriginEastBlueNorth.png"))

    elif currentExperiment.randomOrigin == "east" and cardinalDirectionBlueRoute == "south":
        mapSimulationPicture.setPixmap(QtGui.QPixmap("Pictures/mapGrid/directionCounterclockwiseOriginEastRedNorth.png"))

    mapSimulationPicture.setAlignment(QtCore.Qt.AlignCenter)
    mapSimulationPicture.setScaledContents(True)

    if window.mainExperiment.isCurrentExperimentStage("decision") == True:

        #Information of the buttons

        ui.buttonBackSimulationExpChoicePage.setVisible(True)
        ui.moreJourneysLbl.setVisible(True)

        #Hide the part of the panel with the progress bar
        showProgressBarExpChoicePage(False)

        #Add the title of the label

        mainExperiment = window.mainExperiment
        currentStageNumber = mainExperiment.getNumberCurrentExperimentStage()

        previousStageNumber = mainExperiment.getNumberCurrentExperimentStage()-1
        previousStageId = str(mainExperiment.getIdExperimentStage(number = previousStageNumber))
        previousStageName = mainExperiment.getNameExperimentStage(experimentStage = previousStageId, short = True
                                                                  , language = mainExperiment.languageCondition)

        nextStageNumber = window.mainExperiment.getNumberCurrentExperimentStage() + 1
        nextStageId = str(window.mainExperiment.getIdExperimentStage(number=nextStageNumber))
        nextStageName = mainExperiment.getNameExperimentStage(experimentStage = nextStageId, short = True
                                                              , language=mainExperiment.languageCondition)

        window.nextStageName = nextStageName

        if window.mainExperiment.languageCondition == "spanish":
            ui.buttonBackSimulationExpChoicePage.setText("Volver a Etapa "+str(previousStageNumber) + " ("+str(previousStageName)+")")
            ui.buttonNextSimulationExpChoicePage.setText("Ir a Etapa "+str(nextStageNumber) + " ("+ str(nextStageName)+")")

        if window.mainExperiment.languageCondition == "english":
            ui.buttonBackSimulationExpChoicePage.setText("Return to Stage "+str(previousStageNumber) + " ("+str(previousStageName)+")")
            ui.buttonNextSimulationExpChoicePage.setText("Go to Stage "+str(nextStageNumber) + " ("+str(nextStageName)+")")

        # Infromation of the text panels (this need to be after the change in the buttons

        folderSimulatedExperimentDecision = "SimulatedExperiment/Decision"

        if window.mainExperiment.languageCondition == "spanish":
            preferredJourneyInstructions = updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions="preferredJourneyInstructionsSPA.html"
                , folder=folderSimulatedExperimentDecision)

            moreJourneysInstructions = updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions="consequencesInstructionsSPA.html"
                , folder=folderSimulatedExperimentDecision)

        if window.mainExperiment.languageCondition == "english":
            preferredJourneyInstructions = updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions="preferredJourneyInstructionsENG.html"
                , folder=folderSimulatedExperimentDecision)

            moreJourneysInstructions = updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions="consequencesInstructionsENG.html"
                , folder=folderSimulatedExperimentDecision)

        ui.preferredJourneyLbl.setText(preferredJourneyInstructions)

        ui.moreJourneysLbl.setText(moreJourneysInstructions)

    if window.mainExperiment.isCurrentExperimentStage("confirmation") == True:

        setupConfirmationPage()

    for button in[ui.buttonBackSimulationExpChoicePage,ui.buttonNextSimulationExpChoicePage]:
        button.setFont(QFont(window.fontLetter, window.fontFactor * 18))
        button.setFixedWidth(ui.startJourneyButton.width())
        button.setFixedHeight(ui.startJourneyButton.height())
        button.setFocusPolicy(QtCore.Qt.NoFocus)

    mainExperiment = window.mainExperiment
    preferredJourneyInstructions = ""
    moreJourneysInstructions = ""

def showProgressBarExpChoicePage(boolean):
    if boolean == True:
        ui.buttonBackSimulationExpChoicePage.setVisible(False)
        ui.simulationExpChoiceProgressBarPanel.lower()
        ui.simulationExpChoiceProgressBarPanel.setAutoFillBackground(False)
        ui.simulationExpChoiceProgressBarPanel.setFrameStyle(QFrame.Box)

        ui.simulationExpChoiceStagePanel.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignBottom)

        ui.simulationExpChoiceStagePanel.setText("")
        ui.simulationExpChoiceStagePanel.lower()
        ui.simulationExpChoiceStageLbl.setVisible(True)
        ui.simulationExpChoiceStageLbl.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignBottom)

    else:
        ui.simulationExpChoiceProgressBarPanel.raise_()
        setBackgroundColorQLabel(QLabel=ui.simulationExpChoiceProgressBarPanel, colorString="white")
        ui.simulationExpChoiceProgressBarPanel.setFrameStyle(QFrame.NoFrame)
        ui.simulationExpChoiceStagePanel.raise_()

        ui.simulationExpChoiceStageLbl.setVisible(False)
        ui.simulationExpChoiceStageLbl.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignBottom)

        ui.simulationExpChoiceStagePanel.setText(ui.simulationExpChoiceStageLbl.text())
        ui.simulationExpChoiceStagePanel.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignBottom)
        ui.simulationExpChoiceStagePanel.setFont(QFont(window.fontLetter, window.fontFactor * 22, QFont.Bold))

# ***************  Experiment Objects *************************************** #

def createSimulationExperiments(participant,mainExperiment, timeChoiceSetsBlock0, timeChoiceSetsBlock1,timeChoiceSetsBlock2, timeProspectSetsBlock3):

    #Experimental Block 0 (Example block)

    window.ids = 0  # Ids are accumulative, they are not reset for each kind of experiment
    for timeChoiceSet in timeChoiceSetsBlock0:

        window.ids += 1  # Id equals 1 corresponds to the example case.

        window.experimentBlock0 = ExperimentBlock1(participant = participant, expType = 0, id = window.ids, maxId = int(len(timeChoiceSetsBlock0))
                                                   , nLearningTrials = window.nLearningTrials[0], nExtraLearningTrials = window.nExtraLearningTrials[0]
                                                   , nConsequenceTrials=window.nConsequenceTrials[0], nDescriptiveTrials=window.nDescriptiveTrials
                                                   , learningMode = window.learningMode
                                         , timeAlternativeControl=timeChoiceSet.getTimeAlternative(0), timeAlternativeTreatment = timeChoiceSet.getTimeAlternative(1)
                                         , csvExperiment="Experiment1Conditions.csv"
                                         , csvSimulatedLearningResponses = "Experiment1SimulatedLearningResponses.csv"
                                         , csvSimulatedChoiceResponses = "Experiment1SimulatedChoiceResponses.csv"
                                         , csvDescriptiveLearningResponses="Experiment1DescriptiveLearningResponses.csv"
                                         , csvDescriptiveChoiceResponses="Experiment1DescriptiveChoiceResponses.csv")



        if window.mainExperiment.languageCondition == "spanish":
            window.experimentBlock0.csvDescription = "Experiment1DescriptionSPA.html"

        mainExperiment.setup(experiment = window.experimentBlock0, typeTrials = "learning")

    # Experimental Block 1 (Training Block)
    window.ids = 0  # Ids are accumulative, they are not reset for each kind of experiment
    for timeChoiceSet in timeChoiceSetsBlock1:

        window.ids += 1  # Id equals 1 corresponds to the example case.

        window.experimentBlock1 = ExperimentBlock1(participant = participant, expType = 1, id = window.ids, maxId = int(len(timeChoiceSetsBlock1))
                                                   , nLearningTrials = window.nLearningTrials[0], nExtraLearningTrials = window.nExtraLearningTrials[0]
                                                   , nConsequenceTrials=window.nConsequenceTrials[0], nDescriptiveTrials=window.nDescriptiveTrials
                                                   , learningMode = window.learningMode
                                         , timeAlternativeControl=timeChoiceSet.getTimeAlternative(0), timeAlternativeTreatment = timeChoiceSet.getTimeAlternative(1)
                                         , csvExperiment="Experiment1Conditions.csv"
                                         , csvSimulatedLearningResponses = "Experiment1SimulatedLearningResponses.csv"
                                         , csvSimulatedChoiceResponses = "Experiment1SimulatedChoiceResponses.csv"
                                         , csvDescriptiveLearningResponses="Experiment1DescriptiveLearningResponses.csv"
                                         , csvDescriptiveChoiceResponses="Experiment1DescriptiveChoiceResponses.csv")



        if window.mainExperiment.languageCondition == "spanish":
            window.experimentBlock1.csvDescription = "Experiment1DescriptionSPA.html"

        mainExperiment.setup(experiment = window.experimentBlock1, typeTrials = "learning")



    #Experimental Block 2 (Time with no variability)
    window.ids = 0
    for timeChoiceSet in timeChoiceSetsBlock2:

        window.ids += 1

        window.experimentBlock2 = ExperimentBlock2(participant = participant, expType = 2, id = window.ids, maxId = int(len(timeChoiceSetsBlock2))
                                                   , nLearningTrials=window.nLearningTrials[1]
                                                   , nExtraLearningTrials=window.nExtraLearningTrials[1]
                                                   , nConsequenceTrials=window.nConsequenceTrials[1]
                                                   , nDescriptiveTrials=window.nDescriptiveTrials
                                                   ,learningMode = window.learningMode
                                         , timeAlternativeControl=timeChoiceSet.getTimeAlternative(0), timeAlternativeTreatment = timeChoiceSet.getTimeAlternative(1)
                                         , csvExperiment="Experiment2Conditions.csv"
                                         ,csvSimulatedLearningResponses = "Experiment2SimulatedLearningResponses.csv"
                                                   , csvSimulatedChoiceResponses = "Experiment2SimulatedChoiceResponses.csv"
                                                   , csvDescriptiveLearningResponses="Experiment2DescriptiveLearningResponses.csv"
                                                   ,csvDescriptiveChoiceResponses="Experiment2DescriptiveChoiceResponses.csv")



        if window.mainExperiment.languageCondition == "spanish":
            window.experimentBlock2.csvDescription = "Experiment2DescriptionSPA.html"

        mainExperiment.setup(experiment = window.experimentBlock2, typeTrials = "learning")



    #Experimental Block 3 (Time with variability)
    window.ids = 0
    for timeProspectSet in timeProspectSetsBlock3:

        window.ids += 1

        window.experimentBlock3 = ExperimentBlock3(participant = participant, expType = 3, id = window.ids, maxId = int(len(timeProspectSetsBlock3))
                                                   , nLearningTrials=window.nLearningTrials[2]
                                                   , nExtraLearningTrials=window.nExtraLearningTrials[2]
                                                   , nConsequenceTrials=window.nConsequenceTrials[2]
                                                   , nDescriptiveTrials=window.nDescriptiveTrials
                                                   ,learningMode = window.learningMode
                                    , timeProspectControl=timeProspectSet.getTimeProspect(0)
                                    , timeProspectTreatment=timeProspectSet.getTimeProspect(1)
                                         , csvExperiment="Experiment3Conditions.csv"
                                         ,csvSimulatedLearningResponses = "Experiment3SimulatedLearningResponses.csv"
                                                   , csvSimulatedChoiceResponses = "Experiment3SimulatedChoiceResponses.csv"
                                                   , csvDescriptiveLearningResponses="Experiment3DescriptiveLearningResponses.csv"
                                         ,csvDescriptiveChoiceResponses="Experiment3DescriptiveChoiceResponses.csv")



        if window.mainExperiment.languageCondition == "spanish":
            window.experimentBlock3.csvDescription = "Experiment3DescriptionSPA.html"

        mainExperiment.setup(experiment = window.experimentBlock3, typeTrials = "learning")



    #We will first Experiment 1 using the first choice set
    # experimentTest = mainExperiment.getExperiment(experimentId=1, expType=1)

    mainExperiment.runExperiment(experiment=mainExperiment.getExperiment(experimentId = 1, expType = 0, descriptive = False, random = True))

# ***************  (Page 3) Experiment: Simulation of Transport System  *************************************** #


# ***************   Objects Initialization *************************************** #

window.bus = None
window.bus1 = None
window.bus2 = None
window.buses = None
window.car = None
window.bike = None

window.busRoute1Counterclockwise = None
window.busRoute1Clockwise = None
window.busRoute2Counterclockwise = None
window.busRoute2Clockwise = None
window.busRoutes = None

window.eastLocation = None
window.westLocation = None

window.busTerminal1 = None
window.busTerminal2 = None
window.busTerminal3 = None
window.busTerminal4 = None
window.busTerminals = [window.busTerminal1,window.busTerminal2,window.busTerminal3,window.busTerminal4]

window.stop1 = None
window.stop2 = None
window.stop3 = None
window.stop4 = None
window.stops = [window.stop1,window.stop2,window.stop3,window.stop4]


# ***************   Creation of the real transportation network *************************************** #

#Visualization of the "toy transportation network"

#Parameters real network
window.realNetworkWidth = 100
window.realNetworkHeight = 40

#Mode of transportation
window.walkingMode = Mode(id="walking", speed = 7)
window.wheelchairMode = Mode(id="wheelchair", speed = window.walkingMode.speed * 0.8)
window.carMode =  Mode(id = "car",speed = 80)
window.busMode = Mode(id = "bus", speed = 60)
window.bikeMode = Mode(id = "bike", speed = 40)

#Vehicles

def createVehicles():
    # window.bus = Bus(id="Bus",position=Position(0,0),speed=window.busMode.speed, route = None, icon = None)
    window.bus1 = Bus(id="bus1",position=Position(0,0),speed=window.busMode.speed, route = None, icon = None) #Close to  In the South
    window.bus2 = Bus(id="bus2",position=Position(window.realNetworkWidth,0),speed=window.busMode.speed, route = None, icon = None)#Close to East Location In the South
    window.bus3 = Bus(id="bus3",position=Position(window.realNetworkWidth,window.realNetworkHeight),speed=window.busMode.speed, route = None, icon = None)  #Close to East Location In the North
    window.bus4 = Bus(id="bus4",position=Position(0,window.realNetworkHeight),speed=window.busMode.speed, route = None, icon = None)  #Close to East Location In the South

    window.buses = [window.bus1,window.bus2]
    window.car = Car(id = "Car 1", position = Position(0,0), speed=window.carMode.speed, icon = None) #Car
    window.bike = Bike(id = "Bike 1", position = Position(0,0), speed=window.bikeMode.speed, icon = None)

createVehicles()

def createLocations():

    #Locations (East Location, West Location)
    window.eastLocation = Location(x = window.realNetworkWidth, y = window.realNetworkHeight/2, id = "east")
    window.westLocation = Location(x = 0, y = window.realNetworkHeight/2, id = "west")

    #Bus Terminals (where the bus departure and arrive. In this place occurs the bus dispatching process)
    window.busTerminal1 = BusTerminal(x = 0, y = 0, id = "Southwest Terminal", icon = None) #Southwest terminal
    window.busTerminal2 = BusTerminal(x = window.realNetworkWidth, y = 0, id = "Southeast Terminal", icon = None) #Southeast terminal
    window.busTerminal3 = BusTerminal(x = window.realNetworkWidth, y = window.realNetworkHeight, id = "Northeast Terminal", icon = None) #Northeast terminal
    window.busTerminal4 = BusTerminal(x = 0, y = window.realNetworkHeight, id = "Northwest Terminal", icon = None) #Northwest terminal

    window.busTerminals = {window.busTerminal1.id:window.busTerminal1,window.busTerminal2.id:window.busTerminal2
                              ,window.busTerminal3:window.busTerminal3,window.busTerminal4:window.busTerminal4}


    window.dwellTime = 1 #Set in Chile and the UK in 1 second. Since there are 2 bus stops in the route, then the totall dwelltime is 2 seconds.
    #Bus Stops (1,2,3,4)
    window.stop1 = BusStop(id="stop1",x = window.realNetworkWidth*1/10, y = 0, dwellTime = window.dwellTime, icon = None) #Close to West Location In the South
    window.stop2 = BusStop(id="stop2",x = window.realNetworkWidth*9/10, y = 0, dwellTime = window.dwellTime, icon = None) #Close to east In the South
    window.stop3 = BusStop(id="stop3",x = window.realNetworkWidth*9/10, y = window.realNetworkHeight, dwellTime = window.dwellTime, icon = None) #Close to East Location In the North
    window.stop4 = BusStop(id="stop4",x = window.realNetworkWidth*1/10, y = window.realNetworkHeight, dwellTime = window.dwellTime, icon = None) #Close to West Location In the North

    window.stops = [window.stop1,window.stop2,window.stop3,window.stop4]

createLocations()

def createRoutes():

    #Bus Routes (Blue: Route 1 (South), Red: Route 2 (North)
    window.busRoute1Counterclockwise = BusRoute(id = "Route 1 counterclockwise", routeId = "Route 1", maxSpeed = 60, headway= 2
                                                , busStops = {1:window.stop1,2:window.stop2}, departureTerminal = window.busTerminal1
                                                , arrivalTerminal = window.busTerminal2, direction = Direction("counterclockwise"))

    window.busRoute1Clockwise = BusRoute(id = "Route 1 Clockwise", routeId = "Route 1", maxSpeed = 60, headway= 2
                                         , busStops = {1:window.stop2,2:window.stop1}, departureTerminal = window.busTerminal2
                                         , arrivalTerminal = window.busTerminal1, direction = Direction("clockwise"))

    window.busRoute2Counterclockwise = BusRoute(id = "Route 2 counterclockwise", routeId = "Route 2", maxSpeed = 80, headway= 2
                                                , busStops = {1:window.stop3,2:window.stop4}, departureTerminal = window.busTerminal3
                                                , arrivalTerminal = window.busTerminal4, direction = Direction("counterclockwise"))

    window.busRoute2Clockwise = BusRoute(id = "Route 2 Clockwise", routeId = "Route 2", maxSpeed = 80, headway= 2
                                         , busStops = {1:window.stop4,2:window.stop3}, departureTerminal = window.busTerminal4
                                         , arrivalTerminal = window.busTerminal3, direction = Direction("clockwise"))

    window.busRoutes = [window.busRoute1Counterclockwise,window.busRoute1Clockwise,window.busRoute2Counterclockwise,window.busRoute2Clockwise]

createRoutes()

#Real Transportation Network ('Reality')
window.realNetwork = Network(busStops=window.stops, buses=window.buses, networkSpeed=10, width = window.realNetworkWidth, height = window.realNetworkHeight
                            ,start= Position(0,0), end = Position(0,0),nSegments=50,locations = [window.eastLocation,window.westLocation]
                             , busRoutes = window.busRoutes, busTerminals = window.busTerminals)

#Virtual Transportation Network (what is seen in the program, 'The Virtual Reality')

# Shape parameters of the virtual network (the one shown in the program)
scalePixelKm = 10 #How many pixels per kilometer
window.percentageMaxDimNetworkPanel = 0.8 #The maximum percertage of the network panel size that the virtual network will have
window.percentageMaxWidthNetworkPanel = window.percentageMaxDimNetworkPanel #The maximum percertage of the network panel size that the virtual network will have
window.percentageMaxHeigthNetworkPanel = window.percentageMaxDimNetworkPanel

window.virtualNetworkWidth = scalePixelKm * window.realNetworkWidth
window.virtualNetworkHeight = scalePixelKm * window.realNetworkHeight

ui.virtualNetwork = VirtualNetwork(id="Virtual Network 1", parent = ui.simulationExpPanel,panel = ui.virtualNetworkPanel,realNetwork = window.realNetwork,
                                   percentageMaxWidth = window.percentageMaxWidthNetworkPanel, percentageMaxHeight = window.percentageMaxHeigthNetworkPanel)

#Intelligent Transportation System (ITS). This class is the 'brain' of the program (time interval in seconds. P.ej. 1 is one second)
window.its = ITS(realNetwork = window.realNetwork,virtualNetwork = ui.virtualNetwork, timeInterval = 1/5, networks = None, busStops = None, buses = None)
# If the time interval is lower than 1/20, the program give misleading times for the travel between the bus stop
# Using 1/10 the time waiting time is always correctly displays. If this value is lower waiting time of 1 are shown as 0.
# 1/5 do not distorts time at all in windows computer and the animation still look decent.

#Person
window.person = Person(id="Person",position = window.westLocation.position,icon=None,walkingSpeed = window.walkingMode.speed
                                    ,eastLocation = window.eastLocation, westLocation = window.westLocation)

# ***************   Creation of the Journey Option Panel *************************************** #

window.iconJourneyPanelWidth = 50
window.iconJourneyPanelHeight = 50
window.nIconsJourneyPanel = 2


def setColoursButtonJourneyPanel():

    if window.mainExperiment.currentExperiment.currentTrial.treatmentDirection == "counterclockwise":
        if window.mainExperiment.currentExperiment.currentTrial.treatmentColor == "red":
            ui.directionCounterclockwiseSelectedIcon.setPicture("Pictures/redBus.png")
            ui.directionClockwiseSelectedIcon.setPicture("Pictures/blueBus.png")

        else:
            ui.directionCounterclockwiseSelectedIcon.setPicture("Pictures/blueBus.png")
            ui.directionClockwiseSelectedIcon.setPicture("Pictures/redBus.png")

    else:
        if window.mainExperiment.currentExperiment.currentTrial.treatmentColor == "red":
            ui.directionCounterclockwiseSelectedIcon.setPicture("Pictures/blueBus.png")
            ui.directionClockwiseSelectedIcon.setPicture("Pictures/redBus.png")

        else:
            ui.directionCounterclockwiseSelectedIcon.setPicture("Pictures/redBus.png")
            ui.directionClockwiseSelectedIcon.setPicture("Pictures/blueBus.png")

def creationButtonsJourneyPanel():

    # Directions (Counterclockwise, clockwise)
    ui.directionCounterclockwiseSelectedIcon = ClickableOptionIcon(parent = ui.simulationExpPanel, type = "direction", id = "counterclockwise", path= "Pictures/counterclockwise.png",myGrid = ui.directionGrid)
    ui.directionClockwiseSelectedIcon = ClickableOptionIcon(parent = ui.simulationExpPanel, type = "direction", id = "clockwise", path= "Pictures/clockwise.png",myGrid = ui.directionGrid)

    addRowIconsGrid(nIcons = window.nIconsJourneyPanel, nameRow = "Direction",grid= ui.directionGrid,nRow=0, width = window.iconJourneyPanelWidth, height = window.iconJourneyPanelHeight
                    , icons= [ui.directionCounterclockwiseSelectedIcon,ui.directionClockwiseSelectedIcon])

     #The panels (QLabels) that blocked the buttons are bring to the back
    # ui.journeyPanel.lower()
    # ui.startJourneyPanel.lower()

creationButtonsJourneyPanel()

window.startJourney = None

window.counterTemp = 1

def startJourneyClicked():
    # createJourneyIndicators()

    window.startJourney = True

    if window.learningMode == "free":
        tripSelectionFreeLearning()

    else:#Guided Learning
        tripSelectionGuidedLearning()

    resetColorLocations()
    resetColorButtonsJourneyPanel(grid = ui.journeyClickableGrid)

    if window.mainExperiment.isLastTrial(window.mainExperiment.currentExperiment): #Last Trial of the experiment

        if window.mainExperiment.languageCondition == "english":
            ui.nextJourneyButton.setText("Next")

        if window.mainExperiment.languageCondition == "spanish":
            ui.nextJourneyButton.setText("Siguiente")
    else:
        if window.mainExperiment.languageCondition == "english":
            ui.nextJourneyButton.setText("Finish Journey")

        if window.mainExperiment.languageCondition == "spanish":
            ui.nextJourneyButton.setText("Terminar viaje")

#Connects buttons from the journey panel to generate actions in the Transportation Network (Virtual and Real)
def connectButtonsGridPanel(grid,function):
    # The following loop connects the Qlabels of each grid with the function that generate the trip
    for i in range(grid.count()):
        subGrid = grid.itemAt(i) # ui.journeyClickableGrid is a grid with 4 grids.
        for j in range(subGrid.count()):
            clickableLabel = subGrid.itemAt(j).widget()
            if isinstance(clickableLabel, ClickableOptionIcon): #We do not have to include Qlabel objects (they were used to redistribute space among the grid)
                clickableLabel.clicked.connect(function)

# ***************   Creation of the Virtual Transportation Network *************************************** #

def createLocationIcons(locationIconWidth, locationIconHeight):


    #Stops
    stop1Icon = NetworkLocationIcon(parent=ui.simulationExpPanel, originalPath = "Pictures/stop", path="Pictures/stop", id=window.stop1.id,
                                       realNetwork=window.realNetwork , virtualNetwork=ui.virtualNetwork,
                                       position=window.stop1.position, width=locationIconWidth,
                                       height=locationIconHeight)

    stop2Icon = NetworkLocationIcon(parent=ui.simulationExpPanel, originalPath = "Pictures/stop", path="Pictures/stop", id=window.stop2.id,
                                       realNetwork=window.realNetwork , virtualNetwork=ui.virtualNetwork,
                                       position=window.stop2.position, width=locationIconWidth,
                                       height=locationIconHeight)

    stop3Icon = NetworkLocationIcon(parent=ui.simulationExpPanel, originalPath = "Pictures/stop", path="Pictures/stop", id=window.stop3.id,
                                       realNetwork=window.realNetwork , virtualNetwork=ui.virtualNetwork,
                                       position=window.stop3.position, width=locationIconWidth,
                                       height=locationIconHeight)

    stop4Icon = NetworkLocationIcon(parent=ui.simulationExpPanel, originalPath = "Pictures/stop", path="Pictures/stop", id=window.stop4.id,
                                       realNetwork=window.realNetwork , virtualNetwork=ui.virtualNetwork,
                                       position=window.stop4.position, width=locationIconWidth,
                                       height=locationIconHeight)

    window.stop1.icon = stop1Icon
    window.stop2.icon = stop2Icon
    window.stop3.icon = stop3Icon
    window.stop4.icon = stop4Icon


    # window.stop1.icon.setIcon(stop1Icon)
    # window.stop2.icon.setIcon(stop2Icon)
    # window.stop3.icon.setIcon(stop3Icon)
    # window.stop4.icon.setIcon(stop4Icon)


    #West Location
    ui.westLocationIcon = NetworkLocationIcon(parent=ui.simulationExpPanel,originalPath = "Pictures/home.png", path="Pictures/home.png", id=window.westLocation.id,
                                       realNetwork=window.realNetwork , virtualNetwork=ui.virtualNetwork,
                                       position=window.westLocation.position, width=window.locationIconWidth,
                                       height=window.locationIconHeight)

    #East Location
    ui.workIcon = NetworkLocationIcon(parent=ui.simulationExpPanel, originalPath = "Pictures/work.png", path="Pictures/work.png", id=window.westLocation.id,
                                       realNetwork=window.realNetwork , virtualNetwork=ui.virtualNetwork,
                                       position=window.eastLocation.position, width=window.locationIconWidth,
                                       height=window.locationIconHeight)

    window.eastLocation.icon = ui.workIcon
    window.westLocation.icon = ui.westLocationIcon

    #Terminals
    window.terminalIconWidth = window.locationIconWidth*0.5
    window.terminalIconHeight = window.locationIconHeight*0.5

    ui.terminal1Icon = NetworkLocationIcon(parent=ui.simulationExpPanel, path="Pictures/busTerminal1.png", id=window.busTerminal1,
                                           realNetwork=window.realNetwork , virtualNetwork=ui.virtualNetwork,
                                           position=window.busTerminal1.position, width=window.terminalIconWidth,
                                           height=window.terminalIconHeight
                                           )
    ui.terminal2Icon = NetworkLocationIcon(parent=ui.simulationExpPanel, path="Pictures/busTerminal2.png",id=window.busTerminal2,
                                           realNetwork=window.realNetwork , virtualNetwork=ui.virtualNetwork,
                                           position=window.busTerminal2.position, width=window.terminalIconWidth,
                                           height=window.terminalIconHeight
                                           )
    ui.terminal3Icon = NetworkLocationIcon(parent=ui.simulationExpPanel, path="Pictures/busTerminal3.png",id=window.busTerminal3,
                                           realNetwork=window.realNetwork , virtualNetwork=ui.virtualNetwork,
                                           position=window.busTerminal3.position, width=window.terminalIconWidth,
                                           height=window.terminalIconHeight
                                           )
    ui.terminal4Icon = NetworkLocationIcon(parent=ui.simulationExpPanel, path="Pictures/busTerminal4.png", id=window.busTerminal4,
                                           realNetwork=window.realNetwork , virtualNetwork=ui.virtualNetwork,
                                           position=window.busTerminal4.position, width=window.terminalIconWidth,
                                           height=window.terminalIconHeight
                                           )
    window.busTerminal1.icon = ui.terminal1Icon
    window.busTerminal2.icon = ui.terminal2Icon
    window.busTerminal3.icon = ui.terminal3Icon
    window.busTerminal4.icon = ui.terminal4Icon

    for terminalIcon in [ui.terminal1Icon,ui.terminal2Icon,ui.terminal3Icon,ui.terminal4Icon]:
        terminalIcon.raise_()

def updateLocationIcons():
    for location in [window.westLocation,window.eastLocation,window.stop1,window.stop2,window.stop3,window.stop4]:
        location.icon.setPicture(path = location.icon.originalPath)

    for stop in window.stops:
        stop.treatmentStop = False

    if window.simulatedExperimentCondition == "simulatedTreatmentCondition1":
        for stop in window.stops:
            stop.treatmentStop = True

    #Set timer of the bus stop
    if window.simulatedExperimentCondition == "simulatedTreatmentCondition2":

        #This code is to put real time information only in the bus stop that is part of the treatment route.

        if window.mainExperiment.currentExperiment.currentTrial.randomOrigin == "west":
            if window.mainExperiment.currentExperiment.currentTrial.treatmentDirection == "counterclockwise":
                window.stop1.treatmentStop = True
            else:
                window.stop4.treatmentStop = True
        else:
            if window.mainExperiment.currentExperiment.currentTrial.treatmentDirection == "counterclockwise":
                window.stop3.treatmentStop = True
            else:
                window.stop2.treatmentStop = True

def setColoursBusIcons():
    if window.mainExperiment.currentExperiment.currentTrial.treatmentDirection == "counterclockwise":
        if window.mainExperiment.currentExperiment.currentTrial.treatmentColor == "red":
            window.busRoute1Counterclockwise.icon.setPicture("Pictures/redBus.png")
            window.busRoute2Counterclockwise.icon.setPicture("Pictures/redBus.png")


            window.busRoute1Clockwise.icon.setPicture("Pictures/blueBus.png")
            window.busRoute2Clockwise.icon.setPicture("Pictures/blueBus.png")

        else:
            window.busRoute1Counterclockwise.icon.setPicture("Pictures/blueBus.png")
            window.busRoute2Counterclockwise.icon.setPicture("Pictures/blueBus.png")

            window.busRoute1Clockwise.icon.setPicture("Pictures/redBus.png")
            window.busRoute2Clockwise.icon.setPicture("Pictures/redBus.png")

    else:
        if window.mainExperiment.currentExperiment.currentTrial.treatmentColor == "red":

            window.busRoute1Clockwise.icon.setPicture("Pictures/redBus.png")
            window.busRoute2Clockwise.icon.setPicture("Pictures/redBus.png")

            window.busRoute1Counterclockwise.icon.setPicture("Pictures/blueBus.png")
            window.busRoute2Counterclockwise.icon.setPicture("Pictures/blueBus.png")

        else:

            window.busRoute1Clockwise.icon.setPicture("Pictures/blueBus.png")
            window.busRoute2Clockwise.icon.setPicture("Pictures/blueBus.png")

            window.busRoute1Counterclockwise.icon.setPicture("Pictures/redBus.png")
            window.busRoute2Counterclockwise.icon.setPicture("Pictures/redBus.png")

def createVehicleIcons(vehicleIconWidth, vehicleIconHeight):


    # Bus position
    ui.busIcon = VehicleIcon(parent=ui.simulationExpPanel, path="Pictures/bus.png", id="bus",
                             realNetwork=window.realNetwork, virtualNetwork=ui.virtualNetwork,
                             originalPosition=Position(0, 0), position=Position(0, 0), width=vehicleIconWidth,
                             height=vehicleIconHeight)
    ui.busIcon.setVisible(False)


    #Bus Routes (1,2)

    ui.busRoute1CounterclockwiseIcon = VehicleIcon(parent=ui.simulationExpPanel, path="Pictures/bus.png", id=window.busRoute1Counterclockwise,
                               realNetwork=window.realNetwork, virtualNetwork=ui.virtualNetwork,
                               originalPosition=window.busRoute1Counterclockwise.departureTerminal.position, position=window.busRoute1Counterclockwise.departureTerminal.position,
                               width=vehicleIconWidth,height=vehicleIconHeight)

    ui.busRoute1ClockwiseIcon = VehicleIcon(parent=ui.simulationExpPanel, path="Pictures/bus.png", id=window.busRoute1Counterclockwise,
                               realNetwork=window.realNetwork, virtualNetwork=ui.virtualNetwork,
                               originalPosition=window.busRoute1Clockwise.departureTerminal.position, position=window.busRoute1Clockwise.departureTerminal.position,
                               width=vehicleIconWidth, height=vehicleIconHeight)

    ui.busRoute2CounterclockwiseIcon = VehicleIcon(parent=ui.simulationExpPanel, path="Pictures/bus.png", id=window.busRoute2Counterclockwise,
                               realNetwork=window.realNetwork, virtualNetwork=ui.virtualNetwork,
                               originalPosition=window.busRoute2Counterclockwise.departureTerminal.position, position=window.busRoute2Counterclockwise.departureTerminal.position,
                               width=vehicleIconWidth, height=vehicleIconHeight)

    ui.busRoute2ClockwiseIcon = VehicleIcon(parent=ui.simulationExpPanel, path="Pictures/bus.png", id=window.busRoute2Clockwise,
                               realNetwork=window.realNetwork, virtualNetwork=ui.virtualNetwork,
                               originalPosition = window.busRoute2Clockwise.departureTerminal.position, position=window.busRoute2Clockwise.departureTerminal.position, width=vehicleIconWidth,
                               height=vehicleIconHeight)

    window.busRoute1Counterclockwise.setBusIcon(ui.busRoute1CounterclockwiseIcon)
    window.busRoute2Counterclockwise.setBusIcon(ui.busRoute2CounterclockwiseIcon)
    window.busRoute1Clockwise.setBusIcon(ui.busRoute1ClockwiseIcon)
    window.busRoute2Clockwise.setBusIcon(ui.busRoute2ClockwiseIcon)

    #Hide Bus Positions at the beginning

    for busRoute in [window.busRoute1Counterclockwise,window.busRoute1Clockwise,window.busRoute2Counterclockwise,window.busRoute2Clockwise]:
        busRoute.icon.setVisible(False)

    #Car
    carIcon = VehicleIcon(parent=ui.simulationExpPanel, path="Pictures/car.png", id=window.car.id,
                               realNetwork=window.realNetwork, virtualNetwork=ui.virtualNetwork,
                               position=window.car.position, width=window.vehicleIconWidth,
                               height=window.vehicleIconHeight)

    window.car.setIcon(carIcon)
    window.car.icon.hide()

    #Bike
    bikeIcon = VehicleIcon(parent=ui.simulationExpPanel, path="Pictures/bike.png", id=window.bike.id,
                               realNetwork=window.realNetwork, virtualNetwork=ui.virtualNetwork,
                               position=window.bike.position, width=window.vehicleIconWidth,
                               height=window.vehicleIconHeight)

    window.bike.setIcon(bikeIcon)
    window.bike.icon.hide()

def updateVehicleIcons():
    for busRoute in [window.busRoute1Counterclockwise,window.busRoute1Clockwise,window.busRoute2Counterclockwise,window.busRoute2Clockwise]:
        busRoute.icon.setPosition(position = busRoute.icon.originalPosition,realNetwork = busRoute.icon.realNetwork
                                 ,virtualNetwork = busRoute.icon.virtualNetwork,width = busRoute.icon.width(),height=busRoute.icon.height())

        for busKey in busRoute.buses.keys():
            busRoute.buses[busKey].position = busRoute.icon.position

def createPersonIcons(personIconWidth,personIconHeight):

    #Person Position
    ui.personIcon = PersonIcon(parent=ui.simulationExpPanel, path="Pictures/walkingWork.png", id=window.person.id,
                                       realNetwork=window.realNetwork , virtualNetwork=ui.virtualNetwork,
                                       position=window.person.position, width=window.personIconWidth,
                                       height=window.personIconHeight)

    ui.personWalkingEastToWest = PersonIcon(parent=ui.simulationExpPanel, path="Pictures/walkingEastToWest.png", id="eastToWest",
               realNetwork=window.its.realNetwork, virtualNetwork=ui.virtualNetwork,
               position=window.person.position, width=window.personIconWidth,
               height=window.personIconHeight)

    ui.personWalkingWestToEast = PersonIcon(parent=ui.simulationExpPanel, path="Pictures/walkingWestToEast.png", id="westToEast",
               realNetwork=window.its.realNetwork, virtualNetwork=ui.virtualNetwork,
               position=window.person.position, width=window.personIconWidth,
               height=window.personIconHeight)

    ui.personWaitingStop = PersonIcon(parent=ui.simulationExpPanel, path="Pictures/waiting.png", id="waitingStop",
               realNetwork=window.its.realNetwork, virtualNetwork=ui.virtualNetwork,
               position=window.person.position, width=window.personIconWidth,
               height=window.personIconHeight)

    ui.personWaitingBus = PersonIcon(parent=ui.simulationExpPanel, path="Pictures/passengerAlighting.png", id="busArriving",
               realNetwork=window.its.realNetwork, virtualNetwork=ui.virtualNetwork,
               position=window.person.position, width=window.personIconWidth,
               height=window.personIconHeight)

    ui.personAlightingBus = PersonIcon(parent=ui.simulationExpPanel, path="Pictures/passengerAlighting.png", id="alightingBus",
               realNetwork=window.its.realNetwork, virtualNetwork=ui.virtualNetwork,
               position=window.person.position, width=window.personIconWidth,
               height=window.personIconHeight)


    window.person.setIcon(ui.personWalkingWestToEast)
    window.person.setIcon(ui.personWalkingEastToWest)
    window.person.setIcon(ui.personWaitingStop)
    window.person.setIcon(ui.personWaitingBus)
    window.person.setIcon(ui.personAlightingBus)

    for personIcon in [ui.personWalkingWestToEast,ui.personWalkingEastToWest,ui.personWaitingStop,ui.personWaitingBus, ui.personAlightingBus]:
        window.person.setIcon(personIcon)
        personIcon.setVisible(False)
        personIcon.raise_()

    window.person.setIcon(ui.personIcon)
    window.person.icon.setVisible(False)

def createIconsVirtualNetwork(vehicleIconWidth,vehicleIconHeight,personIconWidth,personIconHeight,locationIconWidth,locationIconHeight):

    createPersonIcons(personIconWidth = personIconWidth, personIconHeight = personIconHeight)
    createVehicleIcons(vehicleIconWidth=vehicleIconWidth, vehicleIconHeight=vehicleIconHeight)
    createLocationIcons(locationIconWidth=locationIconWidth, locationIconHeight=locationIconHeight)

# Icon Sizes (vehicles, person, locations)

window.personIconWidth = 30
window.personIconHeight = 30

window.vehicleIconWidth = 30
window.vehicleIconHeight = 30

window.locationIconWidth = 50
window.locationIconHeight = 50


createIconsVirtualNetwork(vehicleIconWidth = window.vehicleIconWidth,vehicleIconHeight = window.vehicleIconHeight
                   ,personIconWidth = window.personIconWidth,personIconHeight = window.personIconHeight
                   ,locationIconWidth = window.locationIconWidth,locationIconHeight = window.locationIconHeight)

#Function to reveal positions of buses and terminals

def revealBusPositions(reveal):
    if reveal == True:  # If the consent check box is checked
        for busRoute in window.realNetwork.busRoutes:
            for busKey in busRoute.buses.keys():
                busRoute.buses[busKey].icon.show()
    else:
        for busRoute in window.realNetwork.busRoutes:
            for busKey in busRoute.buses.keys():
                busRoute.buses[busKey].icon.hide()

revealBusPositions(False)

def revealBusTerminals(reveal):
    if reveal == True:
        for busTerminalKey in window.realNetwork.busTerminals.keys():
            window.realNetwork.busTerminals[busTerminalKey].icon.show()

    else:
        for busTerminalKey in window.realNetwork.busTerminals.keys():
            window.realNetwork.busTerminals[busTerminalKey].icon.hide()

        for terminalKey in window.busTerminals.keys():
            window.busTerminals[terminalKey].icon.hide()

revealBusTerminals(False)

# ***************   Timers for animations *************************************** #

window.timeInterval = window.its.timeInterval*1000 #In miliseconds. This is the interval for the timers.

window.myTimerPersonWalking = None
window.completeBusRunTimer = None
window.myTimerBusStop = None

def createTimers():
    # Timer for person walking
    window.myTimerPersonWalking = QTimer()
    # Ths timer allows that the bus and person are moving between the bus stops of the journey
    window.completeBusRunTimer = QTimer()
    window.completeBusRunTimer.setInterval(window.timeInterval)

createTimers()

def stopTimers():
    window.myTimerPersonWalking.stop()
    window.completeBusRunTimer.stop()

# ***************   Creation of panel to select the preferred journey after the learning stage *************************************** #


#This function is called when one the preferred journey buttons is clicked
def preferredJourneySelection():

    preferredJourneyClickableLabelClicked = ui.preferredJourneyClickableGrid.sender()

    if isinstance(preferredJourneyClickableLabelClicked, ClickableOptionIcon):

        oneClickedLabel(preferredJourneyClickableLabelClicked)

        if preferredJourneyClickableLabelClicked.type == "direction":
            if preferredJourneyClickableLabelClicked.id == "clockwise":
                window.mainExperiment.currentExperiment.setPreferredJourney("clockwise")
            if preferredJourneyClickableLabelClicked.id == "counterclockwise":
                window.mainExperiment.currentExperiment.setPreferredJourney("counterclockwise")

def setColoursButtonPreferredJourneyPanel():

    if window.mainExperiment.currentExperiment.currentTrial.treatmentDirection == "counterclockwise":
        if window.mainExperiment.currentExperiment.currentTrial.treatmentColor == "red":
            ui.counterclockwiseJourneyPreferred.setPicture("Pictures/redBus.png")
            ui.clockwiseJourneyPreferred.setPicture("Pictures/blueBus.png")

        else:
            ui.counterclockwiseJourneyPreferred.setPicture("Pictures/blueBus.png")
            ui.clockwiseJourneyPreferred.setPicture("Pictures/redBus.png")

    else:
        if window.mainExperiment.currentExperiment.currentTrial.treatmentColor == "red":
            ui.counterclockwiseJourneyPreferred.setPicture("Pictures/blueBus.png")
            ui.clockwiseJourneyPreferred.setPicture("Pictures/redBus.png")

        else:
            ui.counterclockwiseJourneyPreferred.setPicture("Pictures/redBus.png")
            ui.clockwiseJourneyPreferred.setPicture("Pictures/blueBus.png")

def creationPreferredJourneyPanel(function, grid):

    # Directions (Counterclockwise, clockwise)
    ui.counterclockwiseJourneyPreferred = ClickableOptionIcon(parent = ui.simulationExpChoicePanel, type = "direction", id = "counterclockwise", path= "Pictures/counterclockwise.png",myGrid = ui.preferredDirectionGrid)
    ui.clockwiseJourneyPreferred = ClickableOptionIcon(parent = ui.simulationExpChoicePanel, type = "direction", id = "clockwise", path= "Pictures/clockwise.png",myGrid = ui.preferredDirectionGrid)

    addRowIconsGrid(nIcons = 2, nameRow = "Direction",grid= ui.preferredDirectionGrid,nRow=0, width = window.iconJourneyPanelWidth, height = window.iconJourneyPanelHeight
                    , icons= [ui.counterclockwiseJourneyPreferred,ui.clockwiseJourneyPreferred])

    connectButtonsGridPanel(grid, function)

    if window.mainExperiment.languageCondition == "english":
        ui.directionGridLbl.setText("Route  ")

    if window.mainExperiment.languageCondition == "spanish":
        ui.directionGridLbl.setText("Ruta  ")

    ui.directionGridLbl.setFont(QFont(window.fontLetter, window.fontFactor*24, QFont.Bold))

# ***************   Trip Generation in the Transport Network *************************************** #

window.tripOrigin = None
window.tripDestination = None
window.tripDirection = None
window.tripMode = None


# # Initially hide the button to go to the next Journey
# ui.nextJourneyButton.hide()

# Print the indicators in an csv file
def printSelectedRouteIndicators():
    completed = False

def tripInformation():
    window.participantTrips.append(window.currentTrip)

def nextJourneyClicked():

    # When the person arrives to the final destination
    if window.its.equalPositions(window.person.position, window.person.finalLocation):
        # updateJourneyIndicators()
        # tripInformation() #Show information about the trip

        #When the trip finishes the person can click next and start a new journey
        ui.nextJourneyButton.hide()
        ui.startJourneyButton.show()

        # Write informatin about the current trial in the corresponding csv file
        writeSimulatedLearningResponse()

        # Reset the transportation network panel
        resetSimulationExpPage()

        #We go to the next trial of the experiment

        # If it is the last trial

        currentExperiment = window.mainExperiment.currentExperiment

        if window.mainExperiment.isLastTrial(window.mainExperiment.currentExperiment):

            if currentExperiment.id == 1 and currentExperiment.expType == 0: #Example Case

                window.mainExperiment.runExperiment(
                    experiment=window.mainExperiment.getExperiment(experimentId=1, expType=1, descriptive=False, random=True))

                setupExperimentGeneralDescription(page=window.nGeneralDescriptionPage)
                ui.stackedWidget.setCurrentWidget(ui.simulationExpGeneralDescriptionPage)  # Go to next page

            elif window.mainExperiment.isCurrentExperimentStage("learning") or window.mainExperiment.isCurrentExperimentStage("extraLearning"):
                window.mainExperiment.setExperimentStage(experiment = currentExperiment, stage = "decision")
                finishLearningStageCurrentExperiment()

            # elif window.mainExperiment.isCurrentExperimentStage("decision"):
            #     ui.simulationExpGrid.itemAtPosition(0, 0).widget().setVisible(True)  # Show the upper panel
            #     ui.simulationExpGrid.itemAtPosition(0, 0).widget().raise_()

            elif window.mainExperiment.isCurrentExperimentStage("consequences"):
                window.mainExperiment.setExperimentStage(experiment=currentExperiment, stage="confirmation")
                finishLearningStageCurrentExperiment()
                # finishCurrentExperiment()

        else:# Go to next Trial

            currentTrial = currentExperiment.currentTrial

            window.mainExperiment.runExperiment(experiment=window.mainExperiment.currentExperiment)
            currentTrial = window.mainExperiment.currentExperiment.currentTrial
            updateSimulationExpTitlePage(expType=window.mainExperiment.currentExperiment.expType,
                                         trial=currentTrial
                                         ,direction = currentTrial.direction
                                         ,color = currentTrial.colorRouteSelected)


            if window.learningMode == "free":
                tripSelectionFreeLearning()
            else:
                tripSelectionGuidedLearning()

            if window.mainExperiment.currentExperiment.randomOrigin == "west":
                window.person.icon.setPicture(window.person.icons["westToEast"].path)
                window.westLocation.icon.setBackgroundColor(color="yellow")
                window.eastLocation.icon.setBackgroundColor(color="white")

            if window.mainExperiment.currentExperiment.randomOrigin == "east":
                window.person.icon.setPicture(window.person.icons["eastToWest"].path)
                window.eastLocation.icon.setBackgroundColor(color="yellow")
                window.westLocation.icon.setBackgroundColor(color="white")


    else:
        warningMessage = ""

    # if window.mainExperiment.currentExperiment.decisionConsequences == True:
    #
    #     # When the person arrives to the final destination
    #     if window.its.equalPositions(window.person.position, window.person.finalLocation):
    #
    #         #When the trip finishes the person can click next and start a new journey
    #         ui.nextJourneyButton.hide()
    #         ui.startJourneyButton.show()
    #
    #         # Reset the transportation network panel
    #         resetSimulationExpPage()
    #
    #         writeConsequenceResponse()
    #
    #         tripSelectionGuidedLearning()

def writeSimulatedChoiceResponse(currentSimulatedChoiceResponse):

    currentExperiment = window.mainExperiment.currentExperiment
    experimentalCondition = window.mainExperiment.simulatedExperimentCondition
    window.endingTimeSimulatedChoiceResponse = datetime.now().strftime('%H%M%S')

    window.mainExperiment.writeSimulatedChoiceResponseCsv(experiment=currentExperiment
                                                          ,experimentalCondition = experimentalCondition
                                                 ,simulatedChoiceResponse=currentSimulatedChoiceResponse)

    window.mainExperiment.writeReactionTimeResponse(participantId = window.currentParticipant.id
                                                    ,computerId = window.computerId
                                                    ,experimentCountry = window.experimentCountry
                                                    ,experimentalSession = window.experimentalSession
                                                    ,order =currentExperiment.simulationAbsoluteOrderId
                                                    ,blockOrder = currentExperiment.simulationOrderId #Relative order (intrablock)
                                                    ,dp=currentExperiment.dp
                                                    ,blockDp = currentExperiment.id #Relative id of the scenario (intrablock)
                                                    ,experimentBlock=currentExperiment.expType
                                                    ,experimentType="experienced"
                                                    ,experimentalCondition = experimentalCondition
                                                    ,experimentStage=currentExperiment.currentExperimentStage
                                                    ,startingTime = window.startingTimeSimulatedChoiceResponse
                                                    ,endingTime = window.endingTimeSimulatedChoiceResponse)

def writeSimulatedLearningResponse():

    # Write information about the current trial in the corresponding csv file
    currentSimulatedLearningResponse = window.mainExperiment.getSimulatedLearningResponse(experiment=window.mainExperiment.currentExperiment,
                                                              directionRouteSelected=window.tripDirection.id)

    window.mainExperiment.writeSimulatedLearningResponseCsv(experiment=window.mainExperiment.currentExperiment
                                                            , experimentalCondition=window.mainExperiment.simulatedExperimentCondition
                                                            , simulatedLearningResponse=currentSimulatedLearningResponse)

def writeConsequenceResponse():
    completed = False

#This variable holds the time when the choice
window.startingTimeSimulatedChoiceResponse = None
window.endingTimeSimulatedChoiceResponse = None

#This function will show the page of the stacked widget that asks for the preferred journey
def finishLearningStageCurrentExperiment():

    #The default for decision consequences is false
    setupSimulationExpChoicePage()
    window.startingTimeSimulatedChoiceResponse = datetime.now().strftime('%H%M%S')
    ui.stackedWidget.setCurrentWidget(ui.simulationExpChoicePage)

def setupConsequencePage(currentSimulatedChoiceResponse):

    currentExperiment = window.mainExperiment.currentExperiment
    window.mainExperiment.createConsequencesExperiment(experiment=currentExperiment
                                                                , nTrials=currentExperiment.nConsequenceTrials
                                                                ,typeTrials = "consequence"
                                                                , choiceResponse = currentSimulatedChoiceResponse)
    #Title Page

    fontIncreaseTitle = 1

    ui.simulationExpGrid.itemAtPosition(0, 0).widget().setVisible(True)  # Show the upper panel
    ui.simulationExpGrid.itemAtPosition(0, 0).widget().raise_()



    if window.mainExperiment.languageCondition == "english":
        expStage = window.mainExperiment.getNameCurrentExperimentStage("english")
        setTitlePage(grid=ui.simulationExpGrid,
                     text="Now you will experience " + str(currentExperiment.nConsequenceTrials)
                          + " trip(s) in the route you just chose - " + expStage
                     , capitalLetters=False, fontLetter=window.mainExperiment.fontLetter,
                     fontFactor=window.mainExperiment.fontFactor,fontIncreaseFactor = fontIncreaseTitle)

    if window.mainExperiment.languageCondition == "spanish":
        expStage = window.mainExperiment.getNameCurrentExperimentStage("spanish")
        setTitlePage(grid=ui.simulationExpGrid,
                     text="Ahora vas a experimentar "+ str(currentExperiment.nConsequenceTrials) +
                          " viaje(s) en la ruta que acabas de elegir - "+ expStage
                     , capitalLetters=False, fontLetter=window.mainExperiment.fontLetter,
                     fontFactor=window.mainExperiment.fontFactor, fontIncreaseFactor=fontIncreaseTitle)

    setupSimulationExpPage(experiment=window.mainExperiment.currentExperiment)


    ui.stackedWidget.setCurrentWidget(ui.simulationExpPage)

def buttonNextSimulationExpChoicePageClicked():

    currentExperiment = window.mainExperiment.currentExperiment

    if currentExperiment.preferredJourney is not None:

        if currentExperiment.nConsequenceTrials >0 and window.mainExperiment.isCurrentExperimentStage("decision"):
            writeSimulatedChoiceResponse(
                currentSimulatedChoiceResponse=window.mainExperiment.getSimulatedChoiceResponse(
                    experiment=currentExperiment, type="decision"))
            window.mainExperiment.setExperimentStage(stage = "consequences", experiment = currentExperiment)

            setupConsequencePage(currentSimulatedChoiceResponse=window.mainExperiment.getSimulatedChoiceResponse(experiment=currentExperiment, type="decision"))


        if window.mainExperiment.isCurrentExperimentStage("confirmation"):

            if ui.horizontalSliderConfirmationPage.currentCertaintyLevel == 100 and currentExperiment.defaultCertaintyLevel is True:
                currentExperiment.setCertaintyLevel(certaintyLevel = ui.horizontalSliderConfirmationPage.currentCertaintyLevel)
                currentExperiment.defaultCertaintyLevel = False
                ui.moreJourneysLbl.setVisible(True)

            else:
                currentExperiment.setCertaintyLevel(
                    certaintyLevel=ui.horizontalSliderConfirmationPage.currentCertaintyLevel)
                writeSimulatedChoiceResponse(
                currentSimulatedChoiceResponse=window.mainExperiment.getSimulatedChoiceResponse(
                    experiment=currentExperiment, type="confirmation"))

                finishCurrentExperiment()

    # if window.mainExperiment.currentExperiment.decisionConsequences==True:
    #     finishCurrentExperiment()
        # setupSimulationExpChoicePage()

    # else:
    #     askAgain = True

def buttonBackSimulationExpChoicePageClicked():

    currentExperiment = window.mainExperiment.currentExperiment
    currentExperiment.preferredJourney = None
    window.mainExperiment.createNewTrialsExperiment(experiment = currentExperiment, nTrials = currentExperiment.nExtraLearningTrials, typeTrials = "extraLearning")
    window.mainExperiment.setExperimentStage(experiment = currentExperiment, stage = "extraLearning")
    setupSimulationExpPage(experiment = window.mainExperiment.currentExperiment)
    ui.stackedWidget.setCurrentWidget(ui.simulationExpPage)

def finishCurrentExperiment():


    # if mainExperiment.currentExperiment.expType == 4: #This is when the whole experiment finishes
    #     ui.stackedWidget.setCurrentWidget(ui.debriefPage)
    if window.mainExperiment.currentExperiment.expType == 1:

        if window.mainExperiment.currentExperiment.getId(random = True)<len(window.mainExperiment.experiments1):
            window.mainExperiment.runExperiment(experiment = window.mainExperiment.getExperiment(expType=1,experimentId = window.mainExperiment.currentExperiment.getId(random = True)+1, descriptive = False))

        else:
            window.mainExperiment.runExperiment(experiment=window.mainExperiment.getExperiment(expType=2,
                                                                                       experimentId=1, descriptive = False))

        #After finishing an experiment this defines what will be shown next
        if window.mainExperiment.currentExperiment.getId(random=True) == 1:

            setupExperimentDescription(experiment=window.mainExperiment.currentExperiment
                                       , grid=ui.simulationExpDescriptionGrid
                                       , folder="SimulatedExperiment/GeneralDescription")

            ui.stackedWidget.setCurrentWidget(ui.simulationExpDescriptionPage)

        else:

            setupScenarioDescriptionPage()
            ui.stackedWidget.setCurrentWidget(ui.scenarioDescriptionPage)


    elif window.mainExperiment.currentExperiment.expType == 2:

        if  window.mainExperiment.currentExperiment.getId(random = True, block = True) < len(window.mainExperiment.experiments2):
            window.mainExperiment.runExperiment(experiment=window.mainExperiment.getExperiment(expType=2,
                                                                                       experimentId= window.mainExperiment.currentExperiment.getId(random = True,block = True) + 1
                                                                                               , descriptive=False)
                                                )

        else:
            window.mainExperiment.runExperiment(experiment=window.mainExperiment.getExperiment(expType=3,
                                                                                       experimentId=1, descriptive = False)
                                                )

            # Before starting with the last simulated experiment block there is a break for participants.
            window.experimentBreak = True


        if window.mainExperiment.currentExperiment.getId(random=True) == 1:

            setupExperimentDescription(experiment=window.mainExperiment.currentExperiment
                                       , grid=ui.simulationExpDescriptionGrid
                                       , folder="SimulatedExperiment/GeneralDescription")

            ui.stackedWidget.setCurrentWidget(ui.simulationExpDescriptionPage)

        else:
            setupScenarioDescriptionPage()
            ui.stackedWidget.setCurrentWidget(ui.scenarioDescriptionPage)


        if window.experimentBreak is True:
            setupExperimentBreakPage()
            ui.stackedWidget.setCurrentWidget(ui.scenarioDescriptionPage)

    elif window.mainExperiment.currentExperiment.expType == 3:
        # setupExperimentBreakPage()
        if window.mainExperiment.currentExperiment.getId(random = True, block = True) < len(window.mainExperiment.experiments3):

            window.mainExperiment.runExperiment(experiment=window.mainExperiment.getExperiment(expType=3,
                                                                                       experimentId=window.mainExperiment.currentExperiment.getId(random = True,block = True) + 1
                                                                                               , descriptive = False)
                                                )

            if window.mainExperiment.currentExperiment.getId(random=True) == 1:

                setupExperimentDescription(experiment=window.mainExperiment.currentExperiment
                                           , grid=ui.simulationExpDescriptionGrid
                                           , folder="SimulatedExperiment/GeneralDescription")

                ui.stackedWidget.setCurrentWidget(ui.simulationExpDescriptionPage)

            else:

                setupScenarioDescriptionPage()
                ui.stackedWidget.setCurrentWidget(ui.scenarioDescriptionPage)



        else:   # This is when the decision from experience experiment finishes


            # mainExperiment.runExperiment(
            #     experiment=mainExperiment.getExperiment(experimentId=1, expType=1, descriptive=False, random=True))

            if window.descriptiveExperimentCondition == "descriptiveControl":
                setupProspectExpDescriptionPage()

            if window.descriptiveExperimentCondition == "descriptiveTreatmentCondition1":
                setupDecisionExpDescriptionPage()

            #The same page is used to show the description of the descriptive experiments.
            ui.stackedWidget.setCurrentWidget(ui.decisionExpDescriptionPage)

def tripSelectionGuidedLearning():

    # This will block the panel to choose a journey
    blockJourneyPanel(True)  # Block the panels where with the buttons to select the journey

    tripOrigin = None
    tripDestination = None

    #Origin
    if window.mainExperiment.currentExperiment.currentTrial.randomOrigin == "west":
        tripOrigin = window.westLocation

    else:
        tripOrigin = window.eastLocation

    #Destination

    if window.mainExperiment.currentExperiment.currentTrial.randomDestination == "west":
        tripDestination = window.westLocation

    else:
        tripDestination = window.eastLocation


    #Direction is assigned depending if we are in the phase of learning or simulation
    if window.mainExperiment.isCurrentExperimentStage("learning") or window.mainExperiment.isCurrentExperimentStage("extraLearning"):
        window.tripDirection = Direction(id = window.mainExperiment.currentExperiment.currentTrial.direction)

    if window.mainExperiment.isCurrentExperimentStage("consequences"):
        window.tripDirection = Direction(window.mainExperiment.getSimulatedChoiceResponse(experiment = window.mainExperiment.currentExperiment, type = "consequences").preferredRoute)


    if window.tripDirection.id == "counterclockwise":
        ui.directionCounterclockwiseSelectedIcon.manualClick()

    else:
        ui.directionClockwiseSelectedIcon.manualClick()

    tripGeneration(tripOrigin=tripOrigin, tripDestination=tripDestination, tripMode=window.busMode,
                   tripDirection=window.tripDirection)

def tripSelectionFreeLearning(): #Not add input because this function is connected with a button event

    tripOrigin = None
    tripDestination = None

    #Origin
    if window.mainExperiment.currentExperiment.currentTrial.randomOrigin == "west":
        tripOrigin = window.westLocation

    else:
        tripOrigin = window.eastLocation

    #Destination

    if window.mainExperiment.currentExperiment.currentTrial.randomDestination == "west":
        tripDestination = window.westLocation

    else:
        tripDestination = window.eastLocation

    journeyClickableLabelClicked = ui.journeyClickableGrid.sender()

    if isinstance(journeyClickableLabelClicked, ClickableOptionIcon):

        oneClickedLabel(journeyClickableLabelClicked)

        if journeyClickableLabelClicked.type == "direction":
            if journeyClickableLabelClicked.id == "clockwise":
                window.tripDirection = Direction("clockwise")
            if journeyClickableLabelClicked.id == "counterclockwise":
                window.tripDirection = Direction("counterclockwise")

    tripGeneration(tripOrigin = tripOrigin, tripDestination = tripDestination, tripMode = window.busMode, tripDirection = window.tripDirection)

def tripGeneration(tripOrigin, tripDestination, tripMode, tripDirection):

    window.tripOrigin = tripOrigin
    window.tripDestination = tripDestination
    window.tripMode = tripMode
    window.tripDirection = tripDirection

    if window.tripOrigin == None or window.tripDestination == None or window.tripDirection == None or window.tripMode == None:
        window.startJourney = None

    #If origin and destination are equal he cannot procede
    elif window.tripOrigin != None and window.tripDestination != None and window.its.equalPositions(window.tripOrigin, window.tripDestination):
        warningError = ""
        window.startJourney = None  # The button needs to be clicked again

    # If all the options are selected and the participant clicked the button to start the journey...
    elif window.startJourney != None:

        # Block the panels where with the buttons to select the journey
        blockStartJourneyPanel(True)
        blockJourneyPanel(True)

        ui.startJourneyButton.hide() #Hide the button to start the journey

        # Set Initial Position of the person depending the origin selected by the participant
        window.its.setPositionPerson(person=window.person, position=window.tripOrigin.position)
        window.person.finalLocation = window.tripDestination
        window.person.icon.show()

        if window.tripMode.id == window.busMode.id:

            #Now depending of the busRoute chosen there will be different outcomes
            busRoute = None # The bus route corresponding to the options chosen by the participant
            firstBusStop = None  # The bus stop where the passenger will take the bus
            lastBusStop = None
            targetedWaitingTime = None
            targetedTravelTime = None
            # busDispatchingDelay = None #Delay necessary for the targeted waiting time
            # busSpeed = None #Bus speed necessary for the targeted travel time

            if window.its.equalPositions(window.tripDestination, window.person.westLocation): #Going West Location
                if window.tripDirection.id == "clockwise":
                    busRoute = window.busRoute1Clockwise #The bus route corresponding to the options chosen by the participant
                    firstBusStop = window.stop2 #The bus stop where the passenger will take the bus
                    lastBusStop = window.stop1 #The bus stop where the passenger will leave the bus

                    # Depending on the direction of the route there are different targeted wiating and travel times
                    targetedTravelTime = window.mainExperiment.currentTrial.travelTimeClockwise
                    targetedWaitingTime = window.mainExperiment.currentTrial.waitingTimeClockwise

                if window.tripDirection.id == "counterclockwise":
                    busRoute = window.busRoute2Counterclockwise
                    firstBusStop = window.stop3  # The bus stop where the passenger will take the bus
                    lastBusStop = window.stop4  # The bus stop where the passenger will leave the bus

                    #Depending on the direcion of the route there are different targeted wiating and travel times
                    targetedWaitingTime = window.mainExperiment.currentTrial.waitingTimeCounterclockwise
                    targetedTravelTime = window.mainExperiment.currentTrial.travelTimeCounterclockwise

            if window.its.equalPositions(window.tripDestination,window.person.eastLocation): #Going to East Location
                if window.tripDirection.id == "clockwise":
                    busRoute = window.busRoute2Clockwise
                    firstBusStop = window.stop4  # The bus stop where the passenger will take the bus
                    lastBusStop = window.stop3  # The bus stop where the passenger will leave the bus

                    # Depending on the direcion of the route there are different targeted wiating and travel times
                    targetedTravelTime = window.mainExperiment.currentTrial.travelTimeClockwise
                    targetedWaitingTime = window.mainExperiment.currentTrial.waitingTimeClockwise


                if window.tripDirection.id == "counterclockwise":
                    busRoute = window.busRoute1Counterclockwise
                    firstBusStop = window.stop1 # The bus stop where the passenger will take the bus
                    lastBusStop = window.stop2  # The bus stop where the passenger will leave the bus

                    #Depending on the direcion of the route there are different targeted wiating and travel times
                    targetedWaitingTime = window.mainExperiment.currentTrial.waitingTimeCounterclockwise
                    targetedTravelTime = window.mainExperiment.currentTrial.travelTimeCounterclockwise

            # Calculate the speed of the bus necessary to achieve the targeted travel time. The new speed is set to the bus route
            busRoute.speed = window.its.calculateSpeed(origin=firstBusStop, destination=lastBusStop,
                                                 clockwise=window.tripDirection.isClockwise(),
                                                 travelTime=targetedTravelTime)

            # Calculate the delay necessary for the targeted waiting time
            busDispatchingDelay = window.its.calculateDispatchingDelay(targetedWaitingTime=targetedWaitingTime,
                                                                       busRoute=busRoute, person=window.person,
                                                                       busStop=firstBusStop)

            # Will launch a new bus run from the departure terminal to the arrival terminal in the time given by the delay.
            busRunGeneration(busRoute=busRoute, myTimer=window.completeBusRunTimer,
                             departureTime=busDispatchingDelay, targetSpeed = busRoute.speed)

            # The person walk to the bus stop
            if firstBusStop.isTreatmentStop() == False:
                personWalkingToBusStopTimer(stop=firstBusStop,
                                  clockwise=window.tripDirection.isClockwise(),
                                  person=window.person, myTimer=window.myTimerPersonWalking, its=window.its,
                                  timerInterval=window.timeInterval
                                  ,statusLbl = ui.simulationExpStatusLbl
                                , mainExperiment=window.mainExperiment)

            #If person move to a bus stop where there is real information
            else:
                personWalkingToBusStopInformationTimer(stop=firstBusStop,
                                            clockwise=window.tripDirection.isClockwise(),
                                            person=window.person, myTimer=window.myTimerPersonWalking, its=window.its,
                                            targetedWaitingTime = targetedWaitingTime,
                                            timerInterval=window.timeInterval
                                            ,statusLbl = ui.simulationExpStatusLbl
                                            , mainExperiment = window.mainExperiment)

            #There are three trip stages in this case

            firstWalkingTime = window.its.calculateTravelTime(origin=window.tripOrigin, destination=firstBusStop,
                                  clockwise=window.tripDirection.isClockwise(),speed = window.person.walkingSpeed)

            firstWalkingDistance = window.its.pathDistance(origin=window.tripOrigin, destination=firstBusStop,
                                  clockwise=window.tripDirection.isClockwise())

            tripStageWalkingFromOriginToFirstStop = TripStage(origin=window.tripOrigin, destination=firstBusStop,
                                                              direction=window.tripDirection, mode=window.walkingMode,
                                                              waitingTime = 0, travelTime = 0, walkingTime = firstWalkingTime,dwellTime = 0,
                                                              walkingDistance=firstWalkingDistance, travelDistance=0,
                                                              walkingSpeed = window.tripMode.speed, travelSpeed = 0
                                                              )

            # travelTime = window.its.calculateTravelTime(origin=firstBusStop, destination=lastBusStop,
            #                       clockwise=window.tripDirection.isClockwise(),speed = busRoute.speed)

            dwellTime = firstBusStop.getDwellTime() + lastBusStop.getDwellTime()

            travelDistance = window.its.pathDistance(origin=firstBusStop, destination=lastBusStop,
                                  clockwise=window.tripDirection.isClockwise())

            tripStageTravellingBusFromFirstStopToLastStop = TripStage(origin=firstBusStop, destination=lastBusStop,
                                                                      direction=window.tripDirection, mode=window.busMode,
                                                                      waitingTime = targetedWaitingTime, travelTime = targetedTravelTime, walkingTime = 0,dwellTime = dwellTime,
                                                                      walkingDistance = 0, travelDistance = travelDistance,
                                                                      walkingSpeed=0, travelSpeed=busRoute.speed)

            lastWalkingTime = window.its.calculateTravelTime(origin=lastBusStop, destination=window.tripDestination,
                                                     clockwise=window.tripDirection.isClockwise(),
                                                     speed=window.person.walkingSpeed)

            lastWalkingDistance = window.its.pathDistance(origin=lastBusStop, destination=window.tripDestination,
                                                     clockwise=window.tripDirection.isClockwise())

            tripStageWalkingFromLastStopToDestination = TripStage(origin=lastBusStop, destination=window.tripDestination,
                                                                  direction=window.tripDirection, mode=window.walkingMode,
                                                                  waitingTime = 0, travelTime = 0, walkingTime = lastWalkingTime, dwellTime = 0,
                                                                  walkingDistance = lastWalkingDistance, travelDistance = 0,
                                                                  walkingSpeed=window.tripMode.speed, travelSpeed=0)

            window.currentTrip = Trip([tripStageWalkingFromOriginToFirstStop,
                                       tripStageTravellingBusFromFirstStopToLastStop,
                                       tripStageWalkingFromLastStopToDestination])

        elif window.tripMode.id == window.walkingMode.id:

                if window.its.equalPositions(window.tripDestination, window.person.workLocation):
                    personWalkingToEastLocationTimer(destination=window.tripDestination.position, clockwise=window.tripDirection.isClockwise(),
                                         person=window.person,myTimer = window.myTimerPersonWalking,its = window.its, timerInterval = window.timeInterval)

                if window.its.equalPositions(window.tripDestination, window.person.westLocation):

                    personWalkingToWestLocationTimer(destination=window.tripDestination.position, clockwise=window.tripDirection.isClockwise(),
                                         person=window.person,myTimer = window.myTimerPersonWalking,its = window.its, timerInterval = window.timeInterval
                                                     , experiment = window.mainExperiment)

                walkingTime = window.its.calculateTravelTime(origin=window.tripOrigin, destination=window.tripDestination,
                                                                  clockwise=window.tripDirection.isClockwise(),
                                                                  speed=window.tripMode.speed)

                walkingDistance = window.its.pathDistance(origin=window.tripOrigin,
                                                             destination=window.tripDestination,
                                                             clockwise=window.tripDirection.isClockwise())

                tripStage = TripStage(origin=window.tripOrigin, destination=window.tripDestination,
                                      direction=window.tripDirection, mode=window.tripMode.speed, waitingTime=0, travelTime=0,dwellTime = 0,
                                      walkingTime=walkingTime, walkingDistance = walkingDistance, travelDistance = 0,
                                      walkingSpeed=window.tripMode.speed, travelSpeed=0)

                window.currentTrip = Trip([tripStage])

        elif window.tripMode.id == window.carMode.id:
                window.person.travellingInVehicle(window.car)
                personDrivingTimer(destination=window.tripDestination.position, clockwise=window.tripDirection.isClockwise(),
                                     person=window.person, car=window.car,myTimer = window.myTimerPersonWalking,its = window.its, timerInterval = window.timeInterval)

                travelTime = window.its.calculateTravelTime(origin=window.tripOrigin,
                                                             destination=window.tripDestination,
                                                             clockwise=window.tripDirection.isClockwise(),
                                                             speed=window.tripMode.speed)

                travelDistance = window.its.pathDistance(origin=window.tripOrigin,
                                                             destination=window.tripDestination,
                                                             clockwise=window.tripDirection.isClockwise())


                tripStage = TripStage(origin=window.tripOrigin, destination=window.tripDestination,
                                      direction=window.tripDirection, mode=window.tripMode, waitingTime=0, travelTime=travelTime,dwellTime = 0,
                                      walkingTime=0, walkingDistance = 0, travelDistance = travelDistance,
                                      walkingSpeed=0, travelSpeed=window.tripMode.speed)

                window.currentTrip = Trip([tripStage])


        elif window.tripMode.id == window.bikeMode.id:
                window.person.travellingInVehicle(window.bike)
                personBikingTimer(destination=window.tripDestination.position, clockwise=window.tripDirection.isClockwise(),
                              person=window.person, bike=window.bike, myTimer=window.myTimerPersonWalking, its=window.its,
                              timerInterval=window.timeInterval)
                travelTime = window.its.calculateTravelTime(origin=window.tripOrigin,
                                                            destination=window.tripDestination,
                                                            clockwise=window.tripDirection.isClockwise(),
                                                            speed=window.tripMode.speed)

                travelDistance = window.its.pathDistance(origin=window.tripOrigin,
                                                         destination=window.tripDestination,
                                                         clockwise=window.tripDirection.isClockwise())

                tripStage = TripStage(origin=window.tripOrigin, destination=window.tripDestination,
                                      direction=window.tripDirection, mode=window.tripMode, waitingTime=0,
                                      travelTime=travelTime,
                                      walkingTime=0,dwellTime = 0, walkingDistance = 0, travelDistance = travelDistance,
                                      walkingSpeed=0, travelSpeed=window.tripMode.speed)

                window.currentTrip = Trip([tripStage])


        # else:
        #     window.startJourney = None #The button needs to be clicked again

connectButtonsGridPanel(grid= ui.journeyClickableGrid, function = tripSelectionFreeLearning) #This method connect the button of the journey panel with the previos function (generate trips in the virtual Network)

def nextButtonExpSimulation():
    ui.stackedWidget.setCurrentIndex(ui.stackedWidget.currentIndex() + 1)  # Go to next page

# ***************   Bus Dispatching in the Transport Network *************************************** #

#A bus run is a trip between the departure and the arrival terminal

#Add a new bus in the bus route (each set of buses is a 'bus fleet')
def busRunGeneration(busRoute, myTimer, departureTime, targetSpeed):

    # setColoursBusIcons()
    if busRoute.nBuses == 0:
        busId = "Bus " + str(busRoute.nBuses)
        bus = Bus(id = busId,route = busRoute,icon = busRoute.icon,speed = targetSpeed,position = busRoute.departureTerminal.position)
        busRoute.addBus(bus = bus)

    busId = "Bus 0"

    trajectory = window.its.createTrajectory(origin=busRoute.buses[busId].position, # The last bus added in the bus fleet
                                              destination=busRoute.arrivalTerminal.position,
                                              clockwise=busRoute.direction.isClockwise(), speed=targetSpeed)['trajectory']

    startBusTripTimer(trajectory=trajectory, its=window.its, bus=busRoute.buses[busId], myTimer=myTimer,timerInterval = window.timeInterval
                     , departureTime = departureTime, person = window.person, personTimer = window.myTimerPersonWalking
                      , ui =ui, nextJourneyClicked = nextJourneyClicked
                      , statusLbl = ui.simulationExpStatusLbl, mainExperiment = window.mainExperiment
                     , lastUpdateLearningPhase =  lastUpdateLearningPhase)

def resetSimulationExpPage():

    #Timer Initialization
    createTimers()
    stopTimers()

    #Vehicles
    updateVehicleIcons()


    window.tripOrigin = None
    window.tripDestination = None
    window.tripDirection = None
    window.tripMode = None
    window.startJourney = None

    # #Remove icons in all the buses of the route
    # for busRoute in window.realNetwork.busRoutes:
    #     for busKey in busRoute.buses.keys():
    #         busRoute.buses[busKey].icon.setParent(None)

    # window.realNetwork.busRoutes = window.busRoutes

    #Journey Option Panel Initialization

    resetColorButtonsJourneyPanel(grid=ui.journeyClickableGrid)


    if window.learningMode == "free":
        # Unblocked the panels with options to start a new Journey
        blockStartJourneyPanel(False)
        blockJourneyPanel(False)
    else: #Free Learning is false
        blockJourneyPanel(True)
        blockStartJourneyPanel(False)


    # connectButtonsGridPanel(grid= ui.journeyClickableGrid, function = tripSelectionFreeLearning)

# ***************   (Page 4) Experiment: Decision from description *************************************** #

def showPanelsNextDecisionScenario(boolean):

    if boolean == False:
        setBackgroundColorQLabel(QLabel = ui.pushButtonsDecisionSeparateExpPanel, colorString = "white")
        ui.pushButtonsDecisionSeparateExpPanel.setFrameShape(QFrame.NoFrame)
        ui.pushButtonsDecisionSeparateExpPanel.raise_()
        ui.nextDescriptiveQuestionLbl.setVisible(False)

    if boolean == True:
        ui.pushButtonsDecisionSeparateExpPanel.setAutoFillBackground(False)
        ui.pushButtonsDecisionSeparateExpPanel.setFrameShape(QFrame.Box)
        ui.pushButtonsDecisionSeparateExpPanel.lower()
        ui.nextDescriptiveQuestionLbl.setVisible(True)

def setupDecisionExpDescriptionPage():

    #Title Page

    if window.mainExperiment.languageCondition == "english":
        setTitlePage(grid = ui.decisionExpDescriptionTitleGrid, text = "Third Experimental Block"
                     , capitalLetters = True, fontFactor=window.fontFactor, fontLetter=window.fontLetter)

    if window.mainExperiment.languageCondition == "spanish":
        setTitlePage(grid = ui.decisionExpDescriptionTitleGrid, text = "Tercer Bloque Experimental"
                     , capitalLetters = True, fontFactor=window.fontFactor, fontLetter=window.fontLetter)

    # Description Page

    setupExperimentDescription(descriptive = True, grid=ui.decisionExpDescriptionGrid
                               , experiment=window.mainExperiment.currentExperiment
                               , folder="DescriptiveExperiment/DecisionTableExp",fontIncreaseFactor = 1.3)

def nextButtonDecisionExpDescriptionPage():

    if window.descriptiveExperimentCondition == "descriptiveControl":
        setupProspectExpPage()
        ui.stackedWidget.setCurrentWidget(ui.prospectExpPage)

    if window.descriptiveExperimentCondition == "descriptiveTreatmentCondition1":
        setupDecisionExpPage(descriptive = True)
        ui.stackedWidget.setCurrentWidget(ui.decisionSeparateExpPage)

# ***************   (Page 4a) Decision from Description Experiment with Tables(trips and days of the week) *************************************** #

#These variables holds the time when the choice is made and elaborated in both experimental conditions of the descriptive experiments
window.startingTimeDescriptiveChoiceResponse = None
window.endingTimeDescriptiveChoiceResponse = None

# Update travel and waiting times in each dy of the week

#Days of the week

daysTextLabels = ["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"]
daysNumLabels = [1,2,3,4,5,6,7]

nDays = 5

window.nExp1 = 1
window.nExp2 = 0
window.nExp3 = 0
window.nDescriptiveExperiments = window.nExp1 +window.nExp2 +window.nExp3

def writeDescriptiveChoiceResponse(currentDescriptiveChoiceResponse):

    currentExperiment = window.mainExperiment.currentExperiment
    experimentalCondition = window.mainExperiment.descriptiveExperimentCondition
    window.endingTimeDescriptiveChoiceResponse = datetime.now().strftime('%H%M%S')

    window.mainExperiment.writeDescriptiveChoiceResponseCsv(experiment=window.mainExperiment.currentExperiment,
                                                 descriptiveChoiceResponse=currentDescriptiveChoiceResponse,
                                                 experimentalCondition = window.mainExperiment.descriptiveExperimentCondition)


    window.mainExperiment.writeReactionTimeResponse(participantId = window.currentParticipant.id
                                                    , computerId = window.computerId
                                                    , experimentalSession = window.experimentalSession
                                                    , experimentCountry = window.experimentCountry
                                                    , order = currentExperiment.descriptionOrderId
                                                    , blockOrder = currentExperiment.descriptionOrderId #Relative order (intrablock)
                                                    , dp = currentExperiment.dp
                                                    ,blockDp = currentExperiment.id #Relative id of the scenario (intrablock)

                                                    ,experimentBlock=currentExperiment.expType
                                                    ,experimentType="descriptive"
                                                    ,experimentalCondition = experimentalCondition
                                                    ,experimentStage="choice"

                                                    ,startingTime = window.startingTimeDescriptiveChoiceResponse
                                                    ,endingTime = window.endingTimeDescriptiveChoiceResponse)

def createTimeTableWidget(timeTableWidget,trials, timeTableTag,treatmentDescriptiveCondition = False):

    # Design of Table Widgets
    for table in [ui.altADecisionExpTableWidget,ui.altBDecisionExpTableWidget]:
        table.setFrameStyle(QFrame.NoFrame)
        table.resizeColumnsToContents()
        table.setAutoFillBackground(False)
        # table.setStyleSheet("QTableWidget {background-color: transparent;}")
        #               "QHeaderView::section {background-color: yellow;}"
        #               "QHeaderView {background-color: yellow;}"
        #               "QTableCornerButton::section {background-color: yellow;}"
        #                     )

        # table.setRowCount(2)
        # table.setColumnCount(4)
        # table.setFrameStyle(QtGui.QFrame.NoFrame)
    # ui.altATableWidget.setAutoFillBackground(False)



    colWidth = 80
    rowWidth = 30

    #Create Rows of the Table
    rows = 0
    if treatmentDescriptiveCondition == False:
        timeTableWidget.insertRow(0)
        timeTableWidget.insertRow(1)
        if window.mainExperiment.languageCondition == "english": timeTableWidget.setVerticalHeaderLabels(["Waiting Time (mins)", "In-vehicle Time (mins)"])
        if window.mainExperiment.languageCondition == "spanish": timeTableWidget.setVerticalHeaderLabels(["Tiempo de Espera (mins)", "Tiempo en el Bus (mins)"])
        timeTableWidget.setRowCount(2)
        rows = 2

    if treatmentDescriptiveCondition == True:
        timeTableWidget.insertRow(0)
        timeTableWidget.insertRow(1)
        timeTableWidget.insertRow(2)
        timeTableWidget.setVerticalHeaderLabels(["Waiting Time (mins)", "In-vehicle Time (mins)", "Journey Time (mins)"])
        if window.mainExperiment.languageCondition == "spanish": timeTableWidget.setVerticalHeaderLabels(["Tiempo de Espera (mins)", "Tiempo en el Bus (mins)", "Tiempo Total (mins)" ])
        timeTableWidget.setRowCount(3)
        rows = 3


    #Set Height of the rows
    for row in range(0,rows):
        timeTableWidget.setRowHeight(row,rowWidth)



    # Filling col labels with the same days defined for the animations
    # dayLabels = []
    # counter = 0
    # for trial in trials:
    #     counter +=1
    #     timeTableWidget.insertColumn(counter - 1)
    #     dayLabels.append("Day " + str(trial.nTrial))

    font = QFont(window.fontLetter, window.fontFactor * 16)
    nDays = len(trials)
    dayLabels = []
    for day in range(1, nDays+1):
        # dayLabel = str(dayLabel)
        timeTableWidget.insertColumn(day - 1)
        tripLbl = QTableWidgetItem()
        tripLbl.setFont(font)

        if window.mainExperiment.languageCondition == "english": tripLbl.setText("Trip " + str(day))

        if window.mainExperiment.languageCondition == "spanish": tripLbl.setText("Viaje " + str(day))

        # dayLabels.append(tripLbl.text())
        timeTableWidget.setHorizontalHeaderItem(day-1,tripLbl)

        trials[day-1].descriptiveDay = day

        #To manually set the width of the columns
        # timeTableWidget.setColumnWidth(day-1, colWidth)

        # timeTableWidget.horizontalHeader().setResizeMode(day-1, QHeaderView.ResizeToContents)
        timeTableWidget.horizontalHeader().setSectionResizeMode(day - 1, QHeaderView.ResizeToContents)

    timeTableWidget.setFont(font)

    timeTableWidget.setColumnCount(nDays)
    # timeTableWidget.setHorizontalHeaderLabels(dayLabels)

def fillTimeTableWidget(timeTableWidget,trials, timeTableTag,treatmentDescriptiveCondition = False):

    counter = 0
    for trial in trials:

        digits = 0
        waitingTime = int(round(trial.waitingTime,digits))
        travelTime = int(round(trial.travelTime,digits))

        timeTableWidget.setItem(0,counter,QTableWidgetItem(str(waitingTime)))
        timeTableWidget.setItem(1,counter, QTableWidgetItem(str(travelTime)))

        if treatmentDescriptiveCondition == False:
            for item in [timeTableWidget.item(0,counter),timeTableWidget.item(1,counter)]:
                item.setTextAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)

        if treatmentDescriptiveCondition == True:
            journeyTime = int(waitingTime + travelTime)
            timeTableWidget.setItem(2, counter, QTableWidgetItem(str(journeyTime)))
            for item in [timeTableWidget.item(0,counter),timeTableWidget.item(1,counter),timeTableWidget.item(2,counter)]:
                item.setTextAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)

        # timeTableWidget.setItem(2,counter, QtGui.QTableWidgetItem(str(round(trial.journeyTime,1))))

        counter+=1
        # timeTableWidget.setItem(0,trial.nTrial-1,QtGui.QTableWidgetItem(travelTime))
        # timeTableWidget.setItem(0,trial.nTrial-1,QtGui.QTableWidgetItem(journeyTime))

def generateTimeTableWidget(timeTableWidget,timeTableTag, trials):

    # treatmentDescriptiveCondition = False
    # if window.descriptiveExperimentCondition == "descriptiveTreatmentCondition1":
    #     treatmentDescriptiveCondition = False


    # createTimeTableWidget(timeTableWidget = timeTableWidget,timeTableTag = timeTableTag, trials =  trials,treatmentDescriptiveCondition = treatmentDescriptiveCondition)
    # fillTimeTableWidget(timeTableWidget = timeTableWidget,timeTableTag = timeTableTag, trials = trials,treatmentDescriptiveCondition =treatmentDescriptiveCondition)

    createTimeTableWidget(timeTableWidget=timeTableWidget, timeTableTag=timeTableTag, trials=trials)
    fillTimeTableWidget(timeTableWidget=timeTableWidget, timeTableTag=timeTableTag, trials=trials)



    #Print in Descriptive Learning Trial File
    dayCounter = 0
    for trial in trials:
        trial.descriptiveTable = timeTableTag
        descriptiveLearningResponse = window.mainExperiment.getDescriptiveLearningResponse(experiment =window.mainExperiment.currentExperiment
        , trial = trial)
        window.mainExperiment.writeDescriptiveLearningResponseCsv(experiment =window.mainExperiment.currentExperiment,experimentalCondition = window.mainExperiment.descriptiveExperimentCondition
                                                                  , descriptiveLearningResponse = descriptiveLearningResponse)

def updateTimeChoiceSets(experiment):

    window.startingTimeDescriptiveChoiceResponse = datetime.now().strftime('%H%M%S')

    trialsClockwise = []
    trialsCounterclockwise = []

    for trial in experiment.descriptiveTrials:

        if trial.type == "descriptive":
            if isClockwise(trial.direction):
                trialsClockwise.append(trial)
            else:
                trialsCounterclockwise.append(trial)

    ui.altADecisionExpTitleLbl.setAutoFillBackground(False)
    ui.altBDecisionExpTitleLbl.setAutoFillBackground(False)


    if experiment.treatmentDescriptiveOption == "A":
        if experiment.treatmentDirection == "clockwise":
            generateTimeTableWidget(timeTableWidget=ui.altADecisionExpTableWidget, timeTableTag = "A", trials=trialsClockwise)
            generateTimeTableWidget(timeTableWidget=ui.altBDecisionExpTableWidget, timeTableTag = "B", trials=trialsCounterclockwise)
        else:
            generateTimeTableWidget(timeTableWidget=ui.altADecisionExpTableWidget, timeTableTag = "A", trials=trialsCounterclockwise)
            generateTimeTableWidget(timeTableWidget=ui.altBDecisionExpTableWidget, timeTableTag = "B", trials=trialsClockwise)

    else:
        if experiment.treatmentDirection == "clockwise":
            generateTimeTableWidget(timeTableWidget=ui.altADecisionExpTableWidget, timeTableTag = "A", trials=trialsCounterclockwise)
            generateTimeTableWidget(timeTableWidget=ui.altBDecisionExpTableWidget, timeTableTag = "B", trials=trialsClockwise)

        else:
            generateTimeTableWidget(timeTableWidget=ui.altADecisionExpTableWidget, timeTableTag = "A", trials=trialsClockwise)
            generateTimeTableWidget(timeTableWidget=ui.altBDecisionExpTableWidget, timeTableTag = "B", trials=trialsCounterclockwise)

    expTag = ""

    if window.mainExperiment.languageCondition == "spanish": expTag = "Tercer Bloque Experimental"
    if window.mainExperiment.languageCondition == "english": expTag = "Third Experimental Block"

def preferredDescriptiveJourneySelection():

    preferredProspectJourneyClickableLabelClicked = ui.preferredProspectJourneyClickableGrid.sender()

    if isinstance(preferredProspectJourneyClickableLabelClicked, ClickableOptionIcon):

        oneClickedLabel(preferredProspectJourneyClickableLabelClicked)

        #Now we show the panel to go to the next question
        showPanelsNextDecisionScenario(True)

        if preferredProspectJourneyClickableLabelClicked.type == "alternative":
            if preferredProspectJourneyClickableLabelClicked.id == "A":
                setBackgroundColorQLabel(QLabel=ui.altADecisionExpTitleLbl, colorString="yellow")
                ui.altBProspectExpTitleLbl.setAutoFillBackground(False)
                # ui.altAPanel.lower()
                window.mainExperiment.currentExperiment.setPreferredDescriptiveJourney("A")

            if preferredProspectJourneyClickableLabelClicked.id == "B":
                setBackgroundColorQLabel(QLabel=ui.altBDecisionExpTitleLbl, colorString="yellow")
                ui.altADecisionExpTitleLbl.setAutoFillBackground(False)
                # ui.altBPanel.lower()
                window.mainExperiment.currentExperiment.setPreferredDescriptiveJourney("B")

        #If the perosn is in the last scenario, the button next and the instructions will change

        if window.nDescriptiveExperiments == window.totalChoiceSets:

            instruction = ""

            if window.mainExperiment.languageCondition == "english":

                ui.buttonNextDecisionSeparateExpPage.setText("Finish Experiment")

                instruction = updateInstruction(
                    experiment=window.mainExperiment.currentExperiment
                    , txtInstructions="finishDescriptiveExperimentENG.html"
                    , folder="DescriptiveExperiment/DecisionTableExp")

            if window.mainExperiment.languageCondition == "spanish":
                ui.buttonNextDecisionSeparateExpPage.setText("Terminar Experimento")

                instruction = updateInstruction(
                    experiment=window.mainExperiment.currentExperiment
                    , txtInstructions="finishDescriptiveExperimentSPA.html"
                    , folder="DescriptiveExperiment/DecisionTableExp")

            ui.nextDescriptiveQuestionLbl.setText(instruction)

def creationPreferredDescriptiveJourneyPanel(function, grid):

    # Directions (Counterclockwise, clockwise)
    ui.routeAPreferred = ClickableOptionIcon(parent = ui.decisionSeparateExpPanel, type = "alternative", id = "A", path= "",myGrid = ui.preferredDescriptiveJourneyGrid)
    ui.routeBPreferred = ClickableOptionIcon(parent = ui.decisionSeparateExpPanel, type = "alternative", id = "B", path= "",myGrid = ui.preferredDescriptiveJourneyGrid)

    if window.mainExperiment.languageCondition == "english":
        ui.routeAPreferred.setText("Route A")
        ui.altADecisionExpTitleLbl.setText("Route A")
        ui.routeBPreferred.setText("Route B")
        ui.altBDecisionExpTitleLbl.setText("Route B")

    if window.mainExperiment.languageCondition == "spanish":
        ui.routeAPreferred.setText("Ruta A")
        ui.altADecisionExpTitleLbl.setText("Ruta A")
        ui.routeBPreferred.setText("Ruta B")
        ui.altBDecisionExpTitleLbl.setText("Ruta B")


    for label in [ui.routeAPreferred,ui.routeBPreferred]:
        label.setFont(QFont(window.fontLetter, window.fontFactor*30, QFont.Bold))
        label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)

    addRowIconsGrid(nIcons = 2, nameRow = "Direction",grid= ui.preferredDescriptiveJourneyGrid,nRow=0, width = window.iconJourneyPanelWidth, height = window.iconJourneyPanelHeight
                    , icons= [ui.routeAPreferred,ui.routeBPreferred])

    if window.mainExperiment.languageCondition == "english":
        ui.directionGridLbl.setText("Route   ")

    if window.mainExperiment.languageCondition == "spanish":
        ui.directionGridLbl.setText("Ruta   ")

    ui.directionGridLbl.setFont(QFont(window.fontLetter, 24, QFont.Bold))

    connectButtonsGridPanel(grid, function)

def updateProgressBarDecisionExpPage(progress,sliderBarQLabel, sliderBar):

    sliderBar.setValue(progress)

    expTag = ""

    if window.mainExperiment.languageCondition == "spanish":
        expTag = "Tercer Bloque Experimental"

        sliderBarQLabel.setText("Escenarios Completados: " + str(int(window.nDescriptiveExperiments-1)) + " de " + str(
            window.totalChoiceSets) + " (" + expTag + ")")

    if window.mainExperiment.languageCondition == "english":
        expTag = "Third Experimental Block"
        sliderBarQLabel.setText("Completed Scenarios: " + str(int(window.nDescriptiveExperiments-1)) + " out of " + str(
            window.totalChoiceSets) + " (" + expTag + ")")

def setupDecisionExpPage(descriptive = False):

    #Scenario Page
    ui.decisionSeparateExpProgressBar.setStyleSheet(window.styleProgressBar3)

    ui.decisionSeparateExpProgressBar.setValue(0)

    #Randomize order of the questions (not by block in this case)
    window.mainExperiment.setOrderIds(mode="all", descriptive = True)

    expTag = ""
    preferredDescriptiveRouteInstructions = ""
    nextDescriptiveQuestionInstructions = ""
    if window.mainExperiment.languageCondition == "spanish":

        # Next Button
        ui.buttonNextDecisionSeparateExpPage.setText("Siguiente Escenario")

        #Progress Bar initialization
        expTag = "Tercer Bloque Experimental"
        ui.nDecisionExpLbl.setText("Escenarios Completados: " + str(int(window.nDescriptiveExperiments - 1)) + " de " + str(
            window.totalChoiceSets) + " (" + expTag + ")")

        # Infromation of the text panels (this need to be after the change in the buttons
        preferredDescriptiveRouteInstructions = updateInstruction(
            experiment=window.mainExperiment.currentExperiment
            , txtInstructions="preferredDescriptiveRouteInstructionsSPA.html"
            , folder="DescriptiveExperiment/DecisionTableExp")

        nextDescriptiveQuestionInstructions = updateInstruction(
            experiment=window.mainExperiment.currentExperiment
            , txtInstructions="nextDescriptiveQuestionInstructionsSPA.html"
            , folder="DescriptiveExperiment/DecisionTableExp")

    if window.mainExperiment.languageCondition == "english":
        # Next Button
        ui.buttonNextDecisionSeparateExpPage.setText("Next Scenario")

        # Progress Bar initialization
        expTag = "Third Experimental Block"
        ui.nDecisionExpLbl.setText("Completed Scenarios: " + str(window.nDescriptiveExperiments - 1) + " out of " + str(
            window.totalChoiceSets) + " (" + expTag + ")")


        # Infromation of the text panels (this need to be after the change in the buttons

        preferredDescriptiveRouteInstructions = updateInstruction(
            experiment=window.mainExperiment.currentExperiment
        , txtInstructions="preferredDescriptiveRouteInstructionsENG.html"
        , folder = "DescriptiveExperiment/DecisionTableExp")

        nextDescriptiveQuestionInstructions = updateInstruction(
            experiment=window.mainExperiment.currentExperiment
            , txtInstructions="nextDescriptiveQuestionInstructionsENG.html"
            , folder="DescriptiveExperiment/DecisionTableExp")

    ui.preferredDescriptiveRouteLbl.setText(preferredDescriptiveRouteInstructions)
    ui.nextDescriptiveQuestionLbl.setText(nextDescriptiveQuestionInstructions)

    #Font of messages

    for label in [ui.preferredDescriptiveRouteLbl,ui.nextDescriptiveQuestionLbl]:
        label.setFont(QFont(window.fontLetter, window.fontFactor*18))
        label.setWordWrap(True)
        # label.heig.setFixedHeight(20)
        label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignCenter)
        label.setFrameShape(QFrame.Box)

    #We first hide the button to go to the next Scenario as the person need first to select an option
    showPanelsNextDecisionScenario(False)

    #Panels of the tables
    ui.altAPanel.raise_()
    ui.altBPanel.raise_()

    for lblTitle in [ui.altADecisionExpTitleLbl,ui.altBDecisionExpTitleLbl]:
        lblTitle.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignCenter)
        lblTitle.setFont(QFont(window.fontLetter, window.fontFactor*18,QFont.Bold))
        lblTitle.setFrameShape(QFrame.Box)

    ui.nDecisionExpLbl.setFont(QFont(window.fontLetter, window.fontFactor * 18, QFont.Bold))
    ui.nDecisionExpLbl.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignBottom)

    #We start showing the first experiment of the list
    window.mainExperiment.currentExperiment = window.mainExperiment.getExperiment(experimentId=1, descriptive = True, random = True)

    updateTimeChoiceSets(experiment=window.mainExperiment.currentExperiment)

    # Panel to choose the preferred route

    creationPreferredDescriptiveJourneyPanel(grid=ui.preferredDescriptiveJourneyClickableGrid,
                                             function=preferredDescriptiveJourneySelection)

def nextButtonDecisionSeparateExpPage():

    if window.mainExperiment.currentExperiment.preferredDescriptiveJourney is not None:

        resetColorButtonsJourneyPanel(grid = ui.preferredDescriptiveJourneyClickableGrid)

        # if ui.radioButtonAltA.isChecked() or ui.radioButtonAltB.isChecked():

        writeDescriptiveChoiceResponse(currentDescriptiveChoiceResponse=window.mainExperiment.getDescriptiveChoiceResponse(
            experiment=window.mainExperiment.currentExperiment))

        if window.nDescriptiveExperiments == window.totalChoiceSets:
            ui.stackedWidget.setCurrentWidget(ui.demographicsPage)

        else:
            window.mainExperiment.currentExperiment = window.mainExperiment.getExperiment(experimentId = window.mainExperiment.currentExperiment.descriptionOrderId+1, descriptive = True)
            updateTimeChoiceSets(experiment=window.mainExperiment.currentExperiment)
            showPanelsNextDecisionScenario(False)

        window.nDescriptiveExperiments += 1

        # Update the bar of completed scenarios
        progress = round(100 * (window.nDescriptiveExperiments - 1) / window.totalChoiceSets)
        updateProgressBarDecisionExpPage(progress=progress, sliderBarQLabel=ui.nDecisionExpLbl,
                                         sliderBar=ui.decisionSeparateExpProgressBar)


        # if window.nExp1 < len(window.mainExperiment.experiments1):
        #     window.nExp1 += 1
        #     window.mainExperiment.currentExperiment = window.mainExperiment.experiments1[window.nExp1-1]
        #     updateTimeChoiceSets(experiment = window.mainExperiment.currentExperiment)
        #
        # elif window.nExp2 < len(window.mainExperiment.experiments2):
        #     window.nExp2 += 1
        #     window.mainExperiment.currentExperiment = window.mainExperiment.experiments2[window.nExp2-1]
        #     updateTimeChoiceSets(experiment = window.mainExperiment.currentExperiment)
        #
        # elif window.nExp3 < len(window.mainExperiment.experiments3):
        #     window.nExp3 += 1
        #     window.mainExperiment.currentExperiment = window.mainExperiment.experiments3[window.nExp3-1]
        #     updateTimeChoiceSets(experiment = window.mainExperiment.currentExperiment)
        #     # ui.stackedWidget.setCurrentIndex(ui.stackedWidget.currentIndex() + 1)  # Go to next page
        # window.nDescriptiveExperiments = window.nExp1 + window.nExp2 + window.nExp3

# ***************   (Page 4b) Experiment: Decision from description Experiment with Prospects  *************************************** #

def showSecondProspectConsequence(boolean,alternative):

    show = boolean

    if alternative == "A":
        ui.altAWaitingTime2Lbl.setVisible(show)
        ui.altATravelTime2Lbl.setVisible(show)
        ui.altAProbWaitingTime2Lbl.setVisible(show)
        ui.altAProbTravelTime2Lbl.setVisible(show)

    if alternative == "B":
        ui.altBWaitingTime2Lbl.setVisible(show)
        ui.altBTravelTime2Lbl.setVisible(show)
        ui.altBProbWaitingTime2Lbl.setVisible(show)
        ui.altBProbTravelTime2Lbl.setVisible(show)

def showConsequencePanels(type, alternative, twoConsequences):

    # TwoConsequences is a boolean taking the value of true if the prospect alternative has two consequences, otherwise it has just one.

    if twoConsequences == False:

        if alternative == "A":

            if type == "waiting":
                ui.altAWaitingTimePanel.setVisible(True)
                # ui.altAWaitingTimePanel.setFrameShape(QFrame.Box)

            if type == "travel":
                ui.altATravelTimePanel.setVisible(True)

        if alternative == "B":

            if type == "waiting":
                ui.altBWaitingTimePanel.setVisible(True)

            if type == "travel":
                ui.altBTravelTimePanel.setVisible(True)

    if twoConsequences == True:

        if alternative == "A":

            if type == "waiting":
                ui.altAWaitingTime1Panel.setVisible(True)
                ui.altAWaitingTime2Panel.setVisible(True)

            if type == "travel":
                ui.altATravelTime1Panel.setVisible(True)
                ui.altATravelTime2Panel.setVisible(True)

        if alternative == "B":

            if type == "waiting":
                ui.altBWaitingTime1Panel.setVisible(True)
                ui.altBWaitingTime2Panel.setVisible(True)

            if type == "travel":
                ui.altBTravelTime1Panel.setVisible(True)
                ui.altBTravelTime2Panel.setVisible(True)

def showConsequenceText(type, alternative, consequence, prob, twoConsequences, language):

    # Display text for the prospect's description

    consequenceStartLabel = None
    consequenceEndLabel = None
    situationLabel = None
    blankLines = None


    if twoConsequences == False:

        blankLines = ""

        if language == "english":
            consequenceStartLabel = "-"
            consequenceEndLabel = " for sure"

            if type == "waiting":
                situationLabel = "Wait "

            if type == "travel":
                situationLabel = "Travel "

            valueLabel = getValueTimeProspectConsequence(value=consequence, unit=True,
                                                         shortUnit=True, language="english")


        if language == "spanish":
            consequenceStartLabel = ""
            consequenceEndLabel = " seguro"

            if type == "waiting":
                situationLabel = "Esperar "

            if type == "travel":
                situationLabel = "Viajar "

            valueLabel = getValueTimeProspectConsequence(value=consequence, unit=True,
                                                         shortUnit=True, language="spanish")

    if twoConsequences == True:

        blankLines = "\n" + "\n"

        if language == "english":
            consequenceStartLabel = "-" + getValueTimeProspectProbability(prob) + " chance to "
            consequenceEndLabel = ""
            valueLabel = getValueTimeProspectConsequence(value=consequence, unit=True,
                                                         shortUnit=True, language="english")

            if type == "waiting":
                situationLabel = "wait "

            if type == "travel":
                situationLabel = "travel "

        if language == "spanish":
            consequenceStartLabel = "-"  + getValueTimeProspectProbability(prob) + " de probabilidad de "
            consequenceEndLabel = ""

            valueLabel = getValueTimeProspectConsequence(value=consequence, unit=True,
                                                         shortUnit=True, language="spanish")

            if type == "waiting":
                situationLabel = "esperar "

            if type == "travel":
                situationLabel = "viajar "


    #The code below is common for the prospects' visualization

    # blankLine = \n


    if alternative == "A":

        if type == "waiting":

            currentTextLabel = ui.altAWaitingProspectLbl.text()

            if currentTextLabel == "": blankLines = ""
            else: blankLines = blankLines

            ui.altAWaitingProspectLbl.setText(currentTextLabel +  blankLines + consequenceStartLabel + situationLabel + valueLabel + consequenceEndLabel)

        if type == "travel":

            currentTextLabel = ui.altATravelProspectLbl.text()

            if currentTextLabel == "":
                blankLines = ""
            else:
                blankLines = blankLines

            ui.altATravelProspectLbl.setText(currentTextLabel +  blankLines + consequenceStartLabel + situationLabel + valueLabel + consequenceEndLabel)

    if alternative == "B":

        if type == "waiting":

            currentTextLabel = ui.altBWaitingProspectLbl.text()

            if currentTextLabel == "":
                blankLines = ""
            else:
                blankLines = blankLines

            ui.altBWaitingProspectLbl.setText(currentTextLabel +  blankLines + consequenceStartLabel + situationLabel + valueLabel + consequenceEndLabel)

        if type == "travel":

            currentTextLabel = ui.altBTravelProspectLbl.text()

            if currentTextLabel == "":
                blankLines = ""
            else:
                blankLines = blankLines

            ui.altBTravelProspectLbl.setText(currentTextLabel + blankLines + consequenceStartLabel + situationLabel + valueLabel + consequenceEndLabel)

def hideAllProspectPanels(prospectOptionTag):

    if prospectOptionTag == "A":

        for panel in [ui.altATravelTime1Panel,ui.altATravelTime2Panel,ui.altATravelTimePanel
                      ,ui.altAWaitingTime1Panel,ui.altAWaitingTime2Panel,ui.altAWaitingTimePanel]:

            panel.setVisible(False)

    if prospectOptionTag == "B":

        for panel in [ui.altBTravelTime1Panel, ui.altBTravelTime2Panel, ui.altBTravelTimePanel
        , ui.altBWaitingTime1Panel, ui.altBWaitingTime2Panel, ui.altBWaitingTimePanel]:

            panel.setVisible(False)

        # label.setFrameShape(QFrame.NoFrame)
        # label.lower()

def getValueTimeProspectProbability(value, language = None, unit = True, shortUnit = True):

    unitLabel = ""

    if shortUnit == True:
        unitLabel = "%"

    elif shortUnit == False:

        if language == "english":
            unitLabel = "% chances"
        if language == "spanish":
            unitLabel = "% de probabilidad"

    # Time Prospect's value

    if value == "":
        return ""

    elif unit == True:
        return str(int(round(value*100))) + "" + unitLabel

    else:
        return str(int(round(value*100)))

def getValueTimeProspectConsequence(value, language = None, unit = True, shortUnit = True):

    unitLabel = ""

    if shortUnit == True:
        unitLabel = "min"

    elif shortUnit == False:

        if language == "english":
            unitLabel = "minute(s)"
        if language == "spanish":
            unitLabel = "minuto(s)"

    #Time Prospect's value

    if value == "":
        return ""

    elif unit == True:
        return str(int(round(value,0))) + " " + unitLabel

    else:
        return str(int(round(value, 0)))

def createProspectWidget(trials, prospectOptionTag, experiment):

    # WE first hide all panels separating the time prospect shown to the user.
    hideAllProspectPanels(prospectOptionTag)

    prospectDescriptionSizeLbl = 15
    numbersFontSizeLbl = 16

    if prospectOptionTag == "A":

        #Values of the prospects
        for label in [ui.altAWaitingTime1Lbl, ui.altAWaitingTime2Lbl,
            ui.altATravelTime1Lbl, ui.altATravelTime2Lbl]:
            label.setFont(QFont(window.fontLetter, window.fontFactor * numbersFontSizeLbl))
            label.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
            label.setFrameShape(QFrame.NoFrame)
            label.setText("")

        #Probabitlies of the prospects

        for label in [ui.altAProbWaitingTime1Lbl, ui.altAProbWaitingTime2Lbl, ui.altAProbTravelTime1Lbl, ui.altAProbTravelTime2Lbl]:
            label.setFont(QFont(window.fontLetter, window.fontFactor * numbersFontSizeLbl))
            label.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
            label.setFrameShape(QFrame.NoFrame)
            label.setText("")

        #Panel to divide prospects
        for panel in [ui.altAWaitingTime1Panel,ui.altAWaitingTime2Panel, ui.altAWaitingTimePanel
                     ,ui.altATravelTime1Panel,ui.altATravelTime2Panel,ui.altATravelTimePanel]:

            panel.setText("")
            panel.setFrameShape(QFrame.Box)



        #Text shown in the prospects' descriptions

        for prospectLbl in [ui.altAWaitingProspectLbl, ui.altATravelProspectLbl, ui.altAWaitingProspectLbl, ui.altATravelProspectLbl]:
            prospectLbl.setFont(QFont(window.fontLetter, window.fontFactor * prospectDescriptionSizeLbl))
            prospectLbl.setWordWrap(True)
            prospectLbl.setText("")
            prospectLbl.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
            prospectLbl.setFrameShape(QFrame.Box)


                # ui.altAWaitingCircleLbl.raise_()
        # pixMapAltA = QtGui.QPixmap(pathCircleA)
        # ui.altAWaitingCircleLbl.setPixmap(pixMapAltA)
        # ui.altAWaitingCircleLbl.setScaledContents(True)

    if prospectOptionTag == "B":
        # ui.altBWaitingCircleLbl.raise_()
        # pixMapAltB = QtGui.QPixmap(pathCircleB)
        # ui.altBWaitingCircleLbl.setPixmap(pixMapAltB)
        # ui.altBWaitingCircleLbl.setScaledContents(True)


        # Values of the prospects
        for label in [ui.altBWaitingTime1Lbl, ui.altBWaitingTime2Lbl
            , ui.altBTravelTime1Lbl, ui.altBTravelTime2Lbl]:
            label.setFont(QFont(window.fontLetter, window.fontFactor * numbersFontSizeLbl))
            label.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
            label.setFrameShape(QFrame.NoFrame)
            label.setText("")

        # Probabitlies of the prospects
        for label in [ui.altBProbWaitingTime1Lbl, ui.altBProbWaitingTime2Lbl
            , ui.altBProbTravelTime1Lbl, ui.altBProbTravelTime2Lbl]:
            label.setFont(QFont(window.fontLetter, window.fontFactor * numbersFontSizeLbl))
            label.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
            label.setFrameShape(QFrame.NoFrame)
            label.setText("")

        for panel in [ui.altBWaitingTime1Panel,ui.altBWaitingTime2Panel, ui.altBWaitingTimePanel
                     ,ui.altBTravelTime1Panel,ui.altBTravelTime2Panel,ui.altBTravelTimePanel]:

            panel.setText("")
            panel.setFrameShape(QFrame.Box)

        for prospectLbl in [ui.altBWaitingProspectLbl, ui.altBTravelProspectLbl, ui.altBWaitingProspectLbl, ui.altBTravelProspectLbl]:
            prospectLbl.setFont(QFont(window.fontLetter, window.fontFactor * prospectDescriptionSizeLbl))
            prospectLbl.setText("")
            prospectLbl.setWordWrap(True)
            prospectLbl.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
            prospectLbl.setFrameShape(QFrame.Box)

def fillProspectWidget(prospectOptionTag,trials, experiment, treatmentDescriptiveCondition = False):

    expType = trials[0].expType

    if expType == 1 or expType == 2:

        #a) Second Consequence
        #Hide the consequence and probabilities of the second outcome of the prospect. (for Alternative A and B)
        showSecondProspectConsequence(False, alternative = prospectOptionTag)

        #b) First deterministic Consequence
        deterministicTrial = trials[0]

        if prospectOptionTag == "A":

            # Fill waiting and travel time for a given option
            ui.altAWaitingTime1Lbl.setText(getValueTimeProspectConsequence(value = deterministicTrial.waitingTime,unit = True, shortUnit = True))
            ui.altATravelTime1Lbl.setText(getValueTimeProspectConsequence(value = deterministicTrial.travelTime, unit = True, shortUnit = True))

            # Because there is only one outcome the probability is equal to 1 (or 100%)
            ui.altAProbWaitingTime1Lbl.setText(getValueTimeProspectProbability(value = 1, unit = True, shortUnit = True))
            ui.altAProbTravelTime1Lbl.setText(getValueTimeProspectProbability(value = 1, unit = True, shortUnit = True))

            #Show panels
            showConsequencePanels(type="waiting", alternative="A", twoConsequences=False)
            showConsequencePanels(type="travel", alternative="A", twoConsequences=False)


            showConsequenceText(type = "waiting",alternative = "A", consequence = deterministicTrial.waitingTime
                                , prob = 1, twoConsequences = False, language = window.mainExperiment.languageCondition)


            showConsequenceText(type = "travel",alternative = "A", consequence = deterministicTrial.travelTime
                                , prob = 1, twoConsequences = False, language = window.mainExperiment.languageCondition)


        if prospectOptionTag == "B":
            ui.altBWaitingTime1Lbl.setText(getValueTimeProspectConsequence(value = deterministicTrial.waitingTime, unit = True, shortUnit = True))
            ui.altBTravelTime1Lbl.setText(getValueTimeProspectConsequence(value = deterministicTrial.travelTime, unit = True, shortUnit = True))

            ui.altBProbWaitingTime1Lbl.setText(getValueTimeProspectProbability(value = 1, unit = True, shortUnit = True))
            ui.altBProbTravelTime1Lbl.setText(getValueTimeProspectProbability(value = 1, unit = True, shortUnit = True))

            # Show panels
            showConsequencePanels(type="waiting", alternative="B", twoConsequences=False)
            showConsequencePanels(type="travel", alternative="B", twoConsequences=False)


            showConsequenceText(type="waiting", alternative="B", consequence=deterministicTrial.waitingTime
                                , prob=1, twoConsequences=False, language=window.mainExperiment.languageCondition)

            showConsequenceText(type="travel", alternative="B", consequence=deterministicTrial.travelTime
                                , prob=1, twoConsequences=False, language=window.mainExperiment.languageCondition)


    if expType == 3:

        #At the beginning I show all prospect but then I will hide some depending on where the variability is allocated
        showSecondProspectConsequence(boolean = True, alternative = prospectOptionTag)

       #This experiment may have waiting and travel times with variability

        nonDeterministicTrial = trials[0]
        routeTimeProspect = None
        #If the trials correspond to the treatment route
        if nonDeterministicTrial.direction == nonDeterministicTrial.treatmentDirection:
            routeTimeProspect = experiment.timeProspectTreatment

        else:
            routeTimeProspect = experiment.timeProspectControl


        #Waiting Attributes
        waitingProspect = routeTimeProspect.waitingProspect
        waitingTime1 = waitingProspect.waitingTime1
        probWaiting1 = routeTimeProspect.waitingProspect.p1
        waitingTime2 = waitingProspect.waitingTime2
        probWaiting2 = waitingProspect.p2

        #Travel Attribute
        travelProspect = routeTimeProspect.travelProspect
        travelTime1 = travelProspect.travelTime1
        probTravel1 = routeTimeProspect.travelProspect.p1
        travelTime2 = travelProspect.travelTime2
        probTravel2 = travelProspect.p2

        if prospectOptionTag == "A":

            # Fill waiting time attributes
            ui.altAWaitingTime1Lbl.setText(getValueTimeProspectConsequence(value = waitingTime1, unit = True, shortUnit = True))
            ui.altAProbWaitingTime1Lbl.setText(getValueTimeProspectProbability(value = probWaiting1, unit = True, shortUnit = True))

            ui.altAWaitingTime2Lbl.setText(getValueTimeProspectConsequence(value = waitingTime2, unit = True, shortUnit = True))
            ui.altAProbWaitingTime2Lbl.setText(getValueTimeProspectProbability(value = probWaiting2, unit = True, shortUnit = True))

            # Fill travel time attributes

            ui.altATravelTime1Lbl.setText(getValueTimeProspectConsequence(value = travelTime1, unit = True, shortUnit = True))
            ui.altAProbTravelTime1Lbl.setText(getValueTimeProspectProbability(value = probTravel1, unit = True, shortUnit = True))

            ui.altATravelTime2Lbl.setText(getValueTimeProspectConsequence(value = travelTime2, unit = True, shortUnit = True))
            ui.altAProbTravelTime2Lbl.setText(getValueTimeProspectProbability(value = probTravel2, unit = True, shortUnit = True))


            #Waiting Times
            if probWaiting1 == 1: #Deterministic times
                ui.altAWaitingTime2Lbl.setVisible(False)
                ui.altAProbWaitingTime2Lbl.setVisible(False)
                showConsequencePanels(type="waiting", alternative="A", twoConsequences=False)
                showConsequenceText(type="waiting", alternative="A", consequence=waitingTime1
                                    , prob=1, twoConsequences=False, language=window.mainExperiment.languageCondition)


            else:
                showConsequencePanels(type = "waiting",alternative = "A",twoConsequences = True)

                showConsequenceText(type="waiting", alternative="A", consequence=waitingTime1
                                    , prob=probWaiting1, twoConsequences=True, language=window.mainExperiment.languageCondition)

                showConsequenceText(type="waiting", alternative="A", consequence=waitingTime2
                                    , prob=probWaiting2, twoConsequences=True, language=window.mainExperiment.languageCondition)

            #Travel Times

            if probTravel1 == 1: #Varibale times
                ui.altATravelTime2Lbl.setVisible(False)
                ui.altAProbTravelTime2Lbl.setVisible(False)
                showConsequencePanels(type="travel", alternative="A", twoConsequences=False)

                showConsequenceText(type="travel", alternative="A", consequence=travelTime1
                                    , prob=1, twoConsequences=False, language=window.mainExperiment.languageCondition)


            else:
                showConsequencePanels(type="travel", alternative="A", twoConsequences=True)

                showConsequenceText(type="travel", alternative="A", consequence=travelTime1
                                    , prob=probTravel1, twoConsequences=True, language=window.mainExperiment.languageCondition)

                showConsequenceText(type="travel", alternative="A", consequence=travelTime2
                                    , prob=probTravel2, twoConsequences=True, language=window.mainExperiment.languageCondition)

            # # Display text for the prospect's description
            # if window.mainExperiment.languageCondition == "english":
            #     valueLabelWaiting = getValueTimeProspectConsequence(value=deterministicTrial.waitingTime, unit=True,
            #                                                         shortUnit=True, language="english")
            #     valueLabelTravel = getValueTimeProspectConsequence(value=deterministicTrial.travelTime, unit=True,
            #                                                        shortUnit=True, language="english")
            #     ui.altAWaitingProspectLbl.setText("Wait " + valueLabelWaiting + " for sure")
            #     ui.altATravelProspectLbl.setText("Travel " + valueLabelTravel + " for sure")
            #
            # if window.mainExperiment.languageCondition == "spanish":
            #     valueLabelWaiting = getValueTimeProspectConsequence(value=deterministicTrial.waitingTime, unit=True,
            #                                                         shortUnit=True, language="spanish")
            #     valueLabelTravel = getValueTimeProspectConsequence(value=deterministicTrial.travelTime, unit=True,
            #                                                        shortUnit=True, language="spanish")
            #
            #     ui.altAWaitingProspectLbl.setText("Esperar " + valueLabelWaiting + " seguro")
            #     ui.altATravelProspectLbl.setText("Viajar en el bus " + valueLabelTravel + " seguro")

        if prospectOptionTag == "B":
            # Fill waiting time attributes
            ui.altBWaitingTime1Lbl.setText(getValueTimeProspectConsequence(value = waitingTime1, unit = True, shortUnit = True))
            ui.altBProbWaitingTime1Lbl.setText(getValueTimeProspectProbability(value = probWaiting1, unit = True, shortUnit = True))

            ui.altBWaitingTime2Lbl.setText(getValueTimeProspectConsequence(value = waitingTime2, unit = True, shortUnit = True))
            ui.altBProbWaitingTime2Lbl.setText(getValueTimeProspectProbability(value = probWaiting2, unit = True, shortUnit = True))

            # Fill travel time attributes

            ui.altBTravelTime1Lbl.setText(getValueTimeProspectConsequence(value = travelTime1, unit = True, shortUnit = True))
            ui.altBProbTravelTime1Lbl.setText(getValueTimeProspectProbability(value = probTravel1, unit = True, shortUnit = True))

            ui.altBTravelTime2Lbl.setText(getValueTimeProspectConsequence(value = travelTime2, unit = True, shortUnit = True))
            ui.altBProbTravelTime2Lbl.setText(getValueTimeProspectProbability(value = probTravel2, unit = True, shortUnit = True))

            if probWaiting1 == 1:
                ui.altBWaitingTime2Lbl.setVisible(False)
                ui.altBProbWaitingTime2Lbl.setVisible(False)
                showConsequencePanels(type="waiting", alternative="B", twoConsequences=False)

                showConsequenceText(type="waiting", alternative="B", consequence=waitingTime1
                                    , prob=probWaiting1, twoConsequences=False, language=window.mainExperiment.languageCondition)

            else:
                showConsequencePanels(type="waiting", alternative="B", twoConsequences=True)


                showConsequenceText(type="waiting", alternative="B", consequence=waitingTime1
                                    , prob=probWaiting1, twoConsequences=True, language=window.mainExperiment.languageCondition)

                showConsequenceText(type="waiting", alternative="B", consequence=waitingTime2
                                    , prob=probWaiting2, twoConsequences=True, language=window.mainExperiment.languageCondition)


            if probTravel1 == 1:
                ui.altBTravelTime2Lbl.setVisible(False)
                ui.altBProbTravelTime2Lbl.setVisible(False)
                showConsequencePanels(type="travel", alternative="B", twoConsequences=False)
                showConsequenceText(type="travel", alternative="B", consequence=travelTime1
                                    , prob=probTravel1, twoConsequences=False, language=window.mainExperiment.languageCondition)

            else:
                showConsequencePanels(type="travel", alternative="B", twoConsequences=True)

                showConsequenceText(type="travel", alternative="B", consequence=travelTime1
                                    , prob=probTravel1, twoConsequences=True, language=window.mainExperiment.languageCondition)

                showConsequenceText(type="travel", alternative="B", consequence=travelTime2
                                    , prob=probTravel2, twoConsequences=True, language=window.mainExperiment.languageCondition)

def generateTimeProspectWidget(prospectOptionTag, trials, experiment):

    createProspectWidget(prospectOptionTag=prospectOptionTag, trials=trials, experiment = experiment)
    fillProspectWidget(prospectOptionTag=prospectOptionTag, trials=trials, experiment = experiment)

    # Print in Descriptive Learning Trial File (complete this later)
    # dayCounter = 0
    # for trial in trials:
    #     trial.descriptiveTable = prospectOptionTag
    #     descriptiveLearningResponse = window.mainExperiment.getDescriptiveLearningResponse(
    #         experiment=window.mainExperiment.currentExperiment
    #         , trial=trial)
    #     window.mainExperiment.writeDescriptiveLearningResponseCsv(experiment=window.mainExperiment.currentExperiment
    #                                                               ,
    #                                                               descriptiveLearningResponse=descriptiveLearningResponse)

def updateTimeProspectSets(experiment):

    window.startingTimeDescriptiveChoiceResponse = datetime.now().strftime('%H%M%S')

    #We first reset the panels that show the consequences nd probabilities of the prospects.

    trialsClockwise = []
    trialsCounterclockwise = []

    for trial in experiment.descriptiveTrials:

        if trial.type == "descriptive":
            if isClockwise(trial.direction):
                trialsClockwise.append(trial)
            else:
                trialsCounterclockwise.append(trial)

    ui.altAProspectExpTitleLbl.setAutoFillBackground(False)
    ui.altBProspectExpTitleLbl.setAutoFillBackground(False)


    if experiment.treatmentDescriptiveOption == "A":
        if experiment.treatmentDirection == "clockwise":
            generateTimeProspectWidget(prospectOptionTag = "A", trials=trialsClockwise, experiment = experiment)
            generateTimeProspectWidget(prospectOptionTag = "B", trials=trialsCounterclockwise, experiment = experiment)
        else:
            generateTimeProspectWidget(prospectOptionTag = "A", trials=trialsCounterclockwise, experiment = experiment)
            generateTimeProspectWidget(prospectOptionTag = "B", trials=trialsClockwise, experiment = experiment)

    else:
        if experiment.treatmentDirection == "clockwise":
            generateTimeProspectWidget(prospectOptionTag = "A", trials=trialsCounterclockwise, experiment = experiment)
            generateTimeProspectWidget(prospectOptionTag = "B", trials=trialsClockwise, experiment = experiment)

        else:
            generateTimeProspectWidget(prospectOptionTag = "A", trials=trialsClockwise, experiment = experiment)
            generateTimeProspectWidget(prospectOptionTag = "B", trials=trialsCounterclockwise, experiment = experiment)

    expTag = ""

    if window.mainExperiment.languageCondition == "spanish": expTag = "Tercer Bloque Experimental"
    if window.mainExperiment.languageCondition == "english": expTag = "Third Experimental Block"

def preferredProspectJourneySelection():

    preferredProspectJourneyClickableLabelClicked = ui.preferredProspectJourneyClickableGrid.sender()

    if isinstance(preferredProspectJourneyClickableLabelClicked, ClickableOptionIcon):

        oneClickedLabel(preferredProspectJourneyClickableLabelClicked)

        #Now we show the panel to go to the next question
        showPanelsNextDecisionScenario(True)

        if preferredProspectJourneyClickableLabelClicked.type == "alternative":
            if preferredProspectJourneyClickableLabelClicked.id == "A":
                setBackgroundColorQLabel(QLabel=ui.altAProspectExpTitleLbl, colorString="yellow")
                ui.altBProspectExpTitleLbl.setAutoFillBackground(False)
                # ui.altAPanel.lower()
                window.mainExperiment.currentExperiment.setPreferredDescriptiveJourney("A")
            if preferredProspectJourneyClickableLabelClicked.id == "B":
                setBackgroundColorQLabel(QLabel=ui.altBProspectExpTitleLbl, colorString="yellow")
                ui.altAProspectExpTitleLbl.setAutoFillBackground(False)
                # ui.altBPanel.lower()
                window.mainExperiment.currentExperiment.setPreferredDescriptiveJourney("B")

        #If the perosn is in the last scenario, the button next and the instructions will change

        if window.nDescriptiveExperiments == window.totalChoiceSets:

            instruction = ""

            if window.mainExperiment.languageCondition == "english":

                ui.buttonNextDecisionSeparateExpPage.setText("Finish Experiment")

                instruction = updateInstruction(
                    experiment=window.mainExperiment.currentExperiment
                    , txtInstructions="finishDescriptiveExperimentENG.html"
                    , folder="DescriptiveExperiment/DecisionTableExp")

            if window.mainExperiment.languageCondition == "spanish":
                ui.buttonNextDecisionSeparateExpPage.setText("Terminar Experimento")

                instruction = updateInstruction(
                    experiment=window.mainExperiment.currentExperiment
                    , txtInstructions="finishDescriptiveExperimentSPA.html"
                    , folder="DescriptiveExperiment/DecisionTableExp")

            ui.nextDescriptiveQuestionLbl.setText(instruction)

def creationPreferredProspectJourneyPanel(function, grid):

    # Directions (Counterclockwise, clockwise)
    ui.routeAPreferred = ClickableOptionIcon(parent = ui.prospectExpPanel, type = "alternative", id = "A", path= "",myGrid = ui.preferredProspectJourneyGrid)
    ui.routeBPreferred = ClickableOptionIcon(parent = ui.prospectExpPanel, type = "alternative", id = "B", path= "",myGrid = ui.preferredProspectJourneyGrid)

    if window.mainExperiment.languageCondition == "english":
        ui.routeAPreferred.setText("Route A")
        ui.altAProspectExpTitleLbl.setText("Route A")
        ui.routeBPreferred.setText("Route B")
        ui.altBProspectExpTitleLbl.setText("Route B")

    if window.mainExperiment.languageCondition == "spanish":
        ui.routeAPreferred.setText("Ruta A")
        ui.altAProspectExpTitleLbl.setText("Ruta A")

        ui.routeBPreferred.setText("Ruta B")
        ui.altBProspectExpTitleLbl.setText("Ruta B")


    for label in [ui.routeAPreferred,ui.routeBPreferred]:
        label.setFont(QFont(window.fontLetter, window.fontFactor*30, QFont.Bold))
        label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)

    addRowIconsGrid(nIcons = 2, nameRow = "Direction",grid= ui.preferredProspectJourneyGrid,nRow=0, width = window.iconJourneyPanelWidth, height = window.iconJourneyPanelHeight
                    , icons= [ui.routeAPreferred,ui.routeBPreferred])

    if window.mainExperiment.languageCondition == "english":
        ui.directionGridLbl.setText("Route   ")

    if window.mainExperiment.languageCondition == "spanish":
        ui.directionGridLbl.setText("Ruta   ")

    ui.directionGridLbl.setFont(QFont(window.fontLetter, 24, QFont.Bold))

    connectButtonsGridPanel(grid, function)

def setupProspectExpDescriptionPage():

    # Title Page
    if window.mainExperiment.languageCondition == "english":
        setTitlePage(grid=ui.decisionExpDescriptionTitleGrid, text="Third Experimental Block"
                     , capitalLetters=True, fontFactor=window.fontFactor, fontLetter=window.fontLetter)

    if window.mainExperiment.languageCondition == "spanish":
        setTitlePage(grid=ui.decisionExpDescriptionTitleGrid, text="Tercer Bloque Experimental"
                     , capitalLetters=True, fontFactor=window.fontFactor, fontLetter=window.fontLetter)

    # Description Page

    setupExperimentDescription(descriptive=True, grid=ui.decisionExpDescriptionGrid
                               , experiment=window.mainExperiment.currentExperiment
                               , folder="DescriptiveExperiment/ProspectExp",fontIncreaseFactor = 1.3)

def setupProspectExpPage():


    currentExperiment = window.mainExperiment.currentExperiment
    #Waiting Time Prospect

    # ui.altAWaitingTime1Lbl
    pathCircleA = "Pictures/circle.jpg"
    pathCircleB = "Pictures/circle.png"

    #Alt A

    #a) Waiting


    if currentExperiment.expType == 3:
        ui.altAWaitingTime1Lbl.setText(str(currentExperiment.timeProspectControl.waitingProspect.waitingTime1))
        ui.altAWaitingTime2Lbl.setText(str(currentExperiment.timeProspectControl.waitingProspect.waitingTime2))

    #Scenario Page
    ui.prospectExpProgressBar.setStyleSheet(window.styleProgressBar3)

    ui.prospectExpProgressBar.setValue(0)

    #Randomize order of the questions (not by block in this case)
    window.mainExperiment.setOrderIds(mode="all", descriptive = True)

    expTag = ""
    preferredProspectRouteInstructions = ""
    nextProspectQuestionInstructions = ""
    if window.mainExperiment.languageCondition == "spanish":

        # Next Button
        ui.buttonNextProspectExpPage.setText("Siguiente Escenario")

        #Progress Bar initialization
        expTag = "Tercer Bloque Experimental"
        ui.nProspectExpLbl.setText("Escenarios Completados: " + str(window.nDescriptiveExperiments - 1) + " de " + str(
            window.totalChoiceSets) + " (" + expTag + ")")

        # Infromation of the text panels (this need to be after the change in the buttons
        preferredProspectRouteInstructions = updateInstruction(
            experiment=window.mainExperiment.currentExperiment
            , txtInstructions="preferredDescriptiveRouteInstructionsSPA.html"
            , folder="DescriptiveExperiment/ProspectExp")

        # nextDescriptiveQuestionInstructions = updateInstruction(
        #     experiment=window.mainExperiment.currentExperiment
        #     , txtInstructions="nextDescriptiveQuestionInstructionsSPA.html"
        #     , folder="DescriptiveExperimen/ProspectExpt")

    if window.mainExperiment.languageCondition == "english":
        # Next Button
        ui.buttonNextProspectExpPage.setText("Next Scenario")

        # Progress Bar initialization
        expTag = "Third Experimental Block"
        ui.nProspectExpLbl.setText("Completed Scenarios: " + str(int(window.nDescriptiveExperiments - 1)) + " out of " + str(
            window.totalChoiceSets) + " (" + expTag + ")")


        # Infromation of the text panels (this need to be after the change in the buttons

        preferredProspectRouteInstructions = updateInstruction(
            experiment=window.mainExperiment.currentExperiment
        , txtInstructions="preferredDescriptiveRouteInstructionsENG.html"
        , folder = "DescriptiveExperiment/ProspectExp")

        # nextProspectQuestionInstructions = updateInstruction(
        #     experiment=window.mainExperiment.currentExperiment
        #     , txtInstructions="nextDescriptiveQuestionInstructionsENG.html"
        #     , folder="DescriptiveExperiment/ProspectExp")

    ui.preferredProspectRouteLbl.setText(preferredProspectRouteInstructions)
    # ui.nextDescriptiveProspectQuestionLbl.setText(nextDescriptiveQuestionInstructions)

    #Font of messages

    for label in [ui.preferredProspectRouteLbl]:
        label.setFont(QFont(window.fontLetter, window.fontFactor*18))
        label.setWordWrap(True)
        # label.heig.setFixedHeight(20)
        label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignCenter)
        label.setFrameShape(QFrame.Box)

    #We first hide the button to go to the next Scenario as the person need first to select an option
    showPanelsNextDecisionScenario(False)

    #Panels of the tables
    ui.altAPanel.raise_()
    ui.altBPanel.raise_()

    for lblTitle in [ui.altAProspectExpTitleLbl,ui.altBProspectExpTitleLbl]:
        lblTitle.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignCenter)
        lblTitle.setFont(QFont(window.fontLetter, window.fontFactor*18,QFont.Bold))
        lblTitle.setFrameShape(QFrame.Box)

    ui.nProspectExpLbl.setFont(QFont(window.fontLetter, window.fontFactor * 18, QFont.Bold))
    ui.nProspectExpLbl.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignBottom)

    #We start showing the first experiment of the list
    window.mainExperiment.currentExperiment = window.mainExperiment.getExperiment(experimentId=1, descriptive = True, random = True)

    updateTimeProspectSets(experiment=window.mainExperiment.currentExperiment)

    # Panel to choose the preferred route

    creationPreferredProspectJourneyPanel(grid=ui.preferredProspectJourneyClickableGrid,
                                             function=preferredProspectJourneySelection)

def nextButtonProspectExpPage():

    if window.mainExperiment.currentExperiment.preferredDescriptiveJourney is not None:

        resetColorButtonsJourneyPanel(grid = ui.preferredProspectJourneyClickableGrid)

        #Complete this method
        writeDescriptiveChoiceResponse(currentDescriptiveChoiceResponse=window.mainExperiment.getDescriptiveChoiceResponse(
            experiment=window.mainExperiment.currentExperiment))

        if window.nDescriptiveExperiments == window.totalChoiceSets:
            ui.stackedWidget.setCurrentWidget(ui.demographicsPage)

        else:
            window.mainExperiment.currentExperiment = window.mainExperiment.getExperiment(experimentId = window.mainExperiment.currentExperiment.descriptionOrderId+1, descriptive = True)

            # setBackgroundColorQLabel(QLabel = ui.altAProspectPanel, colorString = "white")
            # setBackgroundColorQLabel(QLabel = ui.altBProspectPanel, colorString = "white")
            # ui.altAProspectPanel.raise_()
            # ui.altBProspectPanel.raise_()

            updateTimeProspectSets(experiment=window.mainExperiment.currentExperiment)
            # showPanelsNextDecisionScenario(False)

            #This solution is not working.
            # ui.altAProspectPanel.lower()
            # ui.altBProspectPanel.lower()

        window.nDescriptiveExperiments += 1

        # Update the bar of completed scenarios
        progress = round(100 * (window.nDescriptiveExperiments - 1) / window.totalChoiceSets)
        updateProgressBarDecisionExpPage(progress=progress, sliderBarQLabel=ui.nProspectExpLbl,
                                         sliderBar=ui.prospectExpProgressBar)

# ***************  (Page 6) Demographics  *************************************** #

# A grid Layout was created using the QT designer and it can be accessed in ExperimentInterface.ui

#To go to the next page of the Stacked Widget all fields must be completed.

ui.errorLbl.setText("") #This lbl will be updated with an error mesage in red, if the user incorrectly completed the fields.
#Parameters obtained from the Demographics window.
window.participantAge = ""
window.participantGender = ""
window.participantCountry = ""
window.participantEducationLevel = ""

def setupDemographicsPage():
    # This function avoid that the two radio buttons are shown as clicked
    # setRadioButtons(ui.radioButtonChile,ui.radioButtonUK)

    #Format of the labels shown in the window
    for field in [ui.ageFieldLbl,ui.eduFieldLbl,ui.genderFieldLbl,ui.countryFieldLbl ]:
        field.setFont(QFont(window.fontLetter, 20*window.fontFactor, QFont.Bold))
        field.setAlignment(QtCore.Qt.AlignVCenter)

    for fieldOption in [ui.txtAge,ui.radioButtonChile,ui.radioButtonUK,ui.cboxEducation,ui.cboxGender]:
        fieldOption.setFont(QFont(window.fontLetter, 18*window.fontFactor))
        # fieldOption.setAlignment(QtCore.Qt.AlignVCenter)

    #Demographic description title format
    # ui.demographicsDescriptionLbl.setWordWrap(True)
    # ui.demographicsDescriptionLbl.setAlignment(QtCore.Qt.AlignCenter)
    # ui.demographicsDescriptionLbl.setFrameShape(QFrame.Box)
    # ui.demographicsDescriptionLbl.setFont(QFont(window.fontLetter, 24, QFont.Bold))

    #Error label format
    ui.errorLbl.setFont(QFont(window.fontLetter, window.fontFactor * 20))

    #Create elements of the combo box showing the options of education levels and Gender options.


    if window.mainExperiment.languageCondition == "english":

        setHeadingPage(grid=ui.demographicsTitleGrid, text="Please provide the following information"
                     , capitalLetters = False, fontSize = 24, fontLetter = window.fontLetter, fontFactor = window.fontFactor)

        # ui.demographicsDescriptionLbl.setText("Please provide the following information")

        ui.cboxEducation.addItems(["","Undergraduate","Graduate","Other"])
        ui.cboxGender.addItems(["","Male","Female","Prefer not to say"])
        ui.ageFieldLbl.setText("Age")
        ui.eduFieldLbl.setText("Education")
        ui.genderFieldLbl.setText("Gender")
        ui.countryFieldLbl.setText("Country of Residence")
        ui.radioButtonUK.setText("United Kingdom")
        ui.radioButtonChile.setText("Chile")

    if window.mainExperiment.languageCondition == "spanish":

        setTitlePage(grid=ui.demographicsTitleGrid, text="Datos Personales"
                     , capitalLetters=True, fontLetter=window.fontLetter, fontFactor=window.fontFactor)
        # ui.demographicsDescriptionLbl.setText("Por favor completa la siguiente información")
        ui.cboxEducation.addItems(["", "Pregrado", "Posgrado", "Otro"])
        ui.cboxGender.addItems(["", "Masculino", "Femenino", "Prefiero no decir"])
        ui.ageFieldLbl.setText("Edad")
        ui.eduFieldLbl.setText("Educación")
        ui.genderFieldLbl.setText("Género")
        ui.countryFieldLbl.setText("País de Residencia")
        ui.radioButtonUK.setText("Reino Unido")
        ui.radioButtonChile.setText("Chile")

def demographicsFieldsCompleted():

    #Participant Age
    window.participantAge = ui.txtAge.text()

    #Participant Country of Residence
    window.participantCountry = ""
    if ui.radioButtonChile.isChecked():
        window.participantCountry = "Chile"
    elif ui.radioButtonUK.isChecked():
        window.participantCountry = "UK"

    #Participant Gender
    window.participantGender = ui.cboxGender.currentText()

    #Participant Education Level
    window.participantEducationLevel = ui.cboxEducation.currentText()

    #Check whether the participant types the required information.
    if window.participantAge in ["","0"] or int(window.participantAge)<18 or window.participantGender == "" or window.participantEducationLevel == "":

        if window.mainExperiment.languageCondition == "english": ui.errorLbl.setText("Please correctly complete the fields marked in red") # Error Message

        if window.mainExperiment.languageCondition == "spanish": ui.errorLbl.setText("Por favor completa correctamente los campos marcados en rojo") # Error Message
        # ui.errorLbl.setGeometry(ui.errorLbl.x(),ui.errorLbl.y(),250,20)


        for field in [ui.ageFieldLbl,ui.genderFieldLbl,ui.eduFieldLbl, ui.countryFieldLbl]:
            # setBackgroundColorQLabel(field, "white")
            setNoRedLettersColourQLabel(QLabel = field)

        if window.participantAge in ["","0"] or int(window.participantAge) < 18: # The participant must be older than 18 years old.
            # setBackgroundColorQLabel(ui.ageFieldLbl, "red")
            setRedErrorLettersColorQLabel(QLabel=ui.ageFieldLbl)
        if window.participantGender == "":
            # setBackgroundColorQLabel(ui.genderFieldLbl, "red")
            setRedErrorLettersColorQLabel(QLabel=ui.genderFieldLbl)
        if window.participantEducationLevel == "":
            # setBackgroundColorQLabel(ui.eduFieldLbl, "red")
            setRedErrorLettersColorQLabel(QLabel=ui.eduFieldLbl)
        if window.participantCountry == "":
            setRedErrorLettersColorQLabel(QLabel = ui.countryFieldLbl)
            # setBackgroundColorQLabel(ui.countryFieldLbl, "red")

        return False

    else:
        return True

#Function assigned to the "Next" button shown in the 'Demographics' page ("demographicsPage")
def buttonNextDemographicsClicked():
    if demographicsFieldsCompleted() == True:
        #Create a participant
        # window.currentParticipant = Participant(age = window.participantAge,gender = window.participantGender
        #                                         ,educationLevel = window.participantEducationLevel, country = window.participantCountry)

        currentParticipant = window.mainExperiment.currentParticipant

        currentParticipant.setAge(window.participantAge)
        window.mainExperiment.writeLineParticipantFile(label = "Age", value = currentParticipant.age)

        currentParticipant.setGender(window.participantGender)
        window.mainExperiment.writeLineParticipantFile(label="Gender", value=currentParticipant.gender)

        currentParticipant.setEducationLevel(window.participantEducationLevel)
        window.mainExperiment.writeLineParticipantFile(label="EducationLevel", value=currentParticipant.educationLevel)

        currentParticipant.setCountryOfResidence(window.participantCountry)
        window.mainExperiment.writeLineParticipantFile(label="CountryOfResidence", value=currentParticipant.countryOfResidence)

        # Setup and go to Travel Behaviour Page
        setupTravelBehaviourPage(city = window.currentParticipant.cityOfResidence)
        ui.stackedWidget.setCurrentWidget(ui.travelBehaviourPage)
        # createSimulationExperiments(participant = window.currentParticipant)

        # ui.stackedWidget.setCurrentIndex(ui.stackedWidget.currentIndex() + 1) #Go to next page

# ***************   (Page) Travel Behaviour Page *************************************** #

window.nTravelBehaviourQuestionsPage1 = None
window.nTravelBehaviourQuestionsPage2 = None
window.nTravelBehaviourQuestionsPage3 = None
window.nTravelBehaviourQuestionsPage4 = None
window.nTravelBehaviourQuestionsPage5 = None

#Information about Santiago and London's locations shown in the form layout
ui.londonLocationsList = []
ui.santiagoLocationsList = []

#Additional information about Santiago and London0s locations
ui.londonLocations = {}
ui.londonBoroughs = {}
ui.londonPostcodes = {}
ui.santiagoLocations = {}

def readBoroughInformation(city, folder):

    csvFileName = str(city)+"Boroughs"+".csv"
    pathBoroughFile = folder + "/" +csvFileName
    boroughFile = None

    if city == "London":
        boroughFile = open(pathBoroughFile, 'r', encoding='Latin-1')

    if city == "Santiago":
        boroughFile = open(pathBoroughFile, 'r', encoding='Latin-1')

    infoBoroughFile = boroughFile.readlines()
    boroughFile.close()

    # First row of the file (Name of the columns)
    colNames = infoBoroughFile[0]
    colValues = infoBoroughFile[1:]

    #List that are shown in the combobox for the locations (First element are blanks)
    ui.londonLocationsList.append(" ")
    ui.santiagoLocationsList.append(" ")

    for lineBoroughInfo in colValues:
            line = lineBoroughInfo.split(",")

            if city == "London":
                location = line[0]
                ui.londonLocationsList.append(location)
                ui.londonLocations[location] = line[0]
                ui.londonBoroughs[location] = line[1]
                ui.londonPostcodes[location] = line[2]

            if city == "Santiago":
                comuna = line[0]
                comuna = comuna.replace("\n","")
                ui.santiagoLocationsList.append(comuna)
                ui.santiagoLocations[comuna] = comuna

def raiseErrorTravelBehaviorPage(page,attributesLblList):

    #Example: https://www.google.co.uk/search?q=error+form+colors+red&source=lnms&tbm=isch&sa=X&ved=0ahUKEwiNoNnqmYvVAhUQmrQKHfcoCBwQ_AUIBigB&biw=1600&bih=798#tbm=isch&q=error+form+colors+red+radio+buttons&imgrc=U5KLBg_iqcN_tM:

    # Check if the fields are correctly completed.
    attributesLblErrorList = []  # This list contains all the attributes in the page that are not rrectly completed
    attributesLblErrorMessagesList = []  # This list contains all the attributes in the page that are not rrectly completed

    fieldsCompleted = None #The method returns a boolean taking the value true if all the fields in te experiment screen are correctly completed

    titleErrorFormLayout = QLabel("Please correctly answer the questions marked in red:\n")
    setRedErrorLettersColorQLabel(titleErrorFormLayout)
    titleErrorFormLayout.setFont(QFont(window.fontLetter, window.fontFactor * 16))

    #Fill with a red background all elements in the attributesErrorlist

    # First we cleared any coloured background
    for attributeLbl in attributesLblList:
        #Clear background or red color from letters
        setNoBackgroundColorQLabel(attributeLbl)
        #Clear red color letters
        setNoRedLettersColourQLabel(QLabel=attributeLbl)


    if page == 1:

        # Clear formlayout containing the error messages
        clearQFormLayout(layout=ui.travelBehaviourFormLayoutErrorMessagePage1)

        # Set Title of error form layout
        ui.travelBehaviourFormLayoutErrorMessagePage1.addRow(titleErrorFormLayout)

        # ui.errorMessageTravelBehaviourPage1Lbl.setFont((QFont(window.fontLetter, 18)))
        # ui.errorMessageTravelBehaviourPage1Lbl.setVisible(True)


        if ui.tripsPerWeekBusesTravelBehaviourPage == 0:
            attributesLblErrorList.append(ui.tripsPerWeekBusesTravelBehaviourPageLbl)
            attributesLblErrorMessagesList.append(QLabel("Question 1: Choose a value greater than 0"))

        if ui.walkingTimeTravelBehaviourPage == 0:
            attributesLblErrorList.append(ui.walkingTimeTravelBehaviourPageLbl)
            attributesLblErrorMessagesList.append(QLabel("Question 2: Choose a value greater than 0"))

        if ui.waitingTimeTravelBehaviourPage == 0:
            attributesLblErrorList.append(ui.waitingTimeTravelBehaviourPageLbl)
            attributesLblErrorMessagesList.append(QLabel("Question 3: Choose a value greater than 0"))

        if ui.inVehicleTimeTravelBehaviourPage == 0:
            attributesLblErrorList.append(ui.inVehicleTimeTravelBehaviourPageLbl)
            attributesLblErrorMessagesList.append(QLabel("Question 4: Choose a value greater than 0"))

        if ui.journeyTimeTravelBehaviourPage == 0:
            attributesLblErrorList.append(ui.journeyTimeTravelBehaviourPageLbl)
            # attributesLblErrorList.append(ui.spinBoxJourneyTime)
            attributesLblErrorMessagesList.append(QLabel("Question 5: Choose a value greater than 0"))

        if ui.realTimeInformationTravelBehaviourPage not in ui.radioButtonsRealTimeInformationDict.keys():
            attributesLblErrorList.append(ui.realTimeInformationTravelBehaviourPageLbl)
            attributesLblErrorList.append(ui.realTimeInformation2TravelBehaviourPageLbl)
            attributesLblErrorMessagesList.append(QLabel("Question 6: Please choose a valid option"))

        # if ui.realTimeInformationTravelBehaviourPage == 0:
        #     attributesLblErrorList.append(ui.realTimeInformationTravelBehaviourPageLbl)
        #     attributesLblErrorMessagesList.append(QLabel("Question 6: Choose a value greater than 0"))


        #Add error messages to the error grid
        # rowCounter = 0
        for attributeLblErrorMessage in attributesLblErrorMessagesList:
            setRedErrorLettersColorQLabel(attributeLblErrorMessage)
            ui.travelBehaviourFormLayoutErrorMessagePage1.addRow(attributeLblErrorMessage)
            # rowCounter += 1


    if page == 2:

        # Clear formlayout containing the error messages
        clearQFormLayout(layout=ui.travelBehaviourFormLayoutErrorMessagePage2)

        # Set Title of error form layout
        ui.travelBehaviourFormLayoutErrorMessagePage2.addRow(titleErrorFormLayout)

        # ui.errorMessageTravelBehaviourPage2Lbl.setFont((QFont(window.fontLetter, 18)))
        # ui.errorMessageTravelBehaviourPage2Lbl.setVisible(True)

        # Check if the fields are correctly completed.
        attributesLblErrorList = []  # This list contains all the attributes in the page that are not rrectly completed

        if ui.busRouteTravelBehaviourPage == "":
            attributesLblErrorList.append(ui.busRouteTravelBehaviourPageLbl)
            attributesLblErrorMessagesList.append(QLabel("Question 1: Please type a valid bus route"))

        if ui.tripsPerWeekMostFreqBusRouteTravelBehaviourPage == 0:
            attributesLblErrorList.append(ui.tripsPerWeekMostFreqBusRouteTravelBehaviourPageLbl)
            attributesLblErrorMessagesList.append(QLabel("Question 2: Please choose a value greater than 0"))

        if ui.departureTimeTravelBehaviourPage == "00:00":
            attributesLblErrorList.append(ui.departureTimeTravelBehaviourPageLbl)
            attributesLblErrorMessagesList.append(QLabel("Question 3: Please type a valid departure time"))

        if ui.originPlaceTravelBehaviourPage == " " or ui.otherOriginPlaceTravelBehaviourPage == "":

            if ui.originPlaceTravelBehaviourPage == " " and ui.otherOriginPlaceTravelBehaviourPage == "":
                attributesLblErrorList.append(ui.originTravelBehaviourPageLbl)
                attributesLblErrorList.append(ui.comboBoxOriginPlaceLbl)
                attributesLblErrorMessagesList.append(
                    QLabel("Question 4: Please choose the place of your origin location"))
                # attributesLblErrorList.append(ui.lineEditOtherOriginPlaceLbl)

            if ui.originPlaceTravelBehaviourPage == "Other" and ui.otherOriginPlaceTravelBehaviourPage == "":
                attributesLblErrorList.append(ui.originTravelBehaviourPageLbl)
                attributesLblErrorList.append(ui.lineEditOtherOriginPlaceLbl)
                attributesLblErrorMessagesList.append(QLabel("Question 4: Please specify which is the other place of your origin location"))

        if ui.originBoroughTravelBehaviourPage == " " or ui.otherOriginBoroughTravelBehaviourPage == "":

            if ui.originBoroughTravelBehaviourPage == " " and ui.otherOriginBoroughTravelBehaviourPage == "":
                attributesLblErrorList.append(ui.originTravelBehaviourPageLbl)
                attributesLblErrorList.append(ui.comboBoxOriginBoroughLbl)
                attributesLblErrorMessagesList.append(QLabel("Question 4: Please choose the borough of your origin location"))
                # attributesLblErrorList.append(ui.lineEditOtherOriginBoroughLbl)

            if ui.originBoroughTravelBehaviourPage == "Other" and ui.otherOriginBoroughTravelBehaviourPage == "":
                attributesLblErrorList.append(ui.originTravelBehaviourPageLbl)
                attributesLblErrorList.append(ui.lineEditOtherOriginBoroughLbl)
                attributesLblErrorMessagesList.append(
                    QLabel("Question 4: Please specify which is the other borough of your origin location"))

        if ui.destinationPlaceTravelBehaviourPage == " " or ui.otherDestinationPlaceTravelBehaviourPage == "":


            if ui.destinationPlaceTravelBehaviourPage == " " and ui.otherDestinationPlaceTravelBehaviourPage == "":
                attributesLblErrorList.append(ui.destinationTravelBehaviourPageLbl)
                attributesLblErrorList.append(ui.comboBoxDestinationPlaceLbl)
                attributesLblErrorMessagesList.append(
                    QLabel("Question 4: Please choose the place of your destination location"))
                # attributesLblErrorList.append(ui.lineEditOtherDestinationPlaceLbl)

            if ui.destinationPlaceTravelBehaviourPage == "Other"and ui.otherDestinationPlaceTravelBehaviourPage == "":
                attributesLblErrorList.append(ui.destinationTravelBehaviourPageLbl)
                attributesLblErrorList.append(ui.lineEditOtherDestinationPlaceLbl)
                attributesLblErrorMessagesList.append(QLabel("Question 4: Please specify which is the other place of your destination location"))

        if ui.destinationBoroughTravelBehaviourPage == " " or ui.otherDestinationBoroughTravelBehaviourPage == "":

            if ui.destinationBoroughTravelBehaviourPage == " " and ui.otherDestinationBoroughTravelBehaviourPage == "":
                attributesLblErrorList.append(ui.destinationTravelBehaviourPageLbl)
                attributesLblErrorList.append(ui.comboBoxDestinationBoroughLbl)
                attributesLblErrorMessagesList.append(QLabel("Question 4: Please choose the borough of your destination location"))
                # attributesLblErrorList.append(ui.lineEditOtherDestinationBoroughLbl)

            if ui.destinationBoroughTravelBehaviourPage == "Other" and ui.otherDestinationBoroughTravelBehaviourPage == "":
                attributesLblErrorList.append(ui.destinationTravelBehaviourPageLbl)
                attributesLblErrorList.append(ui.lineEditOtherDestinationBoroughLbl)
                attributesLblErrorMessagesList.append(
                    QLabel("Question 4: Please specify which is the other borough of your destination location"))

        # Origin and destination places should be different

        if ui.originPlaceTravelBehaviourPage == ui.destinationPlaceTravelBehaviourPage or ui.otherOriginPlaceTravelBehaviourPage == ui.otherDestinationPlaceTravelBehaviourPage:


            if ui.originPlaceTravelBehaviourPage == ui.destinationPlaceTravelBehaviourPage and ui.originPlaceTravelBehaviourPage!="Other" and ui.originPlaceTravelBehaviourPage!=" ":
                attributesLblErrorList.append(ui.destinationTravelBehaviourPageLbl)
                attributesLblErrorMessagesList.append(
                    QLabel("Question 4: Your origin and destination places cannot be the same"))
                attributesLblErrorList.append(ui.comboBoxDestinationPlaceLbl)

            if ui.otherOriginPlaceTravelBehaviourPage == ui.otherDestinationPlaceTravelBehaviourPage and ui.originPlaceTravelBehaviourPage == "Other" and ui.destinationPlaceTravelBehaviourPage == "Other":
                attributesLblErrorList.append(ui.destinationTravelBehaviourPageLbl)
                attributesLblErrorMessagesList.append(
                    QLabel("Question 4: Your origin and destination places cannot be the same"))
                attributesLblErrorList.append(ui.lineEditOtherDestinationPlaceLbl)

        #Add error messages to the error grid
        # rowCounter = 0
        for attributeLblErrorMessage in attributesLblErrorMessagesList:
            setRedErrorLettersColorQLabel(attributeLblErrorMessage)
            ui.travelBehaviourFormLayoutErrorMessagePage2.addRow(attributeLblErrorMessage)
            # rowCounter += 1


    elif page == 3:
        pass


    # Set a red background in labels with errors
    if len(attributesLblErrorList) == 0:
        fieldsCompleted = True

    else:
        fieldsCompleted = False

        for attributeLbl in attributesLblErrorList:
            # setErrorBackgroundColorQLabel(attributeLbl)
            # setErrorBackgroundColorQWidget(attributeLbl)
            setRedErrorLettersColorQLabel(QLabel = attributeLbl)

    return fieldsCompleted

def createFormLayoutTravelBehaviourPage(page):
    #FORM LAYOUT WITH QUESTIONS

    #Create the form layout with the questions at the end of the experiment.
    if page == 1:

        # Information Text Labels
        folderTravelBehaviourQuestionsPage1 = "TravelBehaviourQuestions/Page1"

        descriptionFontSize = 20

        # Dictionary of descriptions for each question
        questionsDescriptionsPage1SPADict = {}
        questionsDescriptionsPage1ENGDict = {}
        questionsDescriptionsPage1Dict = {}

        window.nTravelBehaviourQuestionsPage1 = 0
        # idQuestions = ["tripsPerWeekBuses","realTimeInformation","seatsAvailable","walkingTime","waitingTime", "inVehicleTime","journeyTime"]
        idQuestions = ["tripsPerWeekBuses", "walkingTime", "waitingTime",
                       "inVehicleTime", "journeyTime","realTimeInformation","realTimeInformation2"]
        nQuestionsPage1 = len(idQuestions)

        for i in range(0, nQuestionsPage1):
            keyQuestion = idQuestions[i]
            questionsDescriptionsPage1SPADict[keyQuestion] = QLabel(updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions=keyQuestion + "QuestionSPA.html"
                , folder=folderTravelBehaviourQuestionsPage1))

            questionsDescriptionsPage1ENGDict[keyQuestion] = QLabel(updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions=keyQuestion + "QuestionENG.html"
                , folder=folderTravelBehaviourQuestionsPage1))

        if window.mainExperiment.languageCondition == "spanish":
            #Dictionary with the description of each question
            questionsDescriptionsPage1Dict = questionsDescriptionsPage1SPADict

            # General Description for questions in page 1

            descriptionText = updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions="DescriptionTravelBehaviourPage1SPA.html"
                , folder=folderTravelBehaviourQuestionsPage1)

            # setBodyTextPage(grid=ui.travelBehaviourFormLayoutDescriptionPage1
            #                 ,text = descriptionText, fontLetter = window.fontLetter
            #                 ,fontSize = descriptionFontSize, fontFactor = window.fontFactor)

            # Title
            setHeadingPage(grid=ui.travelBehaviourTitleGrid,
                           text="Complete the following fields according to your average travel experience in London Buses"
                           , capitalLetters=False, centered=False, fontFactor=window.fontFactor, fontSize=24
                           , fontLetter=window.fontLetter)


        if window.mainExperiment.languageCondition == "english":
            # Dictionary with the description of each question
            questionsDescriptionsPage1Dict = questionsDescriptionsPage1ENGDict

            # General Description for questions in page 1

            titleText = updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions="DescriptionTravelBehaviourPage1ENG.html"
                , folder=folderTravelBehaviourQuestionsPage1)

            setHeadingPage(grid=ui.travelBehaviourTitleGrid, text=titleText
                           , capitalLetters=False, centered=False, fontFactor=window.fontFactor, fontSize=20,
                           fontLetter=window.fontLetter)

            # setBodyTextPage(grid=ui.travelBehaviourFormLayoutDescriptionPage1
            #                 , text=descriptionText, fontLetter=window.fontLetter,fontSize = descriptionFontSize, fontFactor=window.fontFactor)

        #Create widgets

        #How many trips per week in this route
        ui.spinBoxTripsPerWeekBuses = QSpinBox()
        ui.spinBoxTripsPerWeekBuses.setMaximum(20)
        ui.spinBoxTripsPerWeekBuses.setSuffix('     ')
        # ui.spinBoxTripsPerWeekBuses.setSuffix(' trip(s) per week')

        #How often you find real time information at bus stops? (Percentage)

        #How often do you use your phone app to check in how long the next bus is coming? (Percentage)

        # How often do you have available information about the time arrival of the next bus (e.g. checking your phone or real information at the bus stop)(Percentage)
        ui.spinBoxRealTimeInformation = QSpinBox() #Percentage between 0 and 100
        ui.spinBoxRealTimeInformation.setSuffix('%')
        ui.spinBoxRealTimeInformation.setMaximum(100)

        #How often you do NOT find a seat available in the bus?

        # Journey Time (Minutes)
        ui.spinBoxJourneyTime = QSpinBox()

        # In-Vehicle Time (Minutes)
        ui.spinBoxInVehicleTime = QSpinBox()

        # Waiting Time (Minutes)
        ui.spinBoxWaitingTime = QSpinBox()

        # Walking Time (Minutes)
        ui.spinBoxWalkingTime = QSpinBox()

        #Set maximum value for spin boxes of time attributes

        for spinBoxTimeAttribute in [ui.spinBoxWalkingTime,ui.spinBoxWaitingTime,ui.spinBoxInVehicleTime,ui.spinBoxJourneyTime]:
            # spinBoxTimeAttribute.setSuffix(' minute(s)')
            spinBoxTimeAttribute.setSuffix('   ')
            spinBoxTimeAttribute.setMaximum(180)

        #Error message
        ui.errorMessageTravelBehaviourPage1Lbl = QLabel()

        #Add Qwidgets in the form layout

        #Trips per week in buses
        ui.tripsPerWeekBusesTravelBehaviourPageLbl = QLabel(questionsDescriptionsPage1Dict["tripsPerWeekBuses"].text().replace("_nQuestion_", str(
            window.nTravelBehaviourQuestionsPage1 + 1)))
        ui.travelBehaviourFormLayoutPage1.addRow(ui.tripsPerWeekBusesTravelBehaviourPageLbl)
        ui.travelBehaviourFormLayoutPage1.addRow(ui.spinBoxTripsPerWeekBuses, QLabel("trip(s) per week"))

        # Walking Time (aggregating the walking time in all the trip stages)
        ui.walkingTimeTravelBehaviourPageLbl = QLabel(questionsDescriptionsPage1Dict["walkingTime"].text().replace("_nQuestion_", str(
            window.nTravelBehaviourQuestionsPage1 + 2)))

        ui.travelBehaviourFormLayoutPage1.addRow(ui.walkingTimeTravelBehaviourPageLbl)
        ui.travelBehaviourFormLayoutPage1.addRow(ui.spinBoxWalkingTime, QLabel("minute(s)"))

        # Waiting Time
        ui.waitingTimeTravelBehaviourPageLbl = QLabel(questionsDescriptionsPage1Dict["waitingTime"].text().replace("_nQuestion_", str(
            window.nTravelBehaviourQuestionsPage1 + 3)))
        ui.travelBehaviourFormLayoutPage1.addRow(ui.waitingTimeTravelBehaviourPageLbl)
        ui.travelBehaviourFormLayoutPage1.addRow(ui.spinBoxWaitingTime, QLabel("minute(s)"))

        # In-vehicle Time
        ui.inVehicleTimeTravelBehaviourPageLbl = QLabel(questionsDescriptionsPage1Dict["inVehicleTime"].text().replace("_nQuestion_", str(
            window.nTravelBehaviourQuestionsPage1 + 4)))
        ui.travelBehaviourFormLayoutPage1.addRow(ui.inVehicleTimeTravelBehaviourPageLbl)
        ui.travelBehaviourFormLayoutPage1.addRow(ui.spinBoxInVehicleTime, QLabel("minute(s)"))

        # Journey Time
        ui.journeyTimeTravelBehaviourPageLbl = QLabel(questionsDescriptionsPage1Dict["journeyTime"].text().replace("_nQuestion_",str(window.nTravelBehaviourQuestionsPage1 + 5)))
        ui.travelBehaviourFormLayoutPage1.addRow(ui.journeyTimeTravelBehaviourPageLbl)
        ui.travelBehaviourFormLayoutPage1.addRow(ui.spinBoxJourneyTime, QLabel("minute(s)"))

        # Real Time Information
        ui.realTimeInformationTravelBehaviourPageLbl = QLabel(
            questionsDescriptionsPage1Dict["realTimeInformation"].text().replace("_nQuestion_", str(
                window.nTravelBehaviourQuestionsPage1 + 6)))
        ui.travelBehaviourFormLayoutPage1.addRow(ui.realTimeInformationTravelBehaviourPageLbl)
        ui.realTimeInformation2TravelBehaviourPageLbl = QLabel(questionsDescriptionsPage1Dict["realTimeInformation2"].text())
        ui.travelBehaviourFormLayoutPage1.addRow(ui.realTimeInformation2TravelBehaviourPageLbl)


        # ui.travelBehaviourFormLayoutPage1.addRow(ui.spinBoxRealTimeInformation, QLabel("of the trips"))

        #Origin Place (Radio Button)
        ui.radioButtonsGroupRealTimeInformation = QButtonGroup()  # Group of radio buttonsfor question 1 (Q1)
        # ui.radioButtonsGroupRealTimeInformation.setOrientation(QtCore.Qt.Horizontal)
        ui.radioButtonsRealTimeInformationDict = {} #Dictionary to iterate over radio buttons in the group
        ui.radioButtonsRealTimeInformationLblDict = {}  # Dictionary to iterate over radio buttons in the group
        # ui.radioButtonsRealTimeInformationLevels = ["Never","Very Rarely", "Rarely","Occasionally","Frequently","Very Frequently"]
        ui.radioButtonsRealTimeInformationLevels = ["Never (0% of the trips)","Occasionally (25% of the trips)", "Frequently (50% of the trips)", "Very Frequently (75% of the trips)","Always (100% of the trips)"]
        #Source Likert Scale: http://www.extension.iastate.edu/Documents/ANR/LikertScaleExamplesforSurveys.pdf

        for realTimeInformationLevel in ui.radioButtonsRealTimeInformationLevels:
            ui.radioButtonsRealTimeInformationLblDict[realTimeInformationLevel] = QLabel(realTimeInformationLevel)
            # ui.radioButtonsRealTimeInformationLblDict[realTimeInformationLevel].setFont(QFont("Times", 10*window.fontFactor))
            #
            # ui.radioButtonsRealTimeInformationDict[realTimeInformationLevel] = QRadioButton()

            ui.radioButtonsRealTimeInformationDict[realTimeInformationLevel] = QRadioButton(realTimeInformationLevel)
            ui.radioButtonsRealTimeInformationDict[realTimeInformationLevel].setFont(QFont("Times", 14 * window.fontFactor))
            ui.travelBehaviourFormLayoutPage1.addRow(ui.radioButtonsRealTimeInformationDict[realTimeInformationLevel])

            ui.radioButtonsGroupRealTimeInformation.addButton(ui.radioButtonsRealTimeInformationDict[realTimeInformationLevel])


            # ui.travelBehaviourFormLayoutPage1.addRow(ui.radioButtonsRealTimeInformationDict[realTimeInformationLevel]
            #                                          ,ui.radioButtonsRealTimeInformationLblDict[realTimeInformationLevel])

        #Format Labels

        for qLabel in [ui.tripsPerWeekBusesTravelBehaviourPageLbl,ui.walkingTimeTravelBehaviourPageLbl
                       , ui.waitingTimeTravelBehaviourPageLbl, ui.inVehicleTimeTravelBehaviourPageLbl
                       , ui.journeyTimeTravelBehaviourPageLbl
                        , ui.realTimeInformationTravelBehaviourPageLbl,ui.realTimeInformation2TravelBehaviourPageLbl]:

            qLabel.setFont(QFont("Times", 14*window.fontFactor))
            qLabel.setWordWrap(True)

        #Error Message
        setRedLettersQLabel(ui.errorMessageTravelBehaviourPage1Lbl)
        ui.errorMessageTravelBehaviourPage1Lbl.setFont((QFont(window.fontLetter, 18)))
        ui.travelBehaviourFormLayoutPage1.addRow(ui.errorMessageTravelBehaviourPage1Lbl)

    #Question about more frequent route in public transport
    if page == 2:

        #Font Size Description's Text
        descriptionFontSize = 20

        # Information Text Labels
        folderTravelBehaviourQuestionsPage2 = "TravelBehaviourQuestions/Page2"

        #Dictionary of descriptions for each question
        questionsDescriptionsPage2SPADict = {}
        questionsDescriptionsPage2ENGDict = {}
        questionsDescriptionsPage2Dict = {}
        # window.nTravelBehaviourQuestionsPage2 = window.nTravelBehaviourQuestionsPage1+1
        window.nTravelBehaviourQuestionsPage2 = 0
        idQuestions =["busRoute","tripsPerWeekMostFreqBusRoute","departureTime","origin","destination"]
        nQuestionsPage2 = len(idQuestions)

        for i in range(0,nQuestionsPage2):
            keyQuestion = idQuestions[i]
            questionsDescriptionsPage2SPADict[keyQuestion] = QLabel(updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions=keyQuestion+"QuestionSPA.html"
                , folder=folderTravelBehaviourQuestionsPage2))

            questionsDescriptionsPage2ENGDict[keyQuestion] = QLabel(updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions=keyQuestion + "QuestionENG.html"
                , folder=folderTravelBehaviourQuestionsPage2))

        #Origin Place (Radio Button)
        # ui.radioButtonsOrigin = QButtonGroup()  # Group of radio buttonsfor question 1 (Q1)
        # ui.radioButtonsOrigin.setOrientation(QtCore.Qt.Horizontal)
        # ui.radioButtonsOriginList = [] #List to iterate over radio buttons in the group
        # ui.radioButtonWorkOrigin = QRadioButton()  # Radio button Origin Work
        # ui.radioButtonStudyOrigin = QRadioButton()  # Radio button Origin Study
        # ui.radioButtonHomeOrigin = QRadioButton()  # Radio button Origin Home

        # Origin Place (Combo Box)
        ui.comboBoxOriginPlace = QComboBox()
        ui.comboBoxOriginPlaceLbl = QLabel()
        ui.comboBoxOriginPlaceLbl.setWordWrap(True)


        # ui.radioButtonOtherOrigin = QRadioButton()  # Radio button Origin Other

        ui.lineEditOtherOriginPlace = QLineEdit()  # Text edit if the user selct the option other origin
        # ui.lineEditOtherOrigin.setVisible(False) #Initially this line edit widget is not visible
        ui.lineEditOtherOriginPlace.setVisible(True)
        ui.lineEditOtherOriginPlaceLbl = QLabel()
        # ui.lineEditOtherOriginPlaceLbl.setWordWrap(True)
        # ui.lineEditOtherOriginPlaceLbl.setVisible(False)  # Initially this line edit widget is not visible

        # ui.comboBoxOriginPlace.clicked.connect(isComboBoxOtherOriginPlaceSelected())

        # for radioButton in [ui.radioButtonWorkOrigin, ui.radioButtonStudyOrigin,ui.radioButtonHomeOrigin,ui.radioButtonOtherOrigin]:
        #     radioButton.setFocusPolicy(QtCore.Qt.NoFocus)
        #     radioButton.setFont(QFont(window.fontLetter, window.fontFactor * 16))
        #     ui.radioButtonsOrigin.addButton(radioButton)
        #     ui.radioButtonsOriginList.append(radioButton)
        #     radioButton.clicked.connect(isRadioButtonOtherOriginChecked)

        # Origin Borough (combobox)

        ui.comboBoxOriginBorough = QComboBox()
        ui.comboBoxOriginBoroughLbl = QLabel()
        ui.comboBoxOriginBoroughLbl.setWordWrap(True)
        if window.currentParticipant.cityOfResidence == "Santiago":
            ui.comboBoxOriginBorough.addItems(ui.santiagoLocationsList)
            ui.comboBoxOriginBorough.addItems(["Otro"])  # Add option "Other" in the combobox
        if window.currentParticipant.cityOfResidence == "London":
            ui.comboBoxOriginBorough.addItems(ui.londonLocationsList)
            ui.comboBoxOriginBorough.addItems(["Other"])  # Add option "Other" in the combobox

        ui.lineEditOtherOriginBorough = QLineEdit()  # Text edit if the user selct the option other OriginBorough
        # ui.lineEditOtherOriginBorough.setVisible(False) #Initially this line edit widget is not visible
        ui.lineEditOtherOriginBorough.setVisible(True)
        ui.lineEditOtherOriginBoroughLbl = QLabel()
        # ui.lineEditOtherOriginBoroughLbl.setWordWrap(True)
        # ui.lineEditOtherOriginBoroughLbl.setVisible(False)  # Initially this line edit widget is not visible

        #Destination Place (Radio Buttons)
        # ui.radioButtonsDestination = QButtonGroup()  # Group of radio buttonsfor question 1 (Q1)
        # ui.radioButtonsDestinationList = [] #List to iterate over radio buttons in the group
        # ui.radioButtonWorkDestination = QRadioButton()  # Radio button Origin Work
        # ui.radioButtonStudyDestination = QRadioButton()  # Radio button Origin Study
        # ui.radioButtonHomeDestination = QRadioButton()  # Radio button Origin Home

        # Destination Place (Combo box)
        ui.comboBoxDestinationPlace = QComboBox()
        ui.comboBoxDestinationPlaceLbl = QLabel()
        ui.comboBoxDestinationPlaceLbl.setWordWrap(True)


        # ui.radioButtonOtherDestination = QRadioButton()  # Radio button Origin Other
        ui.lineEditOtherDestinationPlace = QLineEdit() #This widget is ctivated if the user selects the option other destination
        # ui.lineEditOtherDestination.setVisible(False)  # Initially this line edit widget is not visible
        ui.lineEditOtherDestinationPlace.setVisible(True)
        ui.lineEditOtherDestinationPlaceLbl = QLabel()
        # ui.lineEditOtherDestinationPlaceLbl.setWordWrap(True)
        # ui.lineEditOtherDestinationPlaceLbl.setVisible(False)  # Initially this line edit widget is not visible

        #Event to connect combobox with function for other destination
        # ui.comboBoxDestinationPlace.clicked.connect(isComboBoxOtherDestinationPlaceSelected)

        # for radioButton in [ui.radioButtonWorkDestination, ui.radioButtonStudyDestination,ui.radioButtonHomeDestination,ui.radioButtonOtherDestination]:
        #     radioButton.setFocusPolicy(QtCore.Qt.NoFocus)
        #     radioButton.setFont(QFont(window.fontLetter, window.fontFactor * 16))
        #     ui.radioButtonsDestination.addButton(radioButton)
        #     ui.radioButtonsDestinationList.append(radioButton)
        #     radioButton.clicked.connect(isRadioButtonOtherDestinationChecked)

        # Destination Borough (combobox)
        ui.comboBoxDestinationBorough = QComboBox()
        ui.comboBoxDestinationBoroughLbl = QLabel()
        # ui.comboBoxDestinationBoroughLbl.setWordWrap(True)
        if window.currentParticipant.cityOfResidence == "Santiago":
            ui.comboBoxDestinationBorough.addItems(ui.santiagoLocationsList)
            ui.comboBoxDestinationBorough.addItems(["Otro"])# Add option "Other" in the combobox
        if window.currentParticipant.cityOfResidence == "London":
            ui.comboBoxDestinationBorough.addItems(ui.londonLocationsList)
            ui.comboBoxDestinationBorough.addItems(["Other"])  # Add option "Other" in the combobox


        ui.lineEditOtherDestinationBorough = QLineEdit()  # Text edit if the user selct the option other DestinationBorough
        # ui.lineEditOtherDestinationBorough.setVisible(False) #Initially this line edit widget is not visible
        ui.lineEditOtherDestinationBorough.setVisible(True)
        ui.lineEditOtherDestinationBoroughLbl = QLabel()
        # ui.lineEditOtherDestinationBoroughLbl.setWordWrap(True)
        # ui.lineEditOtherDestinationBoroughLbl.setVisible(False)  # Initially this line edit widget is not visible

        # Bus Route
        ui.lineEditBusRoute = QLineEdit() #In contrast to QLineEdit, this widget only shows one line.

        #How many trips per week in this route
        ui.spinBoxTripsPerWeekMostFreqBusRoute = QSpinBox()

        # Departure Time
        ui.timeEditDepartureTime = QTimeEdit()
        ui.timeEditDepartureTime.setDisplayFormat("HH:mm") #Format that only shows hour and minute

        #One mode or two modes of transportation (add a table, so the person can add the trip stages)

        #Origin trip in bus (Streets Intersection). The participants can put IDK

        #Destination trip on bus (Streets Intersection). The participants can put IDK

        #Please evaluate between 0 and 100, your experience travelling in buses and metro. Before I should ask if use both modes to travel

        if window.mainExperiment.languageCondition == "spanish":

            # General Description for questions in page 2

            # Title

            titleText = updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions="DescriptionTravelBehaviourPage2SPA.html"
                , folder=folderTravelBehaviourQuestionsPage2)

            setHeadingPage(grid=ui.travelBehaviourTitleGrid,
                           text=titleText
                           , capitalLetters=False, centered=False, fontFactor=window.fontFactor, fontSize=24
                           , fontLetter=window.fontLetter)

            # setBodyTextPage(grid=ui.travelBehaviourFormLayoutDescriptionPage2
            #                 , text=descriptionText, fontLetter=window.fontLetter
            #                 , fontSize=descriptionFontSize, fontFactor=window.fontFactor)

            #Dictionary with the description of each question
            questionsDescriptionsPage2Dict = questionsDescriptionsPage2SPADict

            # Trip origin (Combo box)
            ui.comboBoxOriginPlace.addItems([" ", "Universidad", "Trabajo", "Casa", "Other"])
            ui.lineEditOtherOriginPlaceLbl.setText("Si otro, por favor especificar:")
            ui.comboBoxOriginPlaceLbl.setText("Lugar")

            # # Trip origin (Radio Buttons)
            # ui.radioButtonWorkOrigin.setText("Trabajo")
            # ui.radioButtonStudyOrigin.setText("Universidad")
            # ui.radioButtonHomeOrigin.setText("Casa")
            # ui.radioButtonOtherOrigin.setText("Otro")

            #Trip Origin Borough
            ui.comboBoxOriginBoroughLbl.setText("Comuna")
            ui.lineEditOtherOriginBoroughLbl.setText("Si otro, por favor especificar:")

            # # Trip destination (Combo box)
            # ui.radioButtonWorkDestination.setText("Trabajo")
            # ui.radioButtonStudyDestination.setText("Universidad")
            # ui.radioButtonHomeDestination.setText("Casa")
            # ui.radioButtonOtherDestination.setText("Otro")
            # ui.lineEditOtherDestinationLbl.setText("Por favor specifica:")

            # Trip Destination Borough
            ui.comboBoxDestinationBoroughLbl.setText("Comuna")
            ui.lineEditOtherDestinationBoroughLbl.setText("Si otro, por favor especificar:")

            #Trip Destination Borough
            ui.comboBoxDestinationBoroughLbl.setText("Comuna")
            ui.lineEditOtherDestinationBoroughLbl.setText("Si otro, por favor especificar:")

            ui.errorMessageTravelBehaviourPage2Lbl = QLabel()

        if window.mainExperiment.languageCondition == "english":

            # General Description for questions in page 2

            # Title
            titleText = updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions="DescriptionTravelBehaviourPage2ENG.html"
                , folder=folderTravelBehaviourQuestionsPage2)

            setHeadingPage(grid=ui.travelBehaviourTitleGrid,
                           text=titleText
                           , capitalLetters=False, centered=False, fontFactor=window.fontFactor, fontSize=20
                           , fontLetter=window.fontLetter)

            # setBodyTextPage(grid=ui.travelBehaviourFormLayoutDescriptionPage2
            #                 , text=descriptionText, fontLetter=window.fontLetter
            #                 , fontSize=descriptionFontSize, fontFactor=window.fontFactor)

            # Dictionary with the description of each question
            questionsDescriptionsPage2Dict = questionsDescriptionsPage2ENGDict

            # Trip origin (Combo box)
            ui.comboBoxOriginPlace.addItems([" ","University","Work","Home", "Other"])
            ui.lineEditOtherOriginPlaceLbl.setText("If Other, please specify:")
            ui.comboBoxOriginPlaceLbl.setText("Place")

            # Trip origin (Radio buttons)
            # ui.radioButtonWorkOrigin.setText("Work")
            # ui.radioButtonStudyOrigin.setText("University")
            # ui.radioButtonHomeOrigin.setText("Home")
            # ui.radioButtonOtherOrigin.setText("Other")

            # Trip Origin Borough
            ui.comboBoxOriginBoroughLbl.setText("Borough")
            ui.lineEditOtherOriginBoroughLbl.setText("If Other, please specify:")

            # Trip destination (Combo box)
            ui.comboBoxDestinationPlace.addItems([" ","University","Work","Home", "Other"])
            ui.lineEditOtherDestinationPlaceLbl.setText("If Other, please specify:")
            ui.comboBoxDestinationPlaceLbl.setText("Place")

            # # Trip Destination (Radio buttons)
            # ui.radioButtonWorkDestination.setText("Work")
            # ui.radioButtonStudyDestination.setText("University")
            # ui.radioButtonHomeDestination.setText("Home")
            # ui.radioButtonOtherDestination.setText("Other")

            # Trip Destination Borough
            ui.comboBoxDestinationBoroughLbl.setText("Borough")
            ui.lineEditOtherDestinationBoroughLbl.setText("If Other, please specify:")

            ui.errorMessageTravelBehaviourPage2Lbl = QLabel()

        #Add Qwidgets in the form layout

        ui.travelBehaviourFormLayoutPage2.setLabelAlignment(QtCore.Qt.AlignLeft)#Format of the form layout

        # Bus Route
        ui.busRouteTravelBehaviourPageLbl = QLabel(
            questionsDescriptionsPage2Dict["busRoute"].text().replace("_nQuestion_", str(
                window.nTravelBehaviourQuestionsPage2 + 1)))
        ui.busRouteTravelBehaviourPageLbl.setWordWrap(True)
        ui.busRouteTravelBehaviourPageLbl.setFont(QFont("Times", 15, QFont.Bold))
        ui.travelBehaviourFormLayoutPage2.addRow(ui.busRouteTravelBehaviourPageLbl)
        ui.travelBehaviourFormLayoutPage2.addRow(ui.lineEditBusRoute)

        #Trips per week
        ui.tripsPerWeekMostFreqBusRouteTravelBehaviourPageLbl = QLabel(questionsDescriptionsPage2Dict["tripsPerWeekMostFreqBusRoute"].text().replace("_nQuestion_", str(
            window.nTravelBehaviourQuestionsPage2 + 2)))
        ui.tripsPerWeekMostFreqBusRouteTravelBehaviourPageLbl.setFont(QFont("Times", 15, QFont.Bold))
        ui.travelBehaviourFormLayoutPage2.addRow(ui.tripsPerWeekMostFreqBusRouteTravelBehaviourPageLbl)
        ui.travelBehaviourFormLayoutPage2.addRow(ui.spinBoxTripsPerWeekMostFreqBusRoute)

        # Departure Time
        ui.departureTimeTravelBehaviourPageLbl = QLabel(questionsDescriptionsPage2Dict["departureTime"].text().replace("_nQuestion_", str(
            window.nTravelBehaviourQuestionsPage2 + 3)))
        ui.departureTimeTravelBehaviourPageLbl.setFont(QFont("Times", 15, QFont.Bold))
        ui.travelBehaviourFormLayoutPage2.addRow(ui.departureTimeTravelBehaviourPageLbl)

        ui.travelBehaviourFormLayoutPage2.addRow(ui.timeEditDepartureTime)


        #Origin
        ui.originTravelBehaviourPageLbl = QLabel(
            questionsDescriptionsPage2Dict["origin"].text().replace("_nQuestion_",
                                                                    str(window.nTravelBehaviourQuestionsPage2 + 4)))
        ui.originTravelBehaviourPageLbl.setWordWrap(True)
        ui.originTravelBehaviourPageLbl.setFont(QFont("Times", 15, QFont.Bold))
        ui.travelBehaviourFormLayoutPage2.addRow(ui.originTravelBehaviourPageLbl)

        #i) Origin Place
        ui.travelBehaviourFormLayoutPage2.addRow(ui.comboBoxOriginPlaceLbl,ui.comboBoxOriginPlace)
        # Add a text edit box if the user selected the option other origin
        ui.travelBehaviourFormLayoutPage2.addRow(ui.lineEditOtherOriginPlaceLbl, ui.lineEditOtherOriginPlace)
        # for radiobutton in ui.radioButtonsOriginList:
        #     ui.travelBehaviourFormLayoutPage2.addRow(radiobutton)

        #ii) Origin Borough (combobox)
        ui.travelBehaviourFormLayoutPage2.addRow(ui.comboBoxOriginBoroughLbl, ui.comboBoxOriginBorough)
        ui.travelBehaviourFormLayoutPage2.addRow(ui.lineEditOtherOriginBoroughLbl, ui.lineEditOtherOriginBorough)


        #b) Destination
        ui.destinationTravelBehaviourPageLbl = QLabel(
            questionsDescriptionsPage2Dict["destination"].text().replace("_nQuestion_", str(
                window.nTravelBehaviourQuestionsPage2 + 5)))

        ui.destinationTravelBehaviourPageLbl.setFont(QFont("Times", 15, QFont.Bold))

        ui.travelBehaviourFormLayoutPage2.addRow(ui.destinationTravelBehaviourPageLbl)
        ui.destinationTravelBehaviourPageLbl.setWordWrap(True)

        # i) Destination Place (combobox)

        ui.travelBehaviourFormLayoutPage2.addRow(ui.comboBoxDestinationPlaceLbl,ui.comboBoxDestinationPlace)
        # Add a text edit box if the user selected the option other destination
        ui.travelBehaviourFormLayoutPage2.addRow(ui.lineEditOtherDestinationPlaceLbl, ui.lineEditOtherDestinationPlace)


        # #We add the option in the same row
        # ui.travelBehaviourFormLayoutPage2.addRow(ui.radioButtonsDestinationList)

        # for radiobutton in ui.radioButtonsDestinationList:
        #     ui.travelBehaviourFormLayoutPage2.addRow(radiobutton)

        # ii) Destination Borough (combobox)
        ui.travelBehaviourFormLayoutPage2.addRow(ui.comboBoxDestinationBoroughLbl, ui.comboBoxDestinationBorough)
        ui.travelBehaviourFormLayoutPage2.addRow(ui.lineEditOtherDestinationBoroughLbl, ui.lineEditOtherDestinationBorough)


        #Format Labels
        for qLabel in [ui.departureTimeTravelBehaviourPageLbl,ui.tripsPerWeekMostFreqBusRouteTravelBehaviourPageLbl
                        ,ui.busRouteTravelBehaviourPageLbl, ui.originTravelBehaviourPageLbl, ui.destinationTravelBehaviourPageLbl]:

            qLabel.setFont(QFont("Times", 14*window.fontFactor))
            qLabel.setWordWrap(True)

        #Format Sub Labels

        for qLabel in [ui.comboBoxOriginPlaceLbl, ui.comboBoxOriginBoroughLbl, ui.comboBoxDestinationPlaceLbl, ui.comboBoxDestinationBoroughLbl]:
            qLabel.setFont(QFont("Times", 12*window.fontFactor))
            qLabel.setWordWrap(True)

        for qLabel in [ui.lineEditOtherDestinationPlaceLbl, ui.lineEditOtherOriginBoroughLbl, ui.lineEditOtherDestinationBoroughLbl,
                       ui.lineEditOtherOriginPlaceLbl]:
            qLabel.setFont(QFont("Times", 12*window.fontFactor))

        #Error Message
        setRedLettersQLabel(ui.errorMessageTravelBehaviourPage2Lbl)
        ui.travelBehaviourFormLayoutPage2.addRow(ui.errorMessageTravelBehaviourPage2Lbl)

    if page == 3: #Evaluate waiting, travel time, and their reliability (using sliders bars).

        folderTravelBehaviourQuestionsPage3 = "TravelBehaviourQuestions/Page3"

        #Dictionary of descriptions for each question
        questionsDescriptionsPage3SPADict = {}
        questionsDescriptionsPage3ENGDict = {}
        questionsDescriptionsPage3Dict = {}
        # window.nTravelBehaviourQuestionsPage2 = window.nTravelBehaviourQuestionsPage1+1
        window.nTravelBehaviourQuestionsPage3 = 0
        idQuestions =["waitingTime","waitingTimeReliability","inVehicleTime","inVehicleTimeReliability","journeyTime"]
        nQuestionsPage3 = len(idQuestions)

        for i in range(0,nQuestionsPage3):
            keyQuestion = idQuestions[i]
            questionsDescriptionsPage3SPADict[keyQuestion] = QLabel(updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions=keyQuestion+"QuestionSPA.html"
                , folder=folderTravelBehaviourQuestionsPage3))

            questionsDescriptionsPage3ENGDict[keyQuestion] = QLabel(updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions=keyQuestion + "QuestionENG.html"
                , folder=folderTravelBehaviourQuestionsPage3))

        sliderTitle = ""
        window.sliderLevels = None

        if window.mainExperiment.languageCondition == "spanish":

            #Dictionary with the description of each question
            questionsDescriptionsPage3Dict = questionsDescriptionsPage3SPADict

            titleText = updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions="DescriptionTravelBehaviourPage3SPA.html"
                , folder=folderTravelBehaviourQuestionsPage3)

            setHeadingPage(grid=ui.travelBehaviourTitleGrid, text=titleText
                         , capitalLetters=False, centered=False, fontFactor=window.fontFactor,fontSize = 24,
                         fontLetter=window.fontLetter)

            # sliderLevels = {1: "No estoy segura (1)", 2: "No lo sé",3: "Estoy segura (2)"}
            window.sliderLevels = {1: "Muy Mal \n(Evaluación: 0%)",
                                   2: "Muy Bien \n(Evaluación: 100%)"}
            window.allSliderLevels = {1: "Muy Mal \n(0%)", 2: "",
                                      3: "Muy Bien \n(100%)"}  # This is what is shown in the slider

            sliderTitle = "Evaluación"

        if window.mainExperiment.languageCondition == "english":
            # Dictionary with the description of each question
            questionsDescriptionsPage3Dict = questionsDescriptionsPage3ENGDict

            titleText = updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions="DescriptionTravelBehaviourPage3ENG.html"
                , folder=folderTravelBehaviourQuestionsPage3)

            setHeadingPage(grid=ui.travelBehaviourTitleGrid, text=titleText
                         , capitalLetters=False, centered=False, fontFactor=window.fontFactor,fontSize = 20,
                         fontLetter=window.fontLetter)

            # sliderLevels = {1: "I am not sure (1)",2: "I do not know (2)", 3: "I am sure (3)"}
            window.sliderLevels = {1: "Low \n(Importance: 0%)",
                                   2: "High \n(Importance: 100%)"}
            window.allSliderLevels = {1: "Low\n(0%)", 2: "",
                                      3: "High\n(100%)"}  # This is what is shown in the slider

            sliderTitle = "Importance"

        # window.lastSliderLevel = window.sliderLevels[len(window.sliderLevels.keys())]
        # window.firstSliderLevel = window.sliderLevels[1]

        # Create slider for each of the four items evaluated by participants

        # i) Waiting Time
        ui.sliderWaitingTimeImportanceTravelBehaviourPage = mySliderBar(sliderTitle=sliderTitle, allLevels=window.allSliderLevels
                                                             , levels=window.sliderLevels
                                                             , language=window.mainExperiment.languageCondition
                                                             , discreteRange=False
                                                             , defaultValue = 50
                                                             , sliderGrid=ui.waitingTimeImportanceSliderGrid
                                                             , fontLetter=window.fontLetter,fontSize = 14, fontFactor=window.fontFactor)

        ui.sliderWaitingTimeImportanceTravelBehaviourPage.setDefaultValue()
        ui.waitingTimeImportanceSliderGrid.addWidget(ui.sliderWaitingTimeImportanceTravelBehaviourPage, 0, 0)

        ui.waitingTimeImportanceSliderLblGrid.addWidget(QLabel(), 0, 0)
        ui.waitingTimeImportanceSliderLbl = ui.waitingTimeImportanceSliderLblGrid.itemAtPosition(0, 0).widget()
        ui.waitingTimeImportanceSliderLbl.setText(questionsDescriptionsPage3Dict["waitingTime"].text().replace("_nQuestion_", str(
                window.nTravelBehaviourQuestionsPage3 + 1)))

        # ii) In-vehicle Time
        ui.sliderInVehicleTimeImportanceTravelBehaviourPage = mySliderBar(sliderTitle=sliderTitle, allLevels=window.allSliderLevels,
                                                             levels=window.sliderLevels,
                                                             language=window.mainExperiment.languageCondition
                                                             , discreteRange=False
                                                             , defaultValue = 50
                                                             , sliderGrid=ui.inVehicleTimeImportanceSliderGrid,
                                                             fontLetter=window.fontLetter, fontSize = 14, fontFactor=window.fontFactor)

        ui.sliderInVehicleTimeImportanceTravelBehaviourPage.setDefaultValue()
        ui.inVehicleTimeImportanceSliderGrid.addWidget(ui.sliderInVehicleTimeImportanceTravelBehaviourPage, 0, 0)

        ui.inVehicleTimeImportanceSliderLblGrid.addWidget(QLabel(), 0, 0)
        ui.inVehicleTimeImportanceSliderLbl = ui.inVehicleTimeImportanceSliderLblGrid.itemAtPosition(0, 0).widget()
        ui.inVehicleTimeImportanceSliderLbl.setText(
            questionsDescriptionsPage3Dict["inVehicleTime"].text().replace("_nQuestion_", str(
                window.nTravelBehaviourQuestionsPage3 + 2)))

        # iii) Journey Time Importance

        ui.sliderJourneyTimeImportanceTravelBehaviourPage = mySliderBar(sliderTitle=sliderTitle,
                                                                        allLevels=window.allSliderLevels,
                                                                        levels=window.sliderLevels,
                                                                        language=window.mainExperiment.languageCondition
                                                                        , discreteRange=False
                                                                        , defaultValue=50
                                                                        , sliderGrid=ui.journeyTimeImportanceSliderGrid
                                                                        , fontLetter=window.fontLetter, fontSize=14,
                                                                        fontFactor=window.fontFactor)

        ui.sliderJourneyTimeImportanceTravelBehaviourPage.setDefaultValue()
        ui.journeyTimeImportanceSliderGrid.addWidget(ui.sliderJourneyTimeImportanceTravelBehaviourPage, 0, 0)

        ui.journeyTimeImportanceSliderLblGrid.addWidget(QLabel(), 0, 0)
        ui.journeyTimeImportanceSliderLbl = ui.journeyTimeImportanceSliderLblGrid.itemAtPosition(0, 0).widget()
        ui.journeyTimeImportanceSliderLbl.setText(
            questionsDescriptionsPage3Dict["journeyTime"].text().replace("_nQuestion_", str(
                window.nTravelBehaviourQuestionsPage3 + 3)))

        # iv) Waiting Time Reliability
        ui.sliderWaitingTimeReliabilityImportanceTravelBehaviourPage = mySliderBar(sliderTitle=sliderTitle, allLevels=window.allSliderLevels,
                                                             levels=window.sliderLevels,
                                                             language=window.mainExperiment.languageCondition
                                                             , discreteRange=False
                                                             ,defaultValue = 50
                                                             ,sliderGrid=ui.waitingTimeReliabilityImportanceSliderGrid
                                                             ,fontLetter=window.fontLetter, fontSize = 14, fontFactor=window.fontFactor)

        ui.sliderWaitingTimeReliabilityImportanceTravelBehaviourPage.setDefaultValue()
        ui.waitingTimeReliabilityImportanceSliderGrid.addWidget(ui.sliderWaitingTimeReliabilityImportanceTravelBehaviourPage, 0, 0)



        ui.waitingTimeReliabilityImportanceSliderLblGrid.addWidget(QLabel(), 0, 0)
        ui.waitingTimeReliabilityImportanceSliderLbl = ui.waitingTimeReliabilityImportanceSliderLblGrid.itemAtPosition(0, 0).widget()
        ui.waitingTimeReliabilityImportanceSliderLbl.setText(questionsDescriptionsPage3Dict["waitingTimeReliability"].text().replace("_nQuestion_", str(
                window.nTravelBehaviourQuestionsPage3 + 4)))

        # v) In-Vehicle Time Reliability
        ui.sliderInVehicleTimeReliabilityImportanceTravelBehaviourPage = mySliderBar(sliderTitle=sliderTitle, allLevels=window.allSliderLevels,
                                                             levels=window.sliderLevels,
                                                             language=window.mainExperiment.languageCondition
                                                             , discreteRange=False
                                                             , defaultValue=50
                                                             ,sliderGrid=ui.inVehicleTimeReliabilityImportanceSliderGrid,
                                                             fontLetter=window.fontLetter, fontSize = 14, fontFactor=window.fontFactor)

        ui.sliderInVehicleTimeReliabilityImportanceTravelBehaviourPage.setDefaultValue()
        ui.inVehicleTimeReliabilityImportanceSliderGrid.addWidget(ui.sliderInVehicleTimeReliabilityImportanceTravelBehaviourPage, 0, 0)

        ui.inVehicleTimeReliabilityImportanceSliderLblGrid.addWidget(QLabel(), 0, 0)
        ui.inVehicleTimeReliabilityImportanceSliderLbl = ui.inVehicleTimeReliabilityImportanceSliderLblGrid.itemAtPosition(0, 0).widget()
        ui.inVehicleTimeReliabilityImportanceSliderLbl.setText(
            questionsDescriptionsPage3Dict["inVehicleTimeReliability"].text().replace("_nQuestion_", str(
                window.nTravelBehaviourQuestionsPage3 + 5)))

        #Format sliders label questions
        for label in [ui.waitingTimeImportanceSliderLbl, ui.inVehicleTimeImportanceSliderLbl, ui.journeyTimeImportanceSliderLbl
                     , ui.waitingTimeReliabilityImportanceSliderLbl,ui.inVehicleTimeReliabilityImportanceSliderLbl]:
            label.setFont(QFont("Times", 15*window.fontFactor, QFont.Bold))
            label.setWordWrap(True)

        #Format sliders titles
        for sliderBarTripImportance in [ui.sliderWaitingTimeImportanceTravelBehaviourPage,ui.sliderWaitingTimeReliabilityImportanceTravelBehaviourPage
            , ui.sliderInVehicleTimeImportanceTravelBehaviourPage,ui.sliderInVehicleTimeReliabilityImportanceTravelBehaviourPage
            ,ui.sliderJourneyTimeImportanceTravelBehaviourPage]:
            # Format of slider bars
            sliderBarTripImportance.setStyleSheet1()

            #Set initial slider value
            sliderBarTripImportance.setDefaultValue()

#pagesOrder is a vector with the sequence of pages shown in the experiment.

def setupTravelBehaviourPage(city):

    ui.travelBehaviourStackedWidget.setCurrentWidget(ui.travelBehaviourStackedWidgetPage1)
    ui.travelBehaviourStackedWidget.setFrameShape(QFrame.Box)

    if window.mainExperiment.languageCondition == "english":

        setTitlePage(grid=ui.travelBehaviourTitleGrid, text="Travel Behaviour"
                     , capitalLetters = True,centered = False, fontFactor = window.fontFactor, fontLetter = window.fontLetter)

    if window.mainExperiment.languageCondition == "spanish":

        setTitlePage(grid=ui.travelBehaviourTitleGrid, text="Patrones de viaje"
                     ,capitalLetters = True,centered = False, fontFactor = window.fontFactor, fontLetter = window.fontLetter)

        # ui.debriefLbl.setText("Gracias por tu participación. Por favor presiona "+ ui.buttonNextDebriefPage.text() + " para finalizar")

    readBoroughInformation(city = city,folder = "InputFiles")

    createFormLayoutTravelBehaviourPage(page = 1)

def travelBehaviourQuestionsPageCompleted(index):
    return True

def readWriteTravelBehaviourQuestionsFields(page):

    fieldsCompleted = None

    if page == 1:
        # PAGE 1

        # - Trips Per week
        ui.tripsPerWeekBusesTravelBehaviourPage = ui.spinBoxTripsPerWeekBuses.value()

        # Walking Time (Minutes)
        ui.walkingTimeTravelBehaviourPage = ui.spinBoxWalkingTime.value()

        # Waiting Time (Minutes)
        ui.waitingTimeTravelBehaviourPage = ui.spinBoxWaitingTime.value()

        # In-Vehicle Time (Minutes)
        ui.inVehicleTimeTravelBehaviourPage = ui.spinBoxInVehicleTime.value()

        #- Journey Time (Minutes)
        ui.journeyTimeTravelBehaviourPage = ui.spinBoxJourneyTime.value()

        #Real Time Information
        # ui.realTimeInformationTravelBehaviourPage = ui.spinBoxRealTimeInformation.value()

        ui.realTimeInformationTravelBehaviourPage = None

        for key in ui.radioButtonsRealTimeInformationDict.keys():
            radioButtonRealTimeInformation = ui.radioButtonsRealTimeInformationDict[key]

            if radioButtonRealTimeInformation.isChecked() is True:
                ui.realTimeInformationTravelBehaviourPage = key

        # Attributes label list
        attributesLblList = [ui.tripsPerWeekBusesTravelBehaviourPageLbl
            , ui.walkingTimeTravelBehaviourPageLbl, ui.waitingTimeTravelBehaviourPageLbl
            , ui.inVehicleTimeTravelBehaviourPageLbl, ui.journeyTimeTravelBehaviourPageLbl
            , ui.realTimeInformationTravelBehaviourPageLbl, ui.realTimeInformation2TravelBehaviourPageLbl]

        fieldsCompleted = raiseErrorTravelBehaviorPage(page=1, attributesLblList=attributesLblList)

    if page == 2:

        # PAGE 2

        # - Origin Place
        ui.originPlaceTravelBehaviourPage = ui.comboBoxOriginPlace.currentText()
        ui.otherOriginPlaceTravelBehaviourPage = ui.lineEditOtherOriginPlace.text()

        # ui.originPlaceTravelBehaviourPage = None
        # for radioButton in ui.radioButtonsOriginList:
        #     if radioButton.isChecked() is True:
        #
        #         if radioButton == ui.radioButtonWorkOrigin:
        #             ui.originPlaceTravelBehaviourPage = "origin"
        #
        #         elif radioButton == ui.radioButtonStudyOrigin:
        #             ui.originPlaceTravelBehaviourPage = "study"
        #
        #         elif radioButton == ui.radioButtonHomeOrigin:
        #             ui.originPlaceTravelBehaviourPage = "home"
        #
        #         elif radioButton == ui.radioButtonOtherOrigin:
        #             ui.originPlaceTravelBehaviourPage = "other: "+ ui.lineEditOtherOrigin.text()

        # - Origin Borough
        ui.originBoroughTravelBehaviourPage = ui.comboBoxOriginBorough.currentText()
        ui.otherOriginBoroughTravelBehaviourPage = ui.lineEditOtherOriginBorough.text()

        # - Destination Place
        ui.destinationPlaceTravelBehaviourPage = ui.comboBoxDestinationPlace.currentText()
        ui.otherDestinationPlaceTravelBehaviourPage = ui.lineEditOtherDestinationPlace.text()
        # ui.destinationPlaceTravelBehaviourPage = None

        # for radioButton in ui.radioButtonsDestinationList:
        #     if radioButton.isChecked() is True:
        #
        #         if radioButton == ui.radioButtonWorkDestination:
        #             ui.destinationPlaceTravelBehaviourPage = "work"
        #
        #         elif radioButton == ui.radioButtonStudyDestination:
        #             ui.destinationPlaceTravelBehaviourPage = "study"
        #
        #         elif radioButton == ui.radioButtonHomeDestination:
        #             ui.destinationPlaceTravelBehaviourPage = "home"
        #
        #         elif radioButton == ui.radioButtonOtherDestination:
        #             ui.destinationPlaceTravelBehaviourPage = "other: "+ ui.lineEditOtherDestination.text()

        # - Destination Borough(Complete)
        ui.destinationBoroughTravelBehaviourPage = ui.comboBoxDestinationBorough.currentText()
        ui.otherDestinationBoroughTravelBehaviourPage = ui.lineEditOtherDestinationBorough.text()

        # - Bus Route
        ui.busRouteTravelBehaviourPage = ui.lineEditBusRoute.text()

        # - Departure Time
        ui.departureTimeTravelBehaviourPage = ui.timeEditDepartureTime.text()

        # - Trips Per week
        ui.tripsPerWeekMostFreqBusRouteTravelBehaviourPage = ui.spinBoxTripsPerWeekMostFreqBusRoute.value()

        #Attributes label list
        attributesLblList = [ui.busRouteTravelBehaviourPageLbl
                          , ui.tripsPerWeekMostFreqBusRouteTravelBehaviourPageLbl,ui.departureTimeTravelBehaviourPageLbl
                          , ui.originTravelBehaviourPageLbl, ui.destinationTravelBehaviourPageLbl
                          , ui.comboBoxOriginPlaceLbl,ui.lineEditOtherOriginPlaceLbl
                          , ui.comboBoxOriginBoroughLbl,ui.lineEditOtherOriginBoroughLbl
                          , ui.comboBoxDestinationPlaceLbl,ui.lineEditOtherDestinationPlaceLbl
                          , ui.comboBoxDestinationBoroughLbl, ui.lineEditOtherDestinationBoroughLbl]

        fieldsCompleted = raiseErrorTravelBehaviorPage(page=2, attributesLblList=attributesLblList)

    if page == 3: #Last page, here we write the information in the corresponding file

        #Obtain values from sliders
        # PAGE 3
        ui.waitingTimeImportanceTravelBehaviourPage = ui.sliderWaitingTimeImportanceTravelBehaviourPage.currentValue()
        ui.waitingTimeReliabilityImportanceTravelBehaviourPage = ui.sliderWaitingTimeReliabilityImportanceTravelBehaviourPage.currentValue()
        ui.inVehicleTimeImportanceTravelBehaviourPage = ui.sliderInVehicleTimeImportanceTravelBehaviourPage.currentValue()
        ui.inVehicleTimeReliabilityImportanceTravelBehaviourPage = ui.sliderInVehicleTimeReliabilityImportanceTravelBehaviourPage.currentValue()
        ui.journeyTimeImportanceTravelBehaviourPage = ui.sliderJourneyTimeImportanceTravelBehaviourPage.currentValue()

        #Attributes label list
        attributesLblList = [ui.waitingTimeImportanceSliderLbl
                             ,ui.waitingTimeReliabilityImportanceSliderLbl
                          , ui.inVehicleTimeImportanceSliderLbl
                          , ui.inVehicleTimeReliabilityImportanceSliderLbl
                          , ui.journeyTimeImportanceSliderLbl]

        fieldsCompleted = raiseErrorTravelBehaviorPage(page=3, attributesLblList=attributesLblList)

        if fieldsCompleted is True:
            #Create object that holds all the infromation about travel behaviour indicated by the participant
            travelBehaviourInformation = TravelBehaviourInformation(filePath = window.mainExperiment.pathTravelBehaviourInformation
                                                                    , participantId = window.currentParticipant.id

                                                                    , originPlace = ui.originPlaceTravelBehaviourPage
                                                                    , otherOriginPlace=ui.otherOriginPlaceTravelBehaviourPage

                                                                    , originBorough = ui.originBoroughTravelBehaviourPage
                                                                    , otherOriginBorough=ui.otherOriginBoroughTravelBehaviourPage

                                                                    , destinationPlace = ui.destinationPlaceTravelBehaviourPage
                                                                    , otherDestinationPlace=ui.otherDestinationPlaceTravelBehaviourPage

                                                                    , destinationBorough = ui.destinationBoroughTravelBehaviourPage
                                                                    , otherDestinationBorough=ui.otherDestinationBoroughTravelBehaviourPage

                                                                    , busRoute = ui.busRouteTravelBehaviourPage
                                                                    , tripsPerWeekBuses = ui.tripsPerWeekBusesTravelBehaviourPage

                                                                    , tripsPerWeekMostFreqBusRoute=ui.tripsPerWeekMostFreqBusRouteTravelBehaviourPage
                                                                    , departureTime = ui.departureTimeTravelBehaviourPage
                                                                    , waitingTime = ui.waitingTimeTravelBehaviourPage
                                                                    , inVehicleTime = ui.inVehicleTimeTravelBehaviourPage
                                                                    , walkingTime = ui.walkingTimeTravelBehaviourPage
                                                                    , journeyTime=ui.journeyTimeTravelBehaviourPage
                                                                    , realTimeInformation=ui.realTimeInformationTravelBehaviourPage

                                                                    , realWaitingTimeImportance = ui.waitingTimeImportanceTravelBehaviourPage
                                                                    , realWaitingTimeReliabilityImportance = ui.waitingTimeReliabilityImportanceTravelBehaviourPage
                                                                    , realInVehicleTimeImportance = ui.inVehicleTimeImportanceTravelBehaviourPage
                                                                    , realInVehicleTimeReliabilityImportance = ui.inVehicleTimeReliabilityImportanceTravelBehaviourPage
                                                                    , realJourneyTimeImportance = ui.journeyTimeImportanceTravelBehaviourPage
                                                                    )

        #Here we write the information
        window.currentParticipant.setTravelBehaviourInformation(travelBehaviourInformation = travelBehaviourInformation)

        window.currentParticipant.travelBehaviourInformation.writeTravelBehaviourInformationCsv()

    return fieldsCompleted

def buttonNextTravelBehaviourPageClicked():

    #Return False if not all atributes were completed. When returns True it will write the information in a file
    currentIndexTravelBehaviourStackedWidget = ui.travelBehaviourStackedWidget.currentIndex()
    currentPageTravelBehaviourStackedWidget = currentIndexTravelBehaviourStackedWidget + 1

    lastPage = (ui.travelBehaviourStackedWidget.currentIndex()==ui.travelBehaviourStackedWidget.count()-1)
    pageCompleted = readWriteTravelBehaviourQuestionsFields(page = currentPageTravelBehaviourStackedWidget)

    if lastPage is False and pageCompleted is True:
        createFormLayoutTravelBehaviourPage(page=currentPageTravelBehaviourStackedWidget+1)
        ui.travelBehaviourStackedWidget.setCurrentIndex(ui.travelBehaviourStackedWidget.currentIndex()+1)

    elif lastPage is True and pageCompleted is True:
        ui.stackedWidget.setCurrentWidget(ui.experimentDebriefPage)

# ***************   (Page) Experiment Debrief Questions *************************************** #

#Here we ask general questions about the experiment. The strategies the participant use to answer and a open question.

window.nExperimentDebriefQuestionsPage1 = None
window.nExperimentDebriefQuestionsPage2 = None
window.nExperimentDebriefQuestionsPage3 = None


def createSlidersExperimentIdentificationLevel():
    folderTravelBehaviourQuestionsPage3 = "TravelBehaviourQuestions/Page3"

    #a) Experienced Experiment

    # Levels of the slider

    sliderTitle = ""

    if window.mainExperiment.languageCondition == "spanish":
        # sliderLevels = {1: "No estoy segura (1)", 2: "No lo sé",3: "Estoy segura (2)"}
        window.sliderLevels = {1: "Nada \n(Nivel de Identificación: 0%)",
                               2: "Completamente \n(Nivel de Identificación: 100%)"}
        window.allSliderLevels = {1: "Nada \n(0%)", 2: "",
                                  3: "Completamente \n(100%)"}  # This is what is shown in the slider

        sliderTitle ="Nivel de Identificación"

    if window.mainExperiment.languageCondition == "english":
        # sliderLevels = {1: "I am not sure (1)",2: "I do not know (2)", 3: "I am sure (3)"}
        window.sliderLevels = {1: "Not at all \n(Level of Association: 0%)",
                               2: "Completely \n(Level of Association: 100%)"}
        window.allSliderLevels = {1: "Not at all\n(0%)", 2: "",
                                  3: "Completely\n(100%)"}  # This is what is shown in the slider

        sliderTitle ="Level of Association"

    window.lastSliderLevel = window.sliderLevels[len(window.sliderLevels.keys())]
    window.firstSliderLevel = window.sliderLevels[1]

    # Create slider
    ui.sliderExperiencedExperimentIdentificationLevelExperimentDebriefPage = mySliderBar(sliderTitle = sliderTitle
                                                                                       , allLevels=window.allSliderLevels, levels=window.sliderLevels
                                                                                       ,language=window.mainExperiment.languageCondition
                                                      , discreteRange=False, defaultValue = 50
                                                      , sliderGrid=ui.experiencedExperimentIdentificationSliderGrid
                                                      ,fontLetter=window.fontLetter, fontSize = 14, fontFactor=window.fontFactor)

    ui.sliderExperiencedExperimentIdentificationLevelExperimentDebriefPage.setStyleSheet1()
    ui.experiencedExperimentIdentificationSliderGrid.addWidget(ui.sliderExperiencedExperimentIdentificationLevelExperimentDebriefPage, 0, 0)

    # We show the horizontal slider after creating it
    ui.experiencedExperimentIdentificationSliderGrid.itemAtPosition(0, 0).widget().setVisible(True)
    # Title of the slider showing the certainty level
    ui.experiencedExperimentIdentificationSliderGrid.itemAtPosition(0, 0).widget().setVisible(True)

    # Default value for the certainty level
    ui.sliderExperiencedExperimentIdentificationLevelExperimentDebriefPage.setDefaultValue()

    #b) Descriptive Experiment

    # Levels of the slider

    sliderTitle = ""

    if window.mainExperiment.languageCondition == "spanish":
        # sliderLevels = {1: "No estoy segura (1)", 2: "No lo sé",3: "Estoy segura (2)"}
        window.sliderLevels = {1: "Nada \n(Nivel de Asociación: 0%)",
                               2: "Completamente \n(Nivel de Asociación: 100%)"}
        window.allSliderLevels = {1: "Nada \n(0%)", 2: "",
                                  3: "Completamente \n(100%)"}  # This is what is shown in the slider

        sliderTitle = "Nivel de Asociación\n"

    if window.mainExperiment.languageCondition == "english":
        # sliderLevels = {1: "I am not sure (1)",2: "I do not know (2)", 3: "I am sure (3)"}
        window.sliderLevels = {1: "Not at all \n(Level of Association: 0%)",
                               2: "Completely \n(Level of Association: 100%)"}
        window.allSliderLevels = {1: "Not at all\n(0%)", 2: "",
                                  3: "Completely\n(100%)"}  # This is what is shown in the slider

        sliderTitle ="Level of Association"

    window.lastSliderLevel = window.sliderLevels[len(window.sliderLevels.keys())]
    window.firstSliderLevel = window.sliderLevels[1]

    # Create slider
    ui.sliderDescriptiveExperimentIdentificationLevelExperimentDebriefPage = mySliderBar(sliderTitle=sliderTitle,
                                                                                       allLevels=window.allSliderLevels,
                                                                                       levels=window.sliderLevels,
                                                                                       language=window.mainExperiment.languageCondition
                                                                                       , defaultValue=50
                                                                                       , discreteRange=False,
                                                                                       sliderGrid=ui.descriptiveExperimentIdentificationSliderGrid,
                                                                                       fontLetter=window.fontLetter,
                                                                                       fontSize=14,
                                                                                       fontFactor=window.fontFactor)

    ui.sliderDescriptiveExperimentIdentificationLevelExperimentDebriefPage.setStyleSheet1()
    ui.descriptiveExperimentIdentificationSliderGrid.addWidget(
        ui.sliderDescriptiveExperimentIdentificationLevelExperimentDebriefPage, 0, 0)

    # We show the horizontal slider after creating it
    ui.descriptiveExperimentIdentificationSliderGrid.itemAtPosition(0, 0).widget().setVisible(True)
    # Title of the slider showing the certainty level
    ui.descriptiveExperimentIdentificationSliderGrid.itemAtPosition(0, 0).widget().setVisible(True)
    # Default value for the certainty level
    ui.sliderDescriptiveExperimentIdentificationLevelExperimentDebriefPage.setDefaultValue()

def raiseErrorExperimentDebriefPage(page,attributesLblList):

    # Check if the fields are correctly completed.
    attributesLblErrorList = []  # This list contains all the attributes in the page that are not rrectly completed
    attributesLblErrorMessagesList = []  # This list contains all the attributes in the page that are not rrectly completed

    fieldsCompleted = None  # The method returns a boolean taking the value true if all the fields in te experiment screen are correctly completed

    titleErrorFormLayout = QLabel("Please correctly answer the questions marked in red:\n")
    setRedErrorLettersColorQLabel(titleErrorFormLayout)
    titleErrorFormLayout.setFont(QFont(window.fontLetter, window.fontFactor * 16))

    # First we cleared any coloured background
    for attributeLbl in attributesLblList:
        #Clear background or red color from letters
        setNoBackgroundColorQLabel(attributeLbl)
        #Clear red color letters
        setNoRedLettersColourQLabel(QLabel=attributeLbl)

    if page == 1: #This page only contain slider and we will not raise errors if the users choose the default option
        fieldsCompleted = True
        pass #There are no fields to check here. This screen only shows slider bars.

    elif page == 2:

        # Clear formlayout containing the error messages
        clearQFormLayout(layout=ui.experimentDebriefFormLayoutErrorMessagePage2)

        # Set Title of error form layout
        ui.experimentDebriefFormLayoutErrorMessagePage2.addRow(titleErrorFormLayout)


        if ui.experiencedWalkingTimeExperimentDebriefPage == 0:
            attributesLblErrorList.append(ui.walkingTimeExperimentDebriefPageLbl)
            attributesLblErrorMessagesList.append(QLabel("Question 1: Please choose a value greater than 0"))

        if ui.experiencedWaitingTimeExperimentDebriefPage == 0:
            attributesLblErrorList.append(ui.waitingTimeExperimentDebriefPageLbl)
            attributesLblErrorMessagesList.append(QLabel("Question 2: Please choose a value greater than 0"))

        if ui.experiencedInVehicleTimeExperimentDebriefPage == 0:
            attributesLblErrorList.append(ui.inVehicleTimeExperimentDebriefPageLbl)
            attributesLblErrorMessagesList.append(QLabel("Question 3: Please choose a value greater than 0"))

        if ui.experiencedJourneyTimeExperimentDebriefPage == 0:
            attributesLblErrorList.append(ui.journeyTimeExperimentDebriefPageLbl)
            attributesLblErrorMessagesList.append(QLabel("Question 4: Please choose a value greater than 0"))

        if ui.timeCountingExperimentDebriefPage == " ":
            attributesLblErrorList.append(ui.experiencedCountingExperimentDebriefPageLbl)
            attributesLblErrorMessagesList.append(QLabel("Question 5: Please choose one of the "
                                                         + str(len(ui.radioButtonsExperiencedTimeCountingList))+ " options"))

        if ui.experiencedOpenQuestionExperimentDebriefPage == "":
            attributesLblErrorList.append(ui.experiencedOpenQuestionExperimentDebriefPageLbl)
            attributesLblErrorMessagesList.append(QLabel("Question 6: Please write your answer"))

        #Add error messages to the error grid
        for attributeLblErrorMessage in attributesLblErrorMessagesList:
            setRedErrorLettersColorQLabel(attributeLblErrorMessage)
            ui.experimentDebriefFormLayoutErrorMessagePage2.addRow(attributeLblErrorMessage)

    if len(attributesLblErrorList) == 0:
        fieldsCompleted = True
    else:
        for attributeLbl in attributesLblErrorList:
            # setErrorBackgroundColorQLabel(attributeLbl)
            setRedErrorLettersColorQLabel(attributeLbl)

        fieldsCompleted = False



    return fieldsCompleted

def createFormLayoutExperimentDebriefPage(page):

    #I might randomize the order in which the pages are shown.

    if page == 1:

        # Information Text Labels
        folderExperimentDebriefQuestionsPage1 = "ExperimentDebriefQuestions/Page1"

        # Dictionary of descriptions for each question
        questionsDescriptionsPage1SPADict = {}
        questionsDescriptionsPage1ENGDict = {}
        questionsDescriptionsPage1Dict = {}
        window.nExperimentDebriefQuestionsPage1 = 0 #Counter for the number of problems
        # window.nExperimentDebriefQuestionsPage1 = 1
        idQuestions = ["experiencedExperimentIdentificationLevel","descriptiveExperimentIdentificationLevel"]
        nQuestionsPage1 = len(idQuestions)

        for i in range(0, nQuestionsPage1):
            keyQuestion = idQuestions[i]
            questionsDescriptionsPage1SPADict[keyQuestion] = QLabel(updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions=keyQuestion + "QuestionSPA.html"
                , folder=folderExperimentDebriefQuestionsPage1))

            questionsDescriptionsPage1ENGDict[keyQuestion] = QLabel(updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions=keyQuestion + "QuestionENG.html"
                , folder=folderExperimentDebriefQuestionsPage1))

        #Information Description Labels
        descriptionExperiencedExperimentIdentificationLevelQuestion = ""
        descriptionDescriptiveExperimentIdentificationLevelQuestion = ""
        # ui.descriptionIdentificationLevelExperimentDebriefPage = QLabel("")

        #Add a slider bar asking for the degree of identification with that trip
        createSlidersExperimentIdentificationLevel()

        #Format Qlabels for description of the question

        for label in [ui.descriptiveExperimentIdentificationSliderDescriptionLbl,ui.experiencedExperimentIdentificationSliderDescriptionLbl]:
            label.setFont(QFont(window.fontLetter, window.fontFactor * 16))
            label.setWordWrap(True)

        #Descriptive Format (Treatment: Tables, Control : Prospects)

        # Description and text in options questions Page 1
        if window.mainExperiment.languageCondition == "english":

            # Dictionary with the description of each question
            questionsDescriptionsPage1Dict = questionsDescriptionsPage1ENGDict

            titleText = updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions="DescriptionExperimentDebriefPage1ENG.html"
                , folder=folderExperimentDebriefQuestionsPage1)

            setHeadingPage(grid=ui.experimentDebriefTitleGrid,
                           text=titleText
                           # Replace Title
                           , capitalLetters=False, centered=False, fontFactor=window.fontFactor, fontSize=22
                           , fontLetter=window.fontLetter)

            ui.buttonNextExperimentDebriefPage.setText("Next")

            #Descriptive Format
            if window.descriptiveExperimentCondition == "descriptiveControl": #control condition
                descriptiveFormat = "figures"

            else: #Treatment condition
                descriptiveFormat = "tables"

            # descriptionExperiencedExperimentIdentificationLevelQuestion = updateInstruction(
            #     experiment=window.mainExperiment.currentExperiment
            #     , txtInstructions="experiencedExperimentIdentificationLevelENG.html"
            #     , folder=folderExperimentDebriefQuestionsPage1)

        if window.mainExperiment.languageCondition == "spanish":

            # Dictionary with the description of each question
            questionsDescriptionsPage1Dict = questionsDescriptionsPage1SPADict

            titleText = updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions="DescriptionExperimentDebriefPage1SPA.html"
                , folder=folderExperimentDebriefQuestionsPage1)

            setHeadingPage(grid=ui.experimentDebriefTitleGrid,
                           text=titleText
                           # Replace Title
                           , capitalLetters=False, centered=False, fontFactor=window.fontFactor, fontSize=22
                           , fontLetter=window.fontLetter)

            ui.buttonNextExperimentDebriefPage.setText("Siguiente")

            #Descriptive Format
            if window.descriptiveExperimentCondition == "descriptiveControl": #control condition
                descriptiveFormat = "figuras"

            else: #Treatment condition
                descriptiveFormat = "tablas"

            # descriptionExperiencedExperimentIdentificationLevelQuestion = updateInstruction(
            #     experiment=window.mainExperiment.currentExperiment
            #     , txtInstructions="experiencedExperimentIdentificationLevelSPA.html"
            #     , folder=folderExperimentDebriefQuestionsPage1)

        #Question Experienced Experiment
        experiencedExperimentQuestionText = questionsDescriptionsPage1Dict["experiencedExperimentIdentificationLevel"].text()
        experiencedExperimentQuestionText = experiencedExperimentQuestionText.replace("_nQuestion_", str(window.nExperimentDebriefQuestionsPage1 + 1))
        ui.experiencedExperimentIdentificationSliderDescriptionLbl.setText(experiencedExperimentQuestionText)

        ui.experiencedExperimentIdentificationSliderDescriptionLbl.setFont(QFont("Times", 18*window.fontFactor))
        ui.experiencedExperimentIdentificationSliderDescriptionLbl.setWordWrap(True)

        #Questions Descriptive Experiment
        descriptiveExperimentQuestionText = questionsDescriptionsPage1Dict["descriptiveExperimentIdentificationLevel"].text()
        descriptiveExperimentQuestionText = descriptiveExperimentQuestionText.replace("_nQuestion_", str(window.nExperimentDebriefQuestionsPage1 + 2))
        descriptiveExperimentQuestionText = descriptiveExperimentQuestionText.replace("_descriptiveFomat_", descriptiveFormat)

        ui.descriptiveExperimentIdentificationSliderDescriptionLbl.setText(descriptiveExperimentQuestionText)
        ui.descriptiveExperimentIdentificationSliderDescriptionLbl.setFont(QFont("Times", 18*window.fontFactor))
        ui.descriptiveExperimentIdentificationSliderDescriptionLbl.setWordWrap(True)

    elif page == 2: # Questions about both experiments and open question

        # Information Text Labels
        folderExperimentDebriefQuestionsPage2 = "ExperimentDebriefQuestions/Page2"

        # Dictionary of descriptions for each question
        questionsDescriptionsPage2SPADict = {}
        questionsDescriptionsPage2ENGDict = {}
        questionsDescriptionsPage2Dict = {}
        window.nExperimentDebriefQuestionsPage2 = 0
        # window.nExperimentDebriefQuestionsPage2 = window.nExperimentDebriefQuestionsPage1+1
        idQuestions = ["walkingTime", "waitingTime","inVehicleTime", "journeyTime","experiencedCounting","experiencedOpen"]
        nQuestionsPage2 = len(idQuestions)

        for i in range(0, nQuestionsPage2):
            keyQuestion = idQuestions[i]
            questionsDescriptionsPage2SPADict[keyQuestion] = QLabel(updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions=keyQuestion + "QuestionSPA.html"
                , folder=folderExperimentDebriefQuestionsPage2))

            questionsDescriptionsPage2ENGDict[keyQuestion] = QLabel(updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions=keyQuestion + "QuestionENG.html"
                , folder=folderExperimentDebriefQuestionsPage2))

        # # Strategy (Group of radio buttons)
        # ui.radioButtonsExperiencedStrategy = QButtonGroup()  # Group of radio buttons for question 1 (Q1)
        # ui.radioButtonsExperiencedStrategyList = []  # List to iterate over radio buttons in the group
        # ui.radioButtonExperiencedStrategy1 = QRadioButton()  # Radio button Strategy 1
        # ui.radioButtonExperiencedStrategy2 = QRadioButton()  # Radio button Strategy 2
        # ui.radioButtonExperiencedStrategy3 = QRadioButton()  # Radio button Strategy 3
        # ui.radioButtonExperiencedStrategy4 = QRadioButton()  # Radio button Strategy 4
        # ui.radioButtonExperiencedStrategyOther = QRadioButton()  # Radio button Other Strategy
        #
        # for radioButton in [ui.radioButtonExperiencedStrategy1, ui.radioButtonExperiencedStrategy2, ui.radioButtonExperiencedStrategy3,
        #                     ui.radioButtonExperiencedStrategy4]:
        #     radioButton.setFocusPolicy(QtCore.Qt.NoFocus)
        #     radioButton.setFont(QFont(window.fontLetter, window.fontFactor * 16))
        #     ui.radioButtonsExperiencedStrategy.addButton(radioButton)
        #     ui.radioButtonsExperiencedStrategyList.append(radioButton)
        # # ui.tripOriginCBox = QComboBox()

        # Counting (Group of two radio buttons)
        ui.radioButtonsExperiencedTimeCounting = QButtonGroup()  # Group of radio buttonsfor question 1 (Q1)
        ui.radioButtonsExperiencedTimeCountingList = []  # List to iterate over radio buttons in the group
        ui.radioButtonExperiencedTimeCountingYes = QRadioButton()  # Radio button Counting
        ui.radioButtonExperiencedTimeCountingNo = QRadioButton()  # Radio button Not Counting

        for radioButton in [ui.radioButtonExperiencedTimeCountingYes, ui.radioButtonExperiencedTimeCountingNo]:
            radioButton.setFocusPolicy(QtCore.Qt.NoFocus)
            # radioButton.setFont(QFont(window.fontLetter, window.fontFactor * 16))
            ui.radioButtonsExperiencedTimeCounting.addButton(radioButton)
            ui.radioButtonsExperiencedTimeCountingList.append(radioButton)
            # radioButton.clicked.connect(isRadioButtonExperiencedTimeCountingChecked)

        #Text to write the number of seconds that the participants thinks an average journey had
        ui.spinBoxExperiencedWalkingTime = QSpinBox()
        ui.spinBoxExperiencedWaitingTime = QSpinBox()
        ui.spinBoxExperiencedInVehicleTime = QSpinBox()
        ui.spinBoxExperiencedJourneyTime = QSpinBox()

        ui.spinBoxExperiencedWalkingTimeLbl = QLabel()
        ui.spinBoxExperiencedWaitingTimeLbl = QLabel()
        ui.spinBoxExperiencedInVehicleTimeLbl = QLabel()
        ui.spinBoxExperiencedJourneyTimeLbl = QLabel()

        # for element in [ui.spinBoxExperiencedWalkingTime,ui.spinBoxExperiencedWalkingTimeLbl
        #      , ui.spinBoxExperiencedWaitingTime,ui.spinBoxExperiencedWaitingTimeLbl
        #      , ui.spinBoxExperiencedInVehicleTime,ui.spinBoxExperiencedInVehicleTimeLbl
        #      , ui.spinBoxExperiencedJourneyTime,ui.spinBoxExperiencedJourneyTimeLbl]:
        #         element.setVisible(False)  # Initially this line edit widget and its text are not visible

        #Open Question Experienced Experiment
        ui.textEditExperiencedOpenQuestion = QTextEdit()

        # # Open Question Descriptive Experiment
        # ui.textEditDescriptiveOpenQuestion = QTextEdit()

        #Error Message
        ui.errorExperimentDebriefPage2Lbl = QLabel()

        if window.mainExperiment.languageCondition == "spanish":
            # Dictionary with the description of each question
            questionsDescriptionsPage2Dict = questionsDescriptionsPage2SPADict

            titleText = updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions="DescriptionExperimentDebriefPage2SPA.html"
                , folder=folderExperimentDebriefQuestionsPage2)

            setHeadingPage(grid=ui.experimentDebriefTitleGrid, text=titleText
                         , capitalLetters = False, fontSize = 22, centered=False, fontFactor=window.fontFactor,
                         fontLetter=window.fontLetter)

            # # Strategy
            # ui.radioButtonExperiencedStrategy1.setText("Minimizar Tiempos de Espera")
            # ui.radioButtonExperiencedStrategy2.setText("University")
            # ui.radioButtonExperiencedStrategy3.setText("Home")
            # ui.radioButtonExperiencedStrategy4.setText("Home")
            # ui.radioButtonExperiencedStrategyOther.setText("Other")

            # Counting
            ui.radioButtonExperiencedTimeCountingYes.setText("Si")
            ui.radioButtonExperiencedTimeCountingNo.setText("No")

            #Error message
            ui.errorExperimentDebriefPageLbl = QLabel("")

            #Update labels
            # ui.spinBoxExperiencedWalkingTimeLbl.setText("How many seconds in average did you walk in each trip?")
            # ui.spinBoxExperiencedWaitingTimeLbl.setText("How many seconds in average did you travel in the bus?")
            # ui.spinBoxExperiencedInVehicleTimeLbl.setText("How many seconds in average did you wait?")
            # ui.spinBoxExperiencedJourneyTimeLbl.setText("Cuántos segundos duraba en promedio un viaje total?")


        if window.mainExperiment.languageCondition == "english":

            #Title of the experiment screen

            titleText = updateInstruction(
                experiment=window.mainExperiment.currentExperiment
                , txtInstructions="DescriptionExperimentDebriefPage2ENG.html"
                , folder=folderExperimentDebriefQuestionsPage2)

            setHeadingPage(grid=ui.experimentDebriefTitleGrid, text=titleText # Replace Title
                         , capitalLetters=False, centered=False, fontSize = 20, fontFactor=window.fontFactor,
                         fontLetter=window.fontLetter)

            # Dictionary with the description of each question
            questionsDescriptionsPage2Dict = questionsDescriptionsPage2ENGDict

            # # Strategy
            # ui.radioButtonExperiencedStrategy1.setText("Work")
            # ui.radioButtonExperiencedStrategy2.setText("University")
            # ui.radioButtonExperiencedStrategy3.setText("Home")
            # ui.radioButtonExperiencedStrase tegy4.setText("Home")
            # ui.radioButtonExperiencedStrategyOther.setText("Other")

            # Counting
            ui.radioButtonExperiencedTimeCountingYes.setText("Yes")
            ui.radioButtonExperiencedTimeCountingNo.setText("No")

            # ui.spinBoxExperiencedWalkingTimeLbl.setText("How many seconds in average did you walk in each trip?")
            # ui.spinBoxExperiencedWaitingTimeLbl.setText("How many seconds in average did you travel in the bus?")
            # ui.spinBoxExperiencedInVehicleTimeLbl.setText("How many seconds in average did you wait?")
            # ui.spinBoxExperiencedJourneyTimeLbl.setText("How many seconds in average did a trip last?")

        # Add Qwidgets in the form layout

        # # Strategy
        # ui.experimentDebriefFormLayoutPage2.addRow(str(window.nExperimentDebriefQuestionsPage2 + 0) + ". ",
        #                                          questionsDescriptionsPage2Dict["experiencedStrategy"])
        # for radiobutton in ui.radioButtonsExperiencedStrategyList:
        #     ui.experimentDebriefFormLayoutPage2.addRow(radiobutton)

        #Questions about the time attributes of the anitmated trips (First 4 questions)

        # ui.experimentDebriefFormLayoutPage2.addRow(

        #Walking Time (Seconds)
        ui.walkingTimeExperimentDebriefPageLbl = QLabel(questionsDescriptionsPage2Dict["walkingTime"].text().replace("_nQuestion_", str(
            window.nExperimentDebriefQuestionsPage2 + 1)))
        ui.experimentDebriefFormLayoutPage2.addRow(ui.walkingTimeExperimentDebriefPageLbl)

        ui.experimentDebriefFormLayoutPage2.addRow(ui.spinBoxExperiencedWalkingTime,QLabel("second(s)"))

        # Waiting Time (Seconds)
        ui.waitingTimeExperimentDebriefPageLbl = QLabel(questionsDescriptionsPage2Dict["waitingTime"].text().replace("_nQuestion_", str(
            window.nExperimentDebriefQuestionsPage2 + 2)))
        ui.experimentDebriefFormLayoutPage2.addRow(ui.waitingTimeExperimentDebriefPageLbl)

        ui.experimentDebriefFormLayoutPage2.addRow(ui.spinBoxExperiencedWaitingTime,QLabel("second(s)"))

        #Travel Time (Seconds)
        ui.inVehicleTimeExperimentDebriefPageLbl = QLabel(questionsDescriptionsPage2Dict["inVehicleTime"].text().replace("_nQuestion_", str(
            window.nExperimentDebriefQuestionsPage2 + 3)))
        ui.experimentDebriefFormLayoutPage2.addRow(ui.inVehicleTimeExperimentDebriefPageLbl)

        ui.experimentDebriefFormLayoutPage2.addRow(ui.spinBoxExperiencedInVehicleTime,QLabel("second(s)"))

        #Journey Time (Seconds)
        ui.journeyTimeExperimentDebriefPageLbl = QLabel(questionsDescriptionsPage2Dict["journeyTime"].text().replace("_nQuestion_", str(
            window.nExperimentDebriefQuestionsPage2 + 4)))
        ui.experimentDebriefFormLayoutPage2.addRow(ui.journeyTimeExperimentDebriefPageLbl)

        ui.experimentDebriefFormLayoutPage2.addRow(ui.spinBoxExperiencedJourneyTime,QLabel("second(s)"))

        # Counting
        ui.experiencedCountingExperimentDebriefPageLbl = QLabel(questionsDescriptionsPage2Dict["experiencedCounting"].text().replace("_nQuestion_", str(
            window.nExperimentDebriefQuestionsPage2 + 5)))
        ui.experimentDebriefFormLayoutPage2.addRow(ui.experiencedCountingExperimentDebriefPageLbl)

        for radiobutton in ui.radioButtonsExperiencedTimeCountingList:
            ui.experimentDebriefFormLayoutPage2.addRow(radiobutton)

        # Open Question Experience Experiment
        ui.experiencedOpenQuestionExperimentDebriefPageLbl = QLabel(questionsDescriptionsPage2Dict["experiencedOpen"].text().replace("_nQuestion_", str(
            window.nExperimentDebriefQuestionsPage2 + 6)))

        ui.experiencedOpenQuestionExperimentDebriefPageLbl.setText(ui.experiencedOpenQuestionExperimentDebriefPageLbl.text().replace("_nQuestion_", str(window.nExperimentDebriefQuestionsPage2 + 6)))

        ui.experimentDebriefFormLayoutPage2.addRow(ui.experiencedOpenQuestionExperimentDebriefPageLbl)
        ui.experimentDebriefFormLayoutPage2.addRow(ui.textEditExperiencedOpenQuestion) # Question about both experiments and open questions


        #Format Labels
        for qLabel in [ui.walkingTimeExperimentDebriefPageLbl, ui.waitingTimeExperimentDebriefPageLbl
                       , ui.inVehicleTimeExperimentDebriefPageLbl, ui.journeyTimeExperimentDebriefPageLbl
                       , ui.experiencedCountingExperimentDebriefPageLbl, ui.experiencedOpenQuestionExperimentDebriefPageLbl]:

            qLabel.setFont(QFont("Times", 14*window.fontFactor))
            qLabel.setWordWrap(True)

        #Error label (initially not visible)
        setRedLettersQLabel(ui.errorExperimentDebriefPage2Lbl)
        ui.errorExperimentDebriefPage2Lbl.setFont((QFont(window.fontLetter, 18)))
        ui.experimentDebriefFormLayoutPage2.addRow(ui.errorExperimentDebriefPage2Lbl)

        # # Open Question Descriptive Experiment
        #
        # ui.experimentDebriefFormLayoutPage2.addRow(QLabel(questionsDescriptionsPage2Dict["descriptiveOpen"].text().replace("_nQuestion_", str(
        #     window.nExperimentDebriefQuestionsPage2 + 2))))
        # ui.experimentDebriefFormLayoutPage2.addRow(ui.textEditDescriptiveOpenQuestion)

def setupExperimentDebriefPage():

    # Format of the stacked widget

    ui.experimentDebriefStackedWidget.setCurrentWidget(ui.experimentDebriefStackedWidgetPage1)
    ui.experimentDebriefStackedWidget.setFrameShape(QFrame.Box)

    # ui.debriefLbl.setText("Gracias por tu participación. Por favor presiona "+ ui.buttonNextDebriefPage.text() + " para finalizar")

    createFormLayoutExperimentDebriefPage(page=1)

def experimentDebriefPageCompleted(index):
    completed = False
    return True

def isRadioButtonExperiencedTimeCountingChecked():
    if ui.radioButtonExperiencedTimeCountingYes.isChecked() is True:

        for element in [ui.spinBoxExperiencedWalkingTime,ui.spinBoxExperiencedWalkingTimeLbl
             , ui.spinBoxExperiencedWaitingTime,ui.spinBoxExperiencedWaitingTimeLbl
             , ui.spinBoxExperiencedInVehicleTime,ui.spinBoxExperiencedInVehicleTimeLbl
             , ui.spinBoxExperiencedJourneyTime,ui.spinBoxExperiencedJourneyTimeLbl]:

            element.setVisible(True)

    elif ui.radioButtonExperiencedTimeCountingYes.isChecked() is False:

        for element in [ui.spinBoxExperiencedWalkingTime, ui.spinBoxExperiencedWalkingTimeLbl
            , ui.spinBoxExperiencedWaitingTime, ui.spinBoxExperiencedWaitingTimeLbl
            , ui.spinBoxExperiencedInVehicleTime, ui.spinBoxExperiencedInVehicleTimeLbl
            , ui.spinBoxExperiencedJourneyTime, ui.spinBoxExperiencedJourneyTimeLbl]:

            element.setVisible(False)

def readWriteExperimentDebriefPageQuestionsFields(page):

    fieldsCompleted = None

    if page == 1:

        # PAGE 1
        ui.experimentIdentificationLevelExperimentDebriefPage = None

        ui.experiencedExperimentIdentificationLevelExperimentDebriefPage = ui.sliderExperiencedExperimentIdentificationLevelExperimentDebriefPage.currentValue()
        ui.descriptiveExperimentIdentificationLevelExperimentDebriefPage = ui.sliderDescriptiveExperimentIdentificationLevelExperimentDebriefPage.currentValue()

        attributesLblList = [ui.experiencedExperimentIdentificationSliderDescriptionLbl,ui.descriptiveExperimentIdentificationSliderDescriptionLbl]

        fieldsCompleted = raiseErrorExperimentDebriefPage(page=1, attributesLblList=attributesLblList)

    elif page == 2:

        fieldsCompleted = True

        #Question about counting
        ui.timeCountingExperimentDebriefPage = " "

        for radioButton in ui.radioButtonsExperiencedTimeCountingList:
            if radioButton.isChecked() is True:

                if radioButton == ui.radioButtonExperiencedTimeCountingYes:
                    ui.timeCountingExperimentDebriefPage = "yes"

                elif radioButton == ui.radioButtonExperiencedTimeCountingNo:
                    ui.timeCountingExperimentDebriefPage = "no"

        #Time attributes of the animated trips
        ui.experiencedWalkingTimeExperimentDebriefPage = ui.spinBoxExperiencedWalkingTime.value()
        ui.experiencedWaitingTimeExperimentDebriefPage = ui.spinBoxExperiencedWaitingTime.value()
        ui.experiencedInVehicleTimeExperimentDebriefPage = ui.spinBoxExperiencedInVehicleTime.value()
        ui.experiencedJourneyTimeExperimentDebriefPage = ui.spinBoxExperiencedJourneyTime.value()

        #Open Questions (Experienced and descriptive experiment)
        ui.experiencedOpenQuestionExperimentDebriefPage = ui.textEditExperiencedOpenQuestion.toPlainText()
        # ui.descriptiveOpenQuestionExperimentDebriefPage = ui.textEditDescriptiveOpenQuestion.toPlainText()

        #Attributes label list
        attributesLblList = [ui.walkingTimeExperimentDebriefPageLbl,ui.waitingTimeExperimentDebriefPageLbl
                          , ui.inVehicleTimeExperimentDebriefPageLbl,ui.journeyTimeExperimentDebriefPageLbl
                          , ui.experiencedCountingExperimentDebriefPageLbl
                          , ui.experiencedOpenQuestionExperimentDebriefPageLbl]

        fieldsCompleted = raiseErrorExperimentDebriefPage(page=2, attributesLblList = attributesLblList)


        if fieldsCompleted is True: #Here we write the information

            experimentDebriefInformation = ExperimentDebriefInformation(filePath = window.mainExperiment.pathExperimentDebriefInformation
                                                                    ,participantId = window.currentParticipant.id

                                                                    ,experiencedExperimentIdentificationLevel=ui.experiencedExperimentIdentificationLevelExperimentDebriefPage
                                                                    ,descriptiveExperimentIdentificationLevel=ui.descriptiveExperimentIdentificationLevelExperimentDebriefPage

                                                                    #
                                                                    # , descriptiveExperimentWaitingTimeImportance = ui.waitingTimeImportanceDescriptiveStrategyExperimentDebriefPage
                                                                    # , descriptiveExperimentWaitingTimeReliabilityImportance = ui.waitingTimeReliabilityImportanceDescriptiveStrategyExperimentDebriefPage
                                                                    # , descriptiveExperimentInVehicleTimeImportance = ui.inVehicleTimeImportanceDescriptiveStrategyExperimentDebriefPage
                                                                    # , descriptiveExperimentInVehicleTimeReliabilityImportance = ui.inVehicleTimeReliabilityImportanceDescriptiveStrategyExperimentDebriefPage
                                                                    # , descriptiveExperimentJourneyTimeImportance = ui.journeyTimeImportanceDescriptiveStrategyExperimentDebriefPage

                                                                    , experiencedExperimentTimeCounting = ui.timeCountingExperimentDebriefPage #Yes or no (binary question)
                                                                    , experiencedExperimentWalkingTime=ui.experiencedWalkingTimeExperimentDebriefPage
                                                                    , experiencedExperimentWaitingTime = ui.experiencedWaitingTimeExperimentDebriefPage
                                                                    , experiencedExperimentInVehicleTime=ui.experiencedInVehicleTimeExperimentDebriefPage
                                                                    , experiencedExperimentJourneyTime=ui.experiencedWaitingTimeExperimentDebriefPage

                                                                    , experiencedExperimentOpenQuestion = ui.experiencedOpenQuestionExperimentDebriefPage
                                                                    # , descriptiveExperimentOpenQuestion = ui.descriptiveOpenQuestionExperimentDebriefPage
                                                                    )

            #Here we write the information
            window.currentParticipant.setExperimentDebriefInformation(experimentDebriefInformation = experimentDebriefInformation)

            window.currentParticipant.experimentDebriefInformation.writeExperimentDebriefInformationCsv()

    return fieldsCompleted

def buttonNextExperimentDebriefPageClicked():

    #Return False if not all atributes were completed. When returns True it will write the information in a file
    currentIndexExperimentDebriefStackedWidget = ui.experimentDebriefStackedWidget.currentIndex()
    currentPageExperimentDebriefStackedWidget = currentIndexExperimentDebriefStackedWidget + 1

    lastPage = (ui.experimentDebriefStackedWidget.currentIndex()==ui.experimentDebriefStackedWidget.count()-1)
    pageCompleted = readWriteExperimentDebriefPageQuestionsFields(page = currentPageExperimentDebriefStackedWidget)

    if lastPage is False and pageCompleted is True:
        createFormLayoutExperimentDebriefPage(page=currentPageExperimentDebriefStackedWidget+1)
        ui.experimentDebriefStackedWidget.setCurrentIndex(ui.experimentDebriefStackedWidget.currentIndex()+1)

    elif lastPage is True and pageCompleted is True:
        ui.stackedWidget.setCurrentWidget(ui.debriefPage)

# ***************   (Page) Debrief Page *************************************** #

#This function updates the content shown in the debrief page as well it creates a new trial in the experiment and write it in the csv file.

def setupDebriefPage():

    ui.buttonNextDebriefPage.setText("Terminar Experimento")

    folder =  "Descriptions/Debrief/"
    pathUCLLogo = folder+"UCL-logo-new.png"

    #Add UCL Logo in the heading of the page (Right side of the heading)
    ui.debriefLogoGrid.addWidget(QLabel(), 0, 0)
    ui.uclLogo = ui.debriefLogoGrid.itemAtPosition(0,0).widget()
    pixMap = QPixmap(pathUCLLogo)
    ui.uclLogo.setPixmap(pixMap)
    ui.uclLogo.setAlignment(QtCore.Qt.AlignRight)
    ui.uclLogo.setFrameShape(QFrame.Box)
    ui.uclLogo.setScaledContents(True)

    setTitlePage(grid=ui.debriefTitleGrid, text=""
                 ,capitalLetters = True,fontLetter = window.fontLetter, fontFactor = window.fontFactor)

    # Body Text Debrief Message
    ui.debriefLbl.setFont(QFont(window.fontLetter, window.fontFactor * 30))
    ui.debriefLbl.setWordWrap(True)
    # label.heig.setFixedHeight(20)
    ui.debriefLbl.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignCenter)

    # ui.buttonNextDebriefPage.setFont(QFont(window.fontLetter, window.fontFactor * 20))

    if window.mainExperiment.languageCondition == "english":
        # Next Button
        ui.buttonNextDebriefPage.setText("Finish Experiment")

        # Text of the widget page
        ui.debriefLbl.setText(
            "Thank you for your participation. Please press " + ui.buttonNextDebriefPage.text())


        # ui.debriefLbl.setText("Thank you for your participation. Please press Finish Expe")

    if window.mainExperiment.languageCondition == "spanish":
        # Next Button
        ui.buttonNextDebriefPage.setText("Terminar Experimento")

        # Text of the widget page
        ui.debriefLbl.setText(
            "Gracias por tu participación. Por favor presiona " + ui.buttonNextDebriefPage.text())
        # ui.debriefLbl.setText("Gracias por tu participación")

def buttonNextDebriefPageClicked():
    currentParticipant = window.mainExperiment.currentParticipant

    currentParticipant.setEndingTime(endingTime = datetime.now().strftime('%H%M%S'))
    window.mainExperiment.writeLineParticipantFile(label = "EndingTime",value =  window.mainExperiment.currentParticipant.endingTime)

    # duration = currentParticipant.endingTime - currentParticipant.startTime
    # window.mainExperiment.writeLineParticipantFile(label="ExperimentDuration", value=int(duration))

    QApplication.quit()  # Function that close the program

# ***************   For Testing) *************************************** #

def setFactorTime(factor):

    journeyLengthConditions = window.journeyLengthConditions

    # Adjust Waiting And Travel Times
    for i in range(0, len(journeyLengthConditions)):
        journeyLengthConditions[i] = journeyLengthConditions[i] * factor

    # Adjust dwell times bus stops
    for stop in window.stops:
        stop.setDwellTime(dwellTime=stop.getDwellTime() * factor)

    # Adjust Walking Speed
    window.person.walkingSpeed = 2 * window.person.walkingSpeed / (
        factor)  # Very fast for the meanwhile (a good speed is like 10)

window.city = ""
window.messageInstructionExperimentalCondition =""


def setFirstPageProgram(firstPage):
    #First page shown in the experiment
    ui.stackedWidget.setCurrentWidget(firstPage)  # Initial page in the experiment

def setupProgram(firstPage, computerId, experimentalSession, experimentCountry
                 , participantId, participantName, participantLastName, animationSpeedFactor, fontFactor,languageCondition
                 ,simulatedExperimentCondition,descriptiveExperimentCondition
                 ,trialsExperimentTrainingBlock,trialsExperimentBlock1,trialsExperimentBlock2
                 ,experimentBreakMinutes,experimentBreakIntervalSeconds
                 ,descriptiveDays,onlyDescriptiveTestingMode,allConsentBoxesChecked,fullScreen):

    #Experiment Parameters

    window.computerId = computerId #Computer where the experiment is run. There are ids for the computers in Chile and London
    window.experimentalSession = experimentalSession
    window.experimentCountry = experimentCountry

    #Participant information
    window.startTime = datetime.now().strftime('%H%M%S')
    window.startDate = datetime.now().strftime('%d%m%Y')
    window.currentParticipant = Participant(id = participantId,startTime = window.startTime,startDate = window.startDate
                                            , name=participantName,lastName = participantLastName
                                            )
    window.currentParticipant.setComputerId(computerId = window.computerId)
    window.currentParticipant.setExperimentalSession(experimentalSession=window.experimentalSession)

    # window.nLearningTrials = [2,4,8]  # Less Trials for Testing
    window.nCyclesLearning = 1
    window.nLearningTrials = [2,2*window.nCyclesLearning,4*window.nCyclesLearning]  # Less Trials for Testing
    # window.nConsequenceTrials = [0,0,0]
    window.nConsequenceTrials = [1,1,2] #The half of the learning trials as it the consequence for only one route.
    window.nExtraLearningTrials = [2,2,4] #Even number
    window.nDescriptiveTrials = int(descriptiveDays)*2

    window.journeyLengthConditions = [10, 12.5, 18, 24]
    window.fontSizeTitle = 26

    window.experimentBreakMinutes = experimentBreakMinutes
    window.experimentBreakIntervalSeconds = experimentBreakIntervalSeconds
    window.experimentBreak = False #Initially this boolean is false. When the break has passed, the booolean change and the last simulated part of the experimetn will start.


    # If free learning is true, then the participant can choose how to spend their learning trials
    # If the boolean is false, we will give to the participant the direction of the trips in each learning trial according to a certain distribution

    window.learningMode = "halfRandom"  # Learning mode can be either

    # True if the counter for waiting time decrease second by second
    window.variableWaitingTimer = True

    #Factor to adjust the speed of the animations
    setFactorTime(factor = animationSpeedFactor) # factor = 0.01  # Short trips for testing

    #CREATION OF DESCRIPTIVE BLOCKS
    createDescriptiveBlocks()

    #Font parameters
    window.fontFactor = fontFactor #(For windows computers)
    # window.fontLetter = "Apex New"
    window.fontLetter = "Times"

    #Global varibales
    window.nextStageName = ""

    #FullScreen Mode (Not working)
    #
    # # The following function set the size of the main window as a percentage of the screen's width and height (percentageScreen)
    # if fullScreen is True:
    #     windowMaximized(window,fullScreen=fullScreen)  # If it is true, the percentage margin in the screen is 0 and the user cannot see anything more than the experiment
    # else:
    #     windowMaximized(window, fullScreen=fullScreen)


    #Language condition depending if the experiment is run in Santiago or London.
    # window.languageConditions = ["spanish", "english"]
    window.languageCondition = languageCondition

    # Experimental conditions
    # window.simulatedExperimentCondition = window.simulatedExperimentConditions[0]
    window.simulatedExperimentCondition = simulatedExperimentCondition

    # window.descriptiveExperimentConditions = ["descriptiveControl", "descriptiveTreatmentCondition1"]
    # window.descriptiveExperimentCondition = window.descriptiveExperimentConditions[0]
    window.descriptiveExperimentCondition = descriptiveExperimentCondition


    # This class manage all experiments
    window.mainExperiment = MainExperiment(currentParticipant = window.currentParticipant, journeyLengthConditions=window.journeyLengthConditions
                                           , nameFolderResponses="Responses"
                                           , nameFolderExperimentDescriptions="Descriptions"
                                           , nameFolderExperiments="Experiments"
                                           , languageCondition = window.languageCondition
                                           , descriptiveExperimentCondition = window.descriptiveExperimentCondition
                                           , simulatedExperimentCondition = window.simulatedExperimentCondition
                                           , fontFactor = window.fontFactor
                                           , fontLetter = window.fontLetter
                                           , variableWaitingTimer = window.variableWaitingTimer
                                           )

    #Message shown in the instructions depending on the experimental condition.

    if window.mainExperiment.languageCondition == "english":

        if window.simulatedExperimentCondition  == "simulatedControlCondition":
            window.messageInstructionExperimentalCondition = "The waiting time is unknown to you" \
                                                             ", but you will be able to virtually experience this" \
                                                             " throughout the experiment"

        if window.simulatedExperimentCondition == "simulatedTreatmentCondition1":
            window.messageInstructionExperimentalCondition ="The waiting time will be shown to you (in seconds) in the bus stop icon"

    if window.mainExperiment.languageCondition == "spanish":

        if window.simulatedExperimentCondition == "simulatedControlCondition":
            window.messageInstructionExperimentalCondition = "El tiempo de espera será desconocido para ti pero podrás experimentarlo"

        if window.simulatedExperimentCondition == "simulatedTreatmentCondition1":
            window.messageInstructionExperimentalCondition = "El tiempo de espera te será mostrado (en segundos) en el ícono del paradero"

    #Tag for the city according to the language condition
    if  window.languageCondition == "english":
        window.city = "London"
    if window.languageCondition == "spanish":
        window.city = "Santiago"


    # Name of the input files used for running the experiment. This input files can be modified by the experimenter and the program will automatically update some message shown to the user

    #Format Next Buttons (language mainly)
    formatNextButtons(language = languageCondition)

    #Progress Bars
    createProgressBars()

    #Consent Page
    setupConsentPage(allChecked = allConsentBoxesChecked)

    #Demographics Page
    setupDemographicsPage()

    #Experiment Questions
    setupExperimentDebriefPage()

    #Debrief Page
    setupDebriefPage()

    # This participant will be updated later when the person entered the demographics
    # window.currentParticipant = Participant(age = 0, gender = "None", educationLevel = "None")

    # If we want to run the experiment from the beginning but with a lower number of choice sets

    # #Selection of Choice Sets

    window.timeChoiceSetsBlock1 = window.timeChoiceSetsBlock1[0:(int(trialsExperimentTrainingBlock))]
    window.timeChoiceSetsBlock2 = window.timeChoiceSetsBlock2[0:(int(trialsExperimentBlock1))]
    window.timeProspectSetsBlock3 = window.timeProspectSetsBlock3[0:(int(trialsExperimentBlock2))]
    #
    window.totalChoiceSets = len(window.timeChoiceSetsBlock1) + len(
        window.timeChoiceSetsBlock2) + len(window.timeProspectSetsBlock3)


    # #This code is only required if I skip the consent page

    if onlyDescriptiveTestingMode == True:
        createSimulationExperiments(mainExperiment = window.mainExperiment, participant=window.mainExperiment.currentParticipant
                                            , timeChoiceSetsBlock0=window.timeChoiceSetsBlock0
                                            ,timeChoiceSetsBlock1 = window.timeChoiceSetsBlock1
                                            ,timeChoiceSetsBlock2 = window.timeChoiceSetsBlock2
                                            ,timeProspectSetsBlock3 = window.timeProspectSetsBlock3)

        # window.mainExperiment.currentExperiment
        setupDecisionExpDescriptionPage()
        setupDecisionExpPage()

    #First page shown in the experiment
    setFirstPageProgram(firstPage)# Initial page in the experiment

# ***************  Generation of Choice Sets in the Descriptive Blocks *************************************** #

# a) Block Initilization  ******************************************************    #

# 1) Block 0 - Time Alternatives  ******************************************************    #

def createAlternativesBlock0(devTreatment1,devTreatment2, journeyLength):
    virtualTimeAlternative = TimeAlternative(waiting=Waiting(meanWaitingTime = journeyLength / 2),
                                                  travel = Travel(meanTravelTime = journeyLength / 2))

    timeAlternative1 = TimeAlternative(
        waiting=Waiting(meanWaitingTime=virtualTimeAlternative.waitingTime * (1 + devTreatment1)),
        travel=Travel(meanTravelTime=virtualTimeAlternative.travelTime * (1 + devTreatment1)))

    timeAlternative2 = TimeAlternative(
        waiting=Waiting(meanWaitingTime=virtualTimeAlternative.waitingTime * (1 - devTreatment2)),
        travel=Travel(meanTravelTime=virtualTimeAlternative.travelTime * (1 - devTreatment2)))

    # timeAlternative1 = TimeAlternative(
    #     waiting=Waiting(meanWaitingTime = 0),
    #     travel=Travel(meanTravelTime=virtualTimeAlternative.travelTime * (1 + devTreatment1)))
    #
    # timeAlternative2 = TimeAlternative(
    #     waiting=Waiting(meanWaitingTime=0),
    #     travel=Travel(meanTravelTime=virtualTimeAlternative.travelTime * (1 - devTreatment2)))

    window.timeAlternativesBlock0 = [timeAlternative1, timeAlternative2]

    timeChoiceSet0 = TimeChoiceSet([window.timeAlternativesBlock0[1], window.timeAlternativesBlock0[0]])

    window.timeChoiceSetsBlock0 = [timeChoiceSet0]

# 1) Block 1 - Time Alternatives  ******************************************************    #

def createAlternativesBlock1(devTreatment1,devTreatment2, journeyLength):

    # Options experiment 1 (five)
    virtualTimeAlternative = TimeAlternative(waiting=Waiting(meanWaitingTime = journeyLength / 2),
                                                  travel = Travel(meanTravelTime = journeyLength / 2))

    timeAlternative1 = TimeAlternative(waiting=Waiting(meanWaitingTime = virtualTimeAlternative.waitingTime*(1+devTreatment1)),
                                                  travel = Travel(meanTravelTime = virtualTimeAlternative.travelTime*(1+devTreatment1)))

    # timeAlternative1 = TimeAlternative(
    #     waiting=Waiting(meanWaitingTime=1),
    #     travel=Travel(meanTravelTime=virtualTimeAlternative.travelTime * (1 + devTreatment1)))

    timeAlternative2 = TimeAlternative(waiting=Waiting(meanWaitingTime = virtualTimeAlternative.waitingTime * (1 - devTreatment1)),
                                                  travel=Travel(meanTravelTime = virtualTimeAlternative.travelTime * (1 + devTreatment1)))
    timeAlternative3 = TimeAlternative(waiting=Waiting(meanWaitingTime = virtualTimeAlternative.waitingTime * (1 + devTreatment1)),
                                                  travel=Travel(meanTravelTime = virtualTimeAlternative.travelTime * (1 - devTreatment1)))
    timeAlternative4 = TimeAlternative(waiting=Waiting(meanWaitingTime = virtualTimeAlternative.waitingTime * (1 - devTreatment2)),
                                                  travel=Travel(meanTravelTime = virtualTimeAlternative.travelTime * (1 + devTreatment2)))
    timeAlternative5 = TimeAlternative(waiting=Waiting(meanWaitingTime = virtualTimeAlternative.waitingTime * (1 + devTreatment2)),
                                                  travel=Travel(meanTravelTime = virtualTimeAlternative.travelTime * (1 - devTreatment2)))

    window.timeAlternativesBlock1 = [timeAlternative1, timeAlternative2, timeAlternative3,
                                   timeAlternative4, timeAlternative5]

    timeChoiceSet1 = TimeChoiceSet([window.timeAlternativesBlock1[1], window.timeAlternativesBlock1[0]])
    timeChoiceSet2 = TimeChoiceSet([window.timeAlternativesBlock1[2], window.timeAlternativesBlock1[0]])

    # 1) Block 1 - Time Choice Sets  ******************************************************    #
    window.timeChoiceSetsBlock1= [timeChoiceSet1, timeChoiceSet2]


    # This choice sets will be added in block 2 now.
    # timeChoiceSet3 = TimeChoiceSet([timeAlternatives[1], timeAlternatives[2]])
    # timeChoiceSet4 = TimeChoiceSet([timeAlternatives[3], timeAlternatives[4]])
    # window.timeChoiceSetsBlock1= [timeChoiceSet3, timeChoiceSet4]

    # window.timeChoiceSetsBlock1 = [timeChoiceSet1Block1,timeChoiceSet2Block1]

# 2) Block 2 - Time Choice Sets  ******************************************************    #

def createAlternativesBlock2(deltaTreatments, devControls, journeyLength, timeAlternativesBlock1):

    # Options Block 2 with different Journey Times (five)
    virtualTimeAlternativeBlock2 = TimeAlternative(waiting=Waiting(meanWaitingTime = journeyLength / 2),
                                                  travel = Travel(meanTravelTime = journeyLength / 2))

    #Control 1
    timeAlternative1Block2 = TimeAlternative(waiting=Waiting(meanWaitingTime = virtualTimeAlternativeBlock2.waitingTime * (1 + devControls)),
                                                  travel=Travel(meanTravelTime = virtualTimeAlternativeBlock2.travelTime * (1 - devControls)))
    #Control 2
    timeAlternative2Block2 = TimeAlternative(waiting=Waiting(meanWaitingTime = virtualTimeAlternativeBlock2.waitingTime * (1 - devControls)),
                                                  travel=Travel(meanTravelTime = virtualTimeAlternativeBlock2.travelTime * (1 + devControls)))
    #Treatment 1a
    timeAlternative3Block2 = TimeAlternative(waiting=Waiting(meanWaitingTime = virtualTimeAlternativeBlock2.waitingTime * (1 - devControls)),
                                                  travel=Travel(meanTravelTime = virtualTimeAlternativeBlock2.travelTime * (1 + devControls)+journeyLength*deltaTreatments))
    #Treatment 1b
    timeAlternative4Block2 = TimeAlternative(waiting=Waiting(meanWaitingTime = virtualTimeAlternativeBlock2.waitingTime * (1 - devControls)+journeyLength*deltaTreatments/2),
                                                  travel=Travel(meanTravelTime = virtualTimeAlternativeBlock2.travelTime * (1 + devControls)+journeyLength*deltaTreatments/2))
    #Treatment 1c
    timeAlternative5Block2 = TimeAlternative(waiting=Waiting(meanWaitingTime = virtualTimeAlternativeBlock2.waitingTime * (1 - devControls)+journeyLength*deltaTreatments),
                                                  travel=Travel(meanTravelTime = virtualTimeAlternativeBlock2.travelTime * (1 + devControls)))
    #Treatment 2a
    timeAlternative6Block2 = TimeAlternative(waiting=Waiting(meanWaitingTime = virtualTimeAlternativeBlock2.waitingTime * (1 + devControls)),
                                                  travel=Travel(meanTravelTime = virtualTimeAlternativeBlock2.travelTime * (1 - devControls)-journeyLength*deltaTreatments))
    #Treatment 2b
    timeAlternative7Block2 = TimeAlternative(waiting=Waiting(meanWaitingTime = virtualTimeAlternativeBlock2.waitingTime * (1 + devControls)-journeyLength*deltaTreatments/2),
                                                  travel=Travel(meanTravelTime = virtualTimeAlternativeBlock2.travelTime * (1 - devControls)-journeyLength*deltaTreatments/2))
    #Treatment 2c
    timeAlternative8Block2 = TimeAlternative(waiting=Waiting(meanWaitingTime = virtualTimeAlternativeBlock2.waitingTime * (1 + devControls)-journeyLength*deltaTreatments),
                                                  travel=Travel(meanTravelTime = virtualTimeAlternativeBlock2.travelTime * (1 - devControls)))


    timeAlternativesBlock2 = [timeAlternative1Block2, timeAlternative2Block2, timeAlternative3Block2,timeAlternative4Block2,
                              timeAlternative5Block2, timeAlternative6Block2, timeAlternative7Block2,timeAlternative8Block2]

    # Choice sets Block 2 (four)
    timeChoiceSet1Block2 = TimeChoiceSet([timeAlternativesBlock2[2], timeAlternativesBlock2[0]])
    timeChoiceSet2Block2 = TimeChoiceSet([timeAlternativesBlock2[3], timeAlternativesBlock2[0]])
    timeChoiceSet3Block2 = TimeChoiceSet([timeAlternativesBlock2[4], timeAlternativesBlock2[0]])
    timeChoiceSet4Block2 = TimeChoiceSet([timeAlternativesBlock2[5], timeAlternativesBlock2[1]])
    timeChoiceSet5Block2 = TimeChoiceSet([timeAlternativesBlock2[6], timeAlternativesBlock2[1]])
    timeChoiceSet6Block2 = TimeChoiceSet([timeAlternativesBlock2[7], timeAlternativesBlock2[1]])

    #This choice set correspond to alternatives with the same journey time but different ratios between waiting and travelling (former block 1)
    timeChoiceSet3 = TimeChoiceSet([timeAlternativesBlock1[1], timeAlternativesBlock1[2]])
    timeChoiceSet4 = TimeChoiceSet([timeAlternativesBlock1[3], timeAlternativesBlock1[4]])


    # window.timeChoiceSetsBlock2 = [timeChoiceSet1Block2, timeChoiceSet2Block2, timeChoiceSet3Block2,
    #                              timeChoiceSet4Block2,timeChoiceSet5Block2,timeChoiceSet6Block2]


    window.timeChoiceSetsBlock2 = [timeChoiceSet3,timeChoiceSet4, timeChoiceSet1Block2, timeChoiceSet3Block2, timeChoiceSet4Block2,timeChoiceSet6Block2]

    # window.timeChoiceSetsBlock2 = [timeChoiceSet1Block2,timeChoiceSet2Block2]

# 3) Block 3 - Time Prospect Sets ******************************************************    #

def createAlternativesBlock3(minTimeVariability,maxTimeVariability,prob, journeyLength):
    # a) Options experiment 3 (six)

    # Prospect with no variability (it is used as a base to create the following four prospects)

    timeProspect1Block3 = TimeProspect(waitingProspect = WaitingProspect(waitingTime1 = journeyLength*0.4,
                                                                          p1=1.0),
                                                travelProspect = TravelProspect(travelTime1 = journeyLength*0.6,
                                                                        p1=1.0)
                                                )


    #Variable Waiting Time (min Variability)
    timeProspect2Block3 = TimeProspect(waitingProspect = WaitingProspect(waitingTime1 = timeProspect1Block3.expectedWaitingTime-minTimeVariability,
                                                                          p1=prob,
                                                                          waitingTime2 = timeProspect1Block3.expectedWaitingTime+minTimeVariability),
                                                travelProspect = TravelProspect(travelTime1 = timeProspect1Block3.expectedTravelTime,
                                                                        p1=1.0))

    #Variable Travel Time (min Variability)
    timeProspect3Block3 = TimeProspect(waitingProspect = WaitingProspect(waitingTime1 = timeProspect1Block3.expectedWaitingTime,
                                                                          p1=1.0),
                                                travelProspect = TravelProspect(travelTime1 = timeProspect1Block3.expectedTravelTime-minTimeVariability,
                                                                        p1=prob,
                                                                        travelTime2 = timeProspect1Block3.expectedTravelTime+minTimeVariability))

    # #Variable Waiting and Travel Time (min Variability)
    # timeProspect3Block3 = TimeProspect(waitingProspect = WaitingProspect(waitingTime1 = timeProspect1Block3.expectedWaitingTime-minTimeVariability,
    #                                                                       p1=prob,
    #                                                                       waitingTime2 = timeProspect1Block3.expectedWaitingTime+minTimeVariability),
    #                                             travelProspect = TravelProspect(travelTime1 = timeProspect1Block3.expectedTravelTime-minTimeVariability,
    #                                                                     p1=prob,
    #                                                                     travelTime2 = timeProspect1Block3.expectedTravelTime+minTimeVariability))


    #Variable Waiting Time (max Variability)
    timeProspect4Block3 = TimeProspect(waitingProspect = WaitingProspect(waitingTime1 = timeProspect1Block3.expectedWaitingTime-maxTimeVariability,
                                                                          p1=prob,
                                                                          waitingTime2 = timeProspect1Block3.expectedWaitingTime+maxTimeVariability),
                                                travelProspect = TravelProspect(travelTime1 = timeProspect1Block3.expectedTravelTime,
                                                                        p1=1.0))

    #Variable Travel Time (max Variability)
    timeProspect5Block3 = TimeProspect(waitingProspect = WaitingProspect(waitingTime1 = timeProspect1Block3.expectedWaitingTime,
                                                                          p1=1.0),
                                                travelProspect = TravelProspect(travelTime1 = timeProspect1Block3.expectedTravelTime-maxTimeVariability,
                                                                        p1=prob,
                                                                        travelTime2 = timeProspect1Block3.expectedTravelTime+maxTimeVariability))

    # #Variable Waiting and Travel Time (max Variability)
    timeProspect6Block3 = TimeProspect(waitingProspect = WaitingProspect(waitingTime1 = timeProspect1Block3.expectedWaitingTime-maxTimeVariability,
                                                                          p1=prob,
                                                                          waitingTime2 = timeProspect1Block3.expectedWaitingTime+maxTimeVariability),
                                                travelProspect = TravelProspect(travelTime1 = timeProspect1Block3.expectedTravelTime-maxTimeVariability,
                                                                        p1=prob,
                                                                        travelTime2 = timeProspect1Block3.expectedTravelTime+maxTimeVariability))

    timeProspectsBlock3 = [timeProspect1Block3, timeProspect2Block3, timeProspect3Block3,
                                   timeProspect4Block3, timeProspect5Block3,timeProspect6Block3]

    # c) Prospect sets experiment block 3 (six)

    timeProspectSet1Block3 = TimeProspectSet([timeProspectsBlock3[1], timeProspectsBlock3[0]])
    timeProspectSet2Block3 = TimeProspectSet([timeProspectsBlock3[2], timeProspectsBlock3[0]])
    timeProspectSet3Block3 = TimeProspectSet([timeProspectsBlock3[1], timeProspectsBlock3[2]])
    timeProspectSet4Block3 = TimeProspectSet([timeProspectsBlock3[3], timeProspectsBlock3[0]])
    timeProspectSet5Block3 = TimeProspectSet([timeProspectsBlock3[4], timeProspectsBlock3[0]])
    timeProspectSet6Block3 = TimeProspectSet([timeProspectsBlock3[3], timeProspectsBlock3[4]])

    window.timeProspectSetsBlock3 = [timeProspectSet1Block3, timeProspectSet2Block3, timeProspectSet3Block3,
                                 timeProspectSet4Block3,timeProspectSet5Block3,timeProspectSet6Block3]


    # window.timeProspectSetsBlock3 = [timeProspectSet1Block3, timeProspectSet2Block3]

# 4) Generation of the three blocks ******************************************************    #

def createDescriptiveBlocks():

    #Block 0 (Example)
    window.devTreatment1Block0 = 0    # 0.2 x 5 = 1
    window.devTreatment2Block0 = 0.2  # 0.2 x 5 = 1

    createAlternativesBlock0(devTreatment1=window.devTreatment1Block0, devTreatment2=window.devTreatment2Block0,
                             journeyLength=window.journeyLengthConditions[0])


    # Block 1 (Training)

    window.devTreatment1Block1 = 0.2  # Before it was set in 0.25
    window.devTreatment2Block1 = 0.8  # Before it was set in 0.75

    createAlternativesBlock1(devTreatment1=window.devTreatment1Block1, devTreatment2=window.devTreatment2Block1,
                             journeyLength=window.journeyLengthConditions[0])

    # Block 2
    window.deltaTreatmentsBlock2 = 0.1  # Delta Treatments

    window.devControlsBlock2 = 0.6  # Before it was set in 0.5

    createAlternativesBlock2(deltaTreatments=window.deltaTreatmentsBlock2, devControls=window.devControlsBlock2
                             , journeyLength=window.journeyLengthConditions[0]
                             , timeAlternativesBlock1=window.timeAlternativesBlock1)

    # Block 3
    window.minTimeVariabilityBlock3 = window.journeyLengthConditions[0] * 0.4 * 0.5
    window.maxTimeVariabilityBlock3 = window.journeyLengthConditions[0] * 0.4 * 1.0
    window.probBlock3 = 0.5

    createAlternativesBlock3(minTimeVariability=window.minTimeVariabilityBlock3
                             , maxTimeVariability=window.maxTimeVariabilityBlock3
                             , prob=window.probBlock3, journeyLength=window.journeyLengthConditions[0])

    # Total Choice Sets
    window.totalChoiceSets = len(window.timeChoiceSetsBlock1) + len(
        window.timeChoiceSetsBlock2) + len(window.timeProspectSetsBlock3)

# b) Execution ******************************************************    #

# setupProgram()


# ***************   Default commands to display the User Interface (UI) *************************************** #

window.show()

sys.exit(app.exec_())
